
Tuto_Uart-w-TIM-RTC_001_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000078  08005700  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08005700  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147d3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e2  00000000  00000000  00034873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00037258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  000383e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f43  00000000  00000000  00039470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001485c  00000000  00000000  000533b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7b9b  00000000  00000000  00067c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f7aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000439c  00000000  00000000  0010f7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005584 	.word	0x08005584

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08005584 	.word	0x08005584

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc3a 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f82e 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f94e 	bl	80008ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f92e 	bl	80008b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f8de 	bl	8000814 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f87c 	bl	8000754 <MX_RTC_Init>
  MX_TIM14_Init();
 800065c:	f000 f8b2 	bl	80007c4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <main+0x58>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2202      	movs	r2, #2
 8000666:	4252      	negs	r2, r2
 8000668:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while ( 1 )
  {
	  uart_comm ( request , expected_answer , i ) ;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <main+0x5c>)
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <main+0x60>)
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <main+0x64>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	001a      	movs	r2, r3
 800067a:	f000 f965 	bl	8000948 <uart_comm>
	  i++ ;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <main+0x64>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <main+0x64>)
 8000688:	701a      	strb	r2, [r3, #0]
	  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFI ) ;
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	01db      	lsls	r3, r3, #7
 800068e:	2101      	movs	r1, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fa07 	bl	8001aa4 <HAL_PWR_EnterSTOPMode>
	  uart_comm ( request , expected_answer , i ) ;
 8000696:	e7e8      	b.n	800066a <main+0x2a>
 8000698:	200000c0 	.word	0x200000c0
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000004 	.word	0x20000004
 80006a4:	2000035c 	.word	0x2000035c

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b093      	sub	sp, #76	; 0x4c
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	2410      	movs	r4, #16
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	2338      	movs	r3, #56	; 0x38
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f004 fadf 	bl	8004c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006be:	003b      	movs	r3, r7
 80006c0:	0018      	movs	r0, r3
 80006c2:	2310      	movs	r3, #16
 80006c4:	001a      	movs	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	f004 fad8 	bl	8004c7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fa1f 	bl	8001b14 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d6:	f001 f9d7 	bl	8001a88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <SystemClock_Config+0xa8>)
 80006dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <SystemClock_Config+0xa8>)
 80006e0:	2118      	movs	r1, #24
 80006e2:	438a      	bics	r2, r1
 80006e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2206      	movs	r2, #6
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2201      	movs	r2, #1
 80006f0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0052      	lsls	r2, r2, #1
 80006f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2240      	movs	r2, #64	; 0x40
 8000704:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	193b      	adds	r3, r7, r4
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fa4c 	bl	8001bac <HAL_RCC_OscConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000718:	f000 f9f4 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	003b      	movs	r3, r7
 800071e:	2207      	movs	r2, #7
 8000720:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	003b      	movs	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000734:	003b      	movs	r3, r7
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fd51 	bl	80021e0 <HAL_RCC_ClockConfig>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000742:	f000 f9df 	bl	8000b04 <Error_Handler>
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b013      	add	sp, #76	; 0x4c
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40021000 	.word	0x40021000

08000754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_RTC_Init+0x68>)
 800075a:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <MX_RTC_Init+0x6c>)
 800075c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_RTC_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_RTC_Init+0x68>)
 8000766:	227f      	movs	r2, #127	; 0x7f
 8000768:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_RTC_Init+0x68>)
 800076c:	22ff      	movs	r2, #255	; 0xff
 800076e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_RTC_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_RTC_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_RTC_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_RTC_Init+0x68>)
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	05d2      	lsls	r2, r2, #23
 8000788:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_RTC_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_RTC_Init+0x68>)
 8000792:	0018      	movs	r0, r3
 8000794:	f002 f886 	bl	80028a4 <HAL_RTC_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f9b2 	bl	8000b04 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_RTC_Init+0x68>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	210a      	movs	r1, #10
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 f9cc 	bl	8002b44 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 f9a8 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000094 	.word	0x20000094
 80007c0:	40002800 	.word	0x40002800

080007c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_TIM14_Init+0x40>)
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <MX_TIM14_Init+0x44>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_TIM14_Init+0x40>)
 80007d0:	4a0e      	ldr	r2, [pc, #56]	; (800080c <MX_TIM14_Init+0x48>)
 80007d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_TIM14_Init+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000-1;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_TIM14_Init+0x40>)
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <MX_TIM14_Init+0x4c>)
 80007de:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_TIM14_Init+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_TIM14_Init+0x40>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MX_TIM14_Init+0x40>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 fa68 	bl	8002cc4 <HAL_TIM_Base_Init>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80007f8:	f000 f984 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200000c0 	.word	0x200000c0
 8000808:	40002000 	.word	0x40002000
 800080c:	00003e7f 	.word	0x00003e7f
 8000810:	00001387 	.word	0x00001387

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800081a:	4a24      	ldr	r2, [pc, #144]	; (80008ac <MX_USART2_UART_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000820:	22e1      	movs	r2, #225	; 0xe1
 8000822:	0252      	lsls	r2, r2, #9
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fcfc 	bl	800325c <HAL_UART_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 f94c 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800086e:	2100      	movs	r1, #0
 8000870:	0018      	movs	r0, r3
 8000872:	f004 f891 	bl	8004998 <HAL_UARTEx_SetTxFifoThreshold>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800087a:	f000 f943 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f004 f8c8 	bl	8004a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f93a 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000892:	0018      	movs	r0, r3
 8000894:	f004 f846 	bl	8004924 <HAL_UARTEx_DisableFifoMode>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f932 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	2000010c 	.word	0x2000010c
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_DMA_Init+0x38>)
 80008b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_DMA_Init+0x38>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_DMA_Init+0x38>)
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2009      	movs	r0, #9
 80008d4:	f000 fc24 	bl	8001120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008d8:	2009      	movs	r0, #9
 80008da:	f000 fc36 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_GPIO_Init+0x58>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_GPIO_Init+0x58>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_GPIO_Init+0x58>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000902:	2204      	movs	r2, #4
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_GPIO_Init+0x58>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_GPIO_Init+0x58>)
 8000910:	2120      	movs	r1, #32
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_GPIO_Init+0x58>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091a:	2220      	movs	r2, #32
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_GPIO_Init+0x58>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_GPIO_Init+0x58>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_GPIO_Init+0x58>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b004      	add	sp, #16
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40021000 	.word	0x40021000

08000948 <uart_comm>:

/* USER CODE BEGIN 4 */
uint8_t uart_comm ( const char* r , const char* a , uint16_t n )
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	1dbb      	adds	r3, r7, #6
 8000954:	801a      	strh	r2, [r3, #0]
	uint8_t t ;
	uint8_t expected_answer_come = 0 ;
 8000956:	2316      	movs	r3, #22
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	sprintf ( uart_tx_buff , "%s%d" , r , n ) ;
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	492c      	ldr	r1, [pc, #176]	; (8000a18 <uart_comm+0xd0>)
 8000966:	482d      	ldr	r0, [pc, #180]	; (8000a1c <uart_comm+0xd4>)
 8000968:	f004 f990 	bl	8004c8c <siprintf>

	receive_dma_uart () ;
 800096c:	f000 f878 	bl	8000a60 <receive_dma_uart>
	for ( t = 0 ; t < 5 ; t++ )
 8000970:	2317      	movs	r3, #23
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	e040      	b.n	80009fc <uart_comm+0xb4>
	{
		tim14_on = 1 ;
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <uart_comm+0xd8>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <uart_comm+0xdc>)
 8000982:	0018      	movs	r0, r3
 8000984:	f002 f9f6 	bl	8002d74 <HAL_TIM_Base_Start_IT>
		answer_come = 0 ;
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <uart_comm+0xe0>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]

		send_string_2_uart ( uart_tx_buff ) ;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <uart_comm+0xd4>)
 8000990:	0018      	movs	r0, r3
 8000992:	f000 f84f 	bl	8000a34 <send_string_2_uart>
		while ( tim14_on )
 8000996:	e022      	b.n	80009de <uart_comm+0x96>
		{
			if ( answer_come == 1 )
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <uart_comm+0xe0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d11e      	bne.n	80009de <uart_comm+0x96>
			{
				if ( strncmp ( uart_rx_buff , a , strlen ( a ) ) == 0 )
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fbae 	bl	8000104 <strlen>
 80009a8:	0002      	movs	r2, r0
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <uart_comm+0xe4>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f004 f98c 	bl	8004ccc <strncmp>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d10f      	bne.n	80009d8 <uart_comm+0x90>
				{
					expected_answer_come = 1 ;
 80009b8:	2316      	movs	r3, #22
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
					// I want to show how many tries was done to get expected answer
					// I can use uart_tx_buff because function is closing.
					sprintf ( uart_tx_buff , "%s.%d" , uart_rx_buff , t ) ;
 80009c0:	2317      	movs	r3, #23
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <uart_comm+0xe4>)
 80009c8:	4919      	ldr	r1, [pc, #100]	; (8000a30 <uart_comm+0xe8>)
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <uart_comm+0xd4>)
 80009cc:	f004 f95e 	bl	8004c8c <siprintf>
					send_string_2_uart ( uart_tx_buff ) ;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <uart_comm+0xd4>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f82e 	bl	8000a34 <send_string_2_uart>
				}
				receive_dma_uart () ;
 80009d8:	f000 f842 	bl	8000a60 <receive_dma_uart>
				break ;
 80009dc:	e003      	b.n	80009e6 <uart_comm+0x9e>
		while ( tim14_on )
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <uart_comm+0xd8>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1d8      	bne.n	8000998 <uart_comm+0x50>
			}
		}
		if ( expected_answer_come == 1 )
 80009e6:	2316      	movs	r3, #22
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d00b      	beq.n	8000a08 <uart_comm+0xc0>
	for ( t = 0 ; t < 5 ; t++ )
 80009f0:	2117      	movs	r1, #23
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	3201      	adds	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	2317      	movs	r3, #23
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d9b9      	bls.n	800097a <uart_comm+0x32>
 8000a06:	e000      	b.n	8000a0a <uart_comm+0xc2>
			break ;
 8000a08:	46c0      	nop			; (mov r8, r8)
	}
	return expected_answer_come ;
 8000a0a:	2316      	movs	r3, #22
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b006      	add	sp, #24
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	080055ac 	.word	0x080055ac
 8000a1c:	20000260 	.word	0x20000260
 8000a20:	2000035b 	.word	0x2000035b
 8000a24:	200000c0 	.word	0x200000c0
 8000a28:	2000035a 	.word	0x2000035a
 8000a2c:	200001fc 	.word	0x200001fc
 8000a30:	080055b4 	.word	0x080055b4

08000a34 <send_string_2_uart>:

HAL_StatusTypeDef send_string_2_uart ( char* s )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit ( UART_HANDLER , (uint8_t *) s , strlen ( s ) , UART_TX_TIMEOUT ) ;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff fb60 	bl	8000104 <strlen>
 8000a44:	0003      	movs	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <send_string_2_uart+0x28>)
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	f002 fc5b 	bl	8003308 <HAL_UART_Transmit>
 8000a52:	0003      	movs	r3, r0
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000010c 	.word	0x2000010c

08000a60 <receive_dma_uart>:

void receive_dma_uart ()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA ( UART_HANDLER , (uint8_t*) uart_rx_buff , UART_RX_MAX_BUFF_SIZE ) ;
 8000a64:	4908      	ldr	r1, [pc, #32]	; (8000a88 <receive_dma_uart+0x28>)
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <receive_dma_uart+0x2c>)
 8000a68:	2264      	movs	r2, #100	; 0x64
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f004 f816 	bl	8004a9c <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT ( &hdma_usart2_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <receive_dma_uart+0x30>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <receive_dma_uart+0x30>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	438a      	bics	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	200001fc 	.word	0x200001fc
 8000a8c:	2000010c 	.word	0x2000010c
 8000a90:	200001a0 	.word	0x200001a0

08000a94 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	000a      	movs	r2, r1
 8000a9e:	1cbb      	adds	r3, r7, #2
 8000aa0:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART2 )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_UARTEx_RxEventCallback+0x30>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d107      	bne.n	8000abc <HAL_UARTEx_RxEventCallback+0x28>
    {
		uart_rx_buff[Size] = '\0' ;
 8000aac:	1cbb      	adds	r3, r7, #2
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <HAL_UARTEx_RxEventCallback+0x34>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	54d1      	strb	r1, [r2, r3]
		answer_come = 1 ;
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_UARTEx_RxEventCallback+0x38>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
    }
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	200001fc 	.word	0x200001fc
 8000acc:	2000035a 	.word	0x2000035a

08000ad0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d106      	bne.n	8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 f99e 	bl	8002e2c <HAL_TIM_Base_Stop_IT>
	}
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40002000 	.word	0x40002000
 8000afc:	2000035b 	.word	0x2000035b
 8000b00:	200000c0 	.word	0x200000c0

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_MspInit+0x44>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0549      	lsls	r1, r1, #21
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_MspInit+0x44>)
 8000b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	055b      	lsls	r3, r3, #21
 8000b44:	4013      	ands	r3, r2
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b091      	sub	sp, #68	; 0x44
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	240c      	movs	r4, #12
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2334      	movs	r3, #52	; 0x34
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f004 f886 	bl	8004c7c <memset>
  if(hrtc->Instance==RTC)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <HAL_RTC_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12c      	bne.n	8000bd4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	0292      	lsls	r2, r2, #10
 8000b80:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	0052      	lsls	r2, r2, #1
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 fcd1 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b96:	f7ff ffb5 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_RTC_MspInit+0x88>)
 8000b9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_RTC_MspInit+0x88>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0209      	lsls	r1, r1, #8
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_RTC_MspInit+0x88>)
 8000baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_RTC_MspInit+0x88>)
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	00c9      	lsls	r1, r1, #3
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_RTC_MspInit+0x88>)
 8000bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f000 faa9 	bl	8001120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 fabb 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b011      	add	sp, #68	; 0x44
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	40002800 	.word	0x40002800
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_TIM_Base_MspInit+0x48>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d115      	bne.n	8000c22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_TIM_Base_MspInit+0x4c>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0209      	lsls	r1, r1, #8
 8000c00:	430a      	orrs	r2, r1
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_TIM_Base_MspInit+0x4c>)
 8000c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2013      	movs	r0, #19
 8000c18:	f000 fa82 	bl	8001120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000c1c:	2013      	movs	r0, #19
 8000c1e:	f000 fa94 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40002000 	.word	0x40002000
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b097      	sub	sp, #92	; 0x5c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	2344      	movs	r3, #68	; 0x44
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	0018      	movs	r0, r3
 8000c42:	2314      	movs	r3, #20
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f004 f818 	bl	8004c7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	2410      	movs	r4, #16
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	2334      	movs	r3, #52	; 0x34
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f004 f810 	bl	8004c7c <memset>
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <HAL_UART_MspInit+0x11c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d170      	bne.n	8000d48 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2202      	movs	r2, #2
 8000c6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fc5d 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c7e:	f7ff ff41 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_UART_MspInit+0x120>)
 8000c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c86:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <HAL_UART_MspInit+0x120>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0289      	lsls	r1, r1, #10
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <HAL_UART_MspInit+0x120>)
 8000c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	029b      	lsls	r3, r3, #10
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_UART_MspInit+0x120>)
 8000ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <HAL_UART_MspInit+0x120>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_UART_MspInit+0x120>)
 8000cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_STLK_TX_Pin|USART2_STLK_RX_Pin;
 8000cb6:	2144      	movs	r1, #68	; 0x44
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	187a      	adds	r2, r7, r1
 8000cd8:	23a0      	movs	r3, #160	; 0xa0
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	0011      	movs	r1, r2
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fd6e 	bl	80017c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_UART_MspInit+0x128>)
 8000ce8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000cec:	2234      	movs	r2, #52	; 0x34
 8000cee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fa31 	bl	8001184 <HAL_DMA_Init>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000d26:	f7ff feed 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000d30:	505a      	str	r2, [r3, r1]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_UART_MspInit+0x124>)
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	201c      	movs	r0, #28
 8000d3e:	f000 f9ef 	bl	8001120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d42:	201c      	movs	r0, #28
 8000d44:	f000 fa01 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b017      	add	sp, #92	; 0x5c
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	200001a0 	.word	0x200001a0
 8000d5c:	40020008 	.word	0x40020008

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f904 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <RTC_TAMP_IRQHandler+0x14>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f001 ff6e 	bl	8002c78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000094 	.word	0x20000094

08000da8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <DMA1_Channel1_IRQHandler+0x14>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fbc4 	bl	800153c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	200001a0 	.word	0x200001a0

08000dc0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <TIM14_IRQHandler+0x14>)
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f002 f85e 	bl	8002e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	200000c0 	.word	0x200000c0

08000dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <USART2_IRQHandler+0x14>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f002 fb2e 	bl	8003440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	2000010c 	.word	0x2000010c

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f003 ff02 	bl	8004c28 <__errno>
 8000e24:	0003      	movs	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	18d2      	adds	r2, r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b006      	add	sp, #24
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20009000 	.word	0x20009000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	20000360 	.word	0x20000360
 8000e58:	20000378 	.word	0x20000378

08000e5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e6c:	f7ff fff6 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <LoopForever+0xe>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	; (8000eb4 <LoopForever+0x16>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e96:	f003 fecd 	bl	8004c34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e9a:	f7ff fbd1 	bl	8000640 <main>

08000e9e <LoopForever>:

LoopForever:
  b LoopForever
 8000e9e:	e7fe      	b.n	8000e9e <LoopForever>
  ldr   r0, =_estack
 8000ea0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000eac:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8000eb0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000eb4:	20000378 	.word	0x20000378

08000eb8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_COMP_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x3c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_Init+0x3c>)
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	0049      	lsls	r1, r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f810 	bl	8000efc <HAL_InitTick>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e001      	b.n	8000eec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fe12 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40022000 	.word	0x40022000

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_InitTick+0x88>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d02b      	beq.n	8000f6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_InitTick+0x8c>)
 8000f16:	681c      	ldr	r4, [r3, #0]
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_InitTick+0x88>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	23fa      	movs	r3, #250	; 0xfa
 8000f20:	0098      	lsls	r0, r3, #2
 8000f22:	f7ff f901 	bl	8000128 <__udivsi3>
 8000f26:	0003      	movs	r3, r0
 8000f28:	0019      	movs	r1, r3
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	f7ff f8fc 	bl	8000128 <__udivsi3>
 8000f30:	0003      	movs	r3, r0
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f919 	bl	800116a <HAL_SYSTICK_Config>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d112      	bne.n	8000f62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d80a      	bhi.n	8000f58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
 8000f48:	2200      	movs	r2, #0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f8e8 	bl	8001120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_InitTick+0x90>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e00d      	b.n	8000f74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e008      	b.n	8000f74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f62:	230f      	movs	r3, #15
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e003      	b.n	8000f74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b005      	add	sp, #20
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	20000010 	.word	0x20000010
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	2000000c 	.word	0x2000000c

08000f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x1c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	001a      	movs	r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	18d2      	adds	r2, r2, r3
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_IncTick+0x20>)
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	20000364 	.word	0x20000364

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <HAL_GetTick+0x10>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	20000364 	.word	0x20000364

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	0002      	movs	r2, r0
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fda:	d809      	bhi.n	8000ff0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_EnableIRQ+0x30>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4091      	lsls	r1, r2
 8000fec:	000a      	movs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	0002      	movs	r2, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b7f      	cmp	r3, #127	; 0x7f
 8001010:	d828      	bhi.n	8001064 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001012:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <__NVIC_SetPriority+0xd4>)
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	33c0      	adds	r3, #192	; 0xc0
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	589b      	ldr	r3, [r3, r2]
 8001022:	1dfa      	adds	r2, r7, #7
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	0011      	movs	r1, r2
 8001028:	2203      	movs	r2, #3
 800102a:	400a      	ands	r2, r1
 800102c:	00d2      	lsls	r2, r2, #3
 800102e:	21ff      	movs	r1, #255	; 0xff
 8001030:	4091      	lsls	r1, r2
 8001032:	000a      	movs	r2, r1
 8001034:	43d2      	mvns	r2, r2
 8001036:	401a      	ands	r2, r3
 8001038:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	019b      	lsls	r3, r3, #6
 800103e:	22ff      	movs	r2, #255	; 0xff
 8001040:	401a      	ands	r2, r3
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	2303      	movs	r3, #3
 800104a:	4003      	ands	r3, r0
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	481f      	ldr	r0, [pc, #124]	; (80010d0 <__NVIC_SetPriority+0xd4>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	430a      	orrs	r2, r1
 800105c:	33c0      	adds	r3, #192	; 0xc0
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001062:	e031      	b.n	80010c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <__NVIC_SetPriority+0xd8>)
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	0019      	movs	r1, r3
 800106c:	230f      	movs	r3, #15
 800106e:	400b      	ands	r3, r1
 8001070:	3b08      	subs	r3, #8
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3306      	adds	r3, #6
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	18d3      	adds	r3, r2, r3
 800107a:	3304      	adds	r3, #4
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1dfa      	adds	r2, r7, #7
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	0011      	movs	r1, r2
 8001084:	2203      	movs	r2, #3
 8001086:	400a      	ands	r2, r1
 8001088:	00d2      	lsls	r2, r2, #3
 800108a:	21ff      	movs	r1, #255	; 0xff
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	43d2      	mvns	r2, r2
 8001092:	401a      	ands	r2, r3
 8001094:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	019b      	lsls	r3, r3, #6
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	401a      	ands	r2, r3
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	0018      	movs	r0, r3
 80010a4:	2303      	movs	r3, #3
 80010a6:	4003      	ands	r3, r0
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <__NVIC_SetPriority+0xd8>)
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	001c      	movs	r4, r3
 80010b4:	230f      	movs	r3, #15
 80010b6:	4023      	ands	r3, r4
 80010b8:	3b08      	subs	r3, #8
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	430a      	orrs	r2, r1
 80010be:	3306      	adds	r3, #6
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	18c3      	adds	r3, r0, r3
 80010c4:	3304      	adds	r3, #4
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b003      	add	sp, #12
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1e5a      	subs	r2, r3, #1
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	045b      	lsls	r3, r3, #17
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d301      	bcc.n	80010f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ec:	2301      	movs	r3, #1
 80010ee:	e010      	b.n	8001112 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <SysTick_Config+0x44>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	3a01      	subs	r2, #1
 80010f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f8:	2301      	movs	r3, #1
 80010fa:	425b      	negs	r3, r3
 80010fc:	2103      	movs	r1, #3
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff ff7c 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x44>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x44>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	210f      	movs	r1, #15
 800112c:	187b      	adds	r3, r7, r1
 800112e:	1c02      	adds	r2, r0, #0
 8001130:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	187b      	adds	r3, r7, r1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	0002      	movs	r2, r0
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b25b      	sxtb	r3, r3
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ff33 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff ffaf 	bl	80010d8 <SysTick_Config>
 800117a:	0003      	movs	r3, r0
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e077      	b.n	8001286 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <HAL_DMA_Init+0x10c>)
 800119c:	4694      	mov	ip, r2
 800119e:	4463      	add	r3, ip
 80011a0:	2114      	movs	r1, #20
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7fe ffc0 	bl	8000128 <__udivsi3>
 80011a8:	0003      	movs	r3, r0
 80011aa:	009a      	lsls	r2, r3, #2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2225      	movs	r2, #37	; 0x25
 80011b4:	2102      	movs	r1, #2
 80011b6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4934      	ldr	r1, [pc, #208]	; (8001294 <HAL_DMA_Init+0x110>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f000 fa8d 	bl	8001720 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	01db      	lsls	r3, r3, #7
 800120e:	429a      	cmp	r2, r3
 8001210:	d102      	bne.n	8001218 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	213f      	movs	r1, #63	; 0x3f
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800122e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d011      	beq.n	800125c <HAL_DMA_Init+0xd8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d80d      	bhi.n	800125c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fa98 	bl	8001778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	e008      	b.n	800126e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2225      	movs	r2, #37	; 0x25
 8001278:	2101      	movs	r1, #1
 800127a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2224      	movs	r2, #36	; 0x24
 8001280:	2100      	movs	r1, #0
 8001282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	bffdfff8 	.word	0xbffdfff8
 8001294:	ffff800f 	.word	0xffff800f

08001298 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2317      	movs	r3, #23
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2224      	movs	r2, #36	; 0x24
 80012b2:	5c9b      	ldrb	r3, [r3, r2]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Start_IT+0x24>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e06f      	b.n	800139c <HAL_DMA_Start_IT+0x104>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2101      	movs	r1, #1
 80012c2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2225      	movs	r2, #37	; 0x25
 80012c8:	5c9b      	ldrb	r3, [r3, r2]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d157      	bne.n	8001380 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2225      	movs	r2, #37	; 0x25
 80012d4:	2102      	movs	r1, #2
 80012d6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	438a      	bics	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f9d3 	bl	80016a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	210e      	movs	r1, #14
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e00f      	b.n	8001334 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2104      	movs	r1, #4
 8001320:	438a      	bics	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	210a      	movs	r1, #10
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	4013      	ands	r3, r2
 8001340:	d008      	beq.n	8001354 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0049      	lsls	r1, r1, #1
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	0049      	lsls	r1, r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00a      	b.n	8001396 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2224      	movs	r2, #36	; 0x24
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800138e:	2317      	movs	r3, #23
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001396:	2317      	movs	r3, #23
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	781b      	ldrb	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e050      	b.n	8001458 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2225      	movs	r2, #37	; 0x25
 80013ba:	5c9b      	ldrb	r3, [r3, r2]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d008      	beq.n	80013d4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2224      	movs	r2, #36	; 0x24
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e041      	b.n	8001458 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	210e      	movs	r1, #14
 80013e0:	438a      	bics	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	491c      	ldr	r1, [pc, #112]	; (8001460 <HAL_DMA_Abort+0xbc>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2101      	movs	r1, #1
 8001400:	438a      	bics	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_DMA_Abort+0xc0>)
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	221c      	movs	r2, #28
 800140e:	4013      	ands	r3, r2
 8001410:	2201      	movs	r2, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_DMA_Abort+0xc0>)
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001422:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00c      	beq.n	8001446 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001436:	490a      	ldr	r1, [pc, #40]	; (8001460 <HAL_DMA_Abort+0xbc>)
 8001438:	400a      	ands	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001444:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2225      	movs	r2, #37	; 0x25
 800144a:	2101      	movs	r1, #1
 800144c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2224      	movs	r2, #36	; 0x24
 8001452:	2100      	movs	r1, #0
 8001454:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	fffffeff 	.word	0xfffffeff
 8001464:	40020000 	.word	0x40020000

08001468 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001470:	210f      	movs	r1, #15
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2225      	movs	r2, #37	; 0x25
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d006      	beq.n	8001492 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e049      	b.n	8001526 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	210e      	movs	r1, #14
 800149e:	438a      	bics	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	491d      	ldr	r1, [pc, #116]	; (8001534 <HAL_DMA_Abort_IT+0xcc>)
 80014be:	400a      	ands	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_DMA_Abort_IT+0xd0>)
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	221c      	movs	r2, #28
 80014cc:	4013      	ands	r3, r2
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_DMA_Abort_IT+0xd0>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00c      	beq.n	8001504 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f4:	490f      	ldr	r1, [pc, #60]	; (8001534 <HAL_DMA_Abort_IT+0xcc>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001502:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2225      	movs	r2, #37	; 0x25
 8001508:	2101      	movs	r1, #1
 800150a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2224      	movs	r2, #36	; 0x24
 8001510:	2100      	movs	r1, #0
 8001512:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	0010      	movs	r0, r2
 8001524:	4798      	blx	r3
    }
  }
  return status;
 8001526:	230f      	movs	r3, #15
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b004      	add	sp, #16
 8001532:	bd80      	pop	{r7, pc}
 8001534:	fffffeff 	.word	0xfffffeff
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001544:	4b55      	ldr	r3, [pc, #340]	; (800169c <HAL_DMA_IRQHandler+0x160>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	221c      	movs	r2, #28
 8001558:	4013      	ands	r3, r2
 800155a:	2204      	movs	r2, #4
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	d027      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x7a>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2204      	movs	r2, #4
 800156a:	4013      	ands	r3, r2
 800156c:	d023      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2220      	movs	r2, #32
 8001576:	4013      	ands	r3, r2
 8001578:	d107      	bne.n	800158a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2104      	movs	r1, #4
 8001586:	438a      	bics	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_DMA_IRQHandler+0x160>)
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	221c      	movs	r2, #28
 8001594:	4013      	ands	r3, r2
 8001596:	2204      	movs	r2, #4
 8001598:	409a      	lsls	r2, r3
 800159a:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_DMA_IRQHandler+0x160>)
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d100      	bne.n	80015aa <HAL_DMA_IRQHandler+0x6e>
 80015a8:	e073      	b.n	8001692 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	0010      	movs	r0, r2
 80015b2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80015b4:	e06d      	b.n	8001692 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	221c      	movs	r2, #28
 80015bc:	4013      	ands	r3, r2
 80015be:	2202      	movs	r2, #2
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	d02e      	beq.n	8001628 <HAL_DMA_IRQHandler+0xec>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2202      	movs	r2, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d02a      	beq.n	8001628 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2220      	movs	r2, #32
 80015da:	4013      	ands	r3, r2
 80015dc:	d10b      	bne.n	80015f6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	210a      	movs	r1, #10
 80015ea:	438a      	bics	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2225      	movs	r2, #37	; 0x25
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_DMA_IRQHandler+0x160>)
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	221c      	movs	r2, #28
 8001600:	4013      	ands	r3, r2
 8001602:	2202      	movs	r2, #2
 8001604:	409a      	lsls	r2, r3
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_DMA_IRQHandler+0x160>)
 8001608:	430a      	orrs	r2, r1
 800160a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	; 0x24
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	2b00      	cmp	r3, #0
 800161a:	d03a      	beq.n	8001692 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	0010      	movs	r0, r2
 8001624:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001626:	e034      	b.n	8001692 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	221c      	movs	r2, #28
 800162e:	4013      	ands	r3, r2
 8001630:	2208      	movs	r2, #8
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	d02b      	beq.n	8001694 <HAL_DMA_IRQHandler+0x158>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2208      	movs	r2, #8
 8001640:	4013      	ands	r3, r2
 8001642:	d027      	beq.n	8001694 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	210e      	movs	r1, #14
 8001650:	438a      	bics	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_DMA_IRQHandler+0x160>)
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	221c      	movs	r2, #28
 800165e:	4013      	ands	r3, r2
 8001660:	2201      	movs	r2, #1
 8001662:	409a      	lsls	r2, r3
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_DMA_IRQHandler+0x160>)
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2225      	movs	r2, #37	; 0x25
 8001674:	2101      	movs	r1, #1
 8001676:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2224      	movs	r2, #36	; 0x24
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	0010      	movs	r0, r2
 8001690:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46c0      	nop			; (mov r8, r8)
}
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40020000 	.word	0x40020000

080016a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80016b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80016c8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <DMA_SetConfig+0x7c>)
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	221c      	movs	r2, #28
 80016d4:	4013      	ands	r3, r2
 80016d6:	2201      	movs	r2, #1
 80016d8:	409a      	lsls	r2, r3
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <DMA_SetConfig+0x7c>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d108      	bne.n	8001702 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001700:	e007      	b.n	8001712 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	60da      	str	r2, [r3, #12]
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b004      	add	sp, #16
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40020000 	.word	0x40020000

08001720 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001730:	4694      	mov	ip, r2
 8001732:	4463      	add	r3, ip
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	001a      	movs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	23ff      	movs	r3, #255	; 0xff
 8001744:	4013      	ands	r3, r2
 8001746:	3b08      	subs	r3, #8
 8001748:	2114      	movs	r1, #20
 800174a:	0018      	movs	r0, r3
 800174c:	f7fe fcec 	bl	8000128 <__udivsi3>
 8001750:	0003      	movs	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001758:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	221f      	movs	r2, #31
 800175e:	4013      	ands	r3, r2
 8001760:	2201      	movs	r2, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}
 8001770:	10008200 	.word	0x10008200
 8001774:	40020880 	.word	0x40020880

08001778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	223f      	movs	r2, #63	; 0x3f
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800178e:	4694      	mov	ip, r2
 8001790:	4463      	add	r3, ip
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	001a      	movs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800179e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
 80017a8:	2201      	movs	r2, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	1000823f 	.word	0x1000823f
 80017bc:	40020940 	.word	0x40020940

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e147      	b.n	8001a60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4091      	lsls	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d100      	bne.n	80017e8 <HAL_GPIO_Init+0x28>
 80017e6:	e138      	b.n	8001a5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d005      	beq.n	8001800 <HAL_GPIO_Init+0x40>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2203      	movs	r2, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d130      	bne.n	8001862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	409a      	lsls	r2, r3
 800180e:	0013      	movs	r3, r2
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	409a      	lsls	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001836:	2201      	movs	r2, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	43da      	mvns	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	2201      	movs	r2, #1
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2203      	movs	r2, #3
 8001868:	4013      	ands	r3, r2
 800186a:	2b03      	cmp	r3, #3
 800186c:	d017      	beq.n	800189e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d123      	bne.n	80018f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	58d3      	ldr	r3, [r2, r3]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2207      	movs	r2, #7
 80018bc:	4013      	ands	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	43da      	mvns	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2107      	movs	r1, #7
 80018d6:	400b      	ands	r3, r1
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	6939      	ldr	r1, [r7, #16]
 80018f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	43da      	mvns	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2203      	movs	r2, #3
 8001910:	401a      	ands	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	029b      	lsls	r3, r3, #10
 800192e:	4013      	ands	r3, r2
 8001930:	d100      	bne.n	8001934 <HAL_GPIO_Init+0x174>
 8001932:	e092      	b.n	8001a5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001934:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3318      	adds	r3, #24
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	589b      	ldr	r3, [r3, r2]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2203      	movs	r2, #3
 8001946:	4013      	ands	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	220f      	movs	r2, #15
 800194c:	409a      	lsls	r2, r3
 800194e:	0013      	movs	r3, r2
 8001950:	43da      	mvns	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	23a0      	movs	r3, #160	; 0xa0
 800195c:	05db      	lsls	r3, r3, #23
 800195e:	429a      	cmp	r2, r3
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x1ca>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a45      	ldr	r2, [pc, #276]	; (8001a7c <HAL_GPIO_Init+0x2bc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x1c6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <HAL_GPIO_Init+0x2c0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x1c2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a43      	ldr	r2, [pc, #268]	; (8001a84 <HAL_GPIO_Init+0x2c4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x1be>
 800197a:	2303      	movs	r3, #3
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x1cc>
 800197e:	2305      	movs	r3, #5
 8001980:	e004      	b.n	800198c <HAL_GPIO_Init+0x1cc>
 8001982:	2302      	movs	r3, #2
 8001984:	e002      	b.n	800198c <HAL_GPIO_Init+0x1cc>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x1cc>
 800198a:	2300      	movs	r3, #0
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	2103      	movs	r1, #3
 8001990:	400a      	ands	r2, r1
 8001992:	00d2      	lsls	r2, r2, #3
 8001994:	4093      	lsls	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800199c:	4936      	ldr	r1, [pc, #216]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3318      	adds	r3, #24
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43da      	mvns	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	035b      	lsls	r3, r3, #13
 80019c2:	4013      	ands	r3, r2
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43da      	mvns	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	039b      	lsls	r3, r3, #14
 80019ec:	4013      	ands	r3, r2
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019fe:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001a00:	2384      	movs	r3, #132	; 0x84
 8001a02:	58d3      	ldr	r3, [r2, r3]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	029b      	lsls	r3, r3, #10
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a24:	4914      	ldr	r1, [pc, #80]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001a26:	2284      	movs	r2, #132	; 0x84
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	58d3      	ldr	r3, [r2, r3]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43da      	mvns	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	4013      	ands	r3, r2
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a52:	4909      	ldr	r1, [pc, #36]	; (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	40da      	lsrs	r2, r3
 8001a68:	1e13      	subs	r3, r2, #0
 8001a6a:	d000      	beq.n	8001a6e <HAL_GPIO_Init+0x2ae>
 8001a6c:	e6b0      	b.n	80017d0 <HAL_GPIO_Init+0x10>
  }
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b006      	add	sp, #24
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021800 	.word	0x40021800
 8001a7c:	50000400 	.word	0x50000400
 8001a80:	50000800 	.word	0x50000800
 8001a84:	50000c00 	.word	0x50000c00

08001a88 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0049      	lsls	r1, r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	000a      	movs	r2, r1
 8001aae:	1cfb      	adds	r3, r7, #3
 8001ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_PWR_EnterSTOPMode+0x68>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2207      	movs	r2, #7
 8001abe:	4393      	bics	r3, r2
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_PWR_EnterSTOPMode+0x68>)
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e005      	b.n	8001ad8 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_PWR_EnterSTOPMode+0x68>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_PWR_EnterSTOPMode+0x68>)
 8001ad2:	2107      	movs	r1, #7
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001ade:	2104      	movs	r1, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001ae4:	1cfb      	adds	r3, r7, #3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001aec:	bf30      	wfi
 8001aee:	e002      	b.n	8001af6 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001af0:	bf40      	sev
    __WFE();
 8001af2:	bf20      	wfe
    __WFE();
 8001af4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001afc:	2104      	movs	r1, #4
 8001afe:	438a      	bics	r2, r1
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d11f      	bne.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	189b      	adds	r3, r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4912      	ldr	r1, [pc, #72]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7fe faee 	bl	8000128 <__udivsi3>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b52:	e008      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e001      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e009      	b.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d0ed      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40007000 	.word	0x40007000
 8001b88:	fffff9ff 	.word	0xfffff9ff
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	000f4240 	.word	0x000f4240

08001b94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	23e0      	movs	r3, #224	; 0xe0
 8001b9e:	01db      	lsls	r3, r3, #7
 8001ba0:	4013      	ands	r3, r2
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e2fe      	b.n	80021bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d100      	bne.n	8001bca <HAL_RCC_OscConfig+0x1e>
 8001bc8:	e07c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bca:	4bc3      	ldr	r3, [pc, #780]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2238      	movs	r2, #56	; 0x38
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd4:	4bc0      	ldr	r3, [pc, #768]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_OscConfig+0x3e>
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d10b      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	4bb9      	ldr	r3, [pc, #740]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	029b      	lsls	r3, r3, #10
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d062      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x116>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d15e      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e2d9      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	025b      	lsls	r3, r3, #9
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x78>
 8001c14:	4bb0      	ldr	r3, [pc, #704]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4baf      	ldr	r3, [pc, #700]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	0249      	lsls	r1, r1, #9
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e020      	b.n	8001c66 <HAL_RCC_OscConfig+0xba>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	23a0      	movs	r3, #160	; 0xa0
 8001c2a:	02db      	lsls	r3, r3, #11
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10e      	bne.n	8001c4e <HAL_RCC_OscConfig+0xa2>
 8001c30:	4ba9      	ldr	r3, [pc, #676]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4ba8      	ldr	r3, [pc, #672]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	02c9      	lsls	r1, r1, #11
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	4ba6      	ldr	r3, [pc, #664]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4ba5      	ldr	r3, [pc, #660]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0249      	lsls	r1, r1, #9
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e00b      	b.n	8001c66 <HAL_RCC_OscConfig+0xba>
 8001c4e:	4ba2      	ldr	r3, [pc, #648]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4ba1      	ldr	r3, [pc, #644]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	49a1      	ldr	r1, [pc, #644]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	4b9f      	ldr	r3, [pc, #636]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b9e      	ldr	r3, [pc, #632]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	499f      	ldr	r1, [pc, #636]	; (8001ee0 <HAL_RCC_OscConfig+0x334>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d014      	beq.n	8001c98 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f9a1 	bl	8000fb4 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f99c 	bl	8000fb4 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e298      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4b93      	ldr	r3, [pc, #588]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xcc>
 8001c96:	e015      	b.n	8001cc4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f98c 	bl	8000fb4 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f987 	bl	8000fb4 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e283      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cb4:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0xf6>
 8001cc0:	e000      	b.n	8001cc4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d100      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x124>
 8001cce:	e099      	b.n	8001e04 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2238      	movs	r2, #56	; 0x38
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cda:	4b7f      	ldr	r3, [pc, #508]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x144>
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d002      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d135      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf6:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x162>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e256      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b72      	ldr	r3, [pc, #456]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a74      	ldr	r2, [pc, #464]	; (8001ee4 <HAL_RCC_OscConfig+0x338>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	021a      	lsls	r2, r3, #8
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d2a:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ee8 <HAL_RCC_OscConfig+0x33c>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	4b67      	ldr	r3, [pc, #412]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d3e:	4b66      	ldr	r3, [pc, #408]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0adb      	lsrs	r3, r3, #11
 8001d44:	2207      	movs	r2, #7
 8001d46:	4013      	ands	r3, r2
 8001d48:	4a68      	ldr	r2, [pc, #416]	; (8001eec <HAL_RCC_OscConfig+0x340>)
 8001d4a:	40da      	lsrs	r2, r3
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x344>)
 8001d4e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x348>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7ff f8d1 	bl	8000efc <HAL_InitTick>
 8001d5a:	1e03      	subs	r3, r0, #0
 8001d5c:	d051      	beq.n	8001e02 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e22c      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d030      	beq.n	8001dcc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <HAL_RCC_OscConfig+0x33c>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d7e:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b55      	ldr	r3, [pc, #340]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0049      	lsls	r1, r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f912 	bl	8000fb4 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff f90d 	bl	8000fb4 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e209      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4013      	ands	r3, r2
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a4a      	ldr	r2, [pc, #296]	; (8001ee4 <HAL_RCC_OscConfig+0x338>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	021a      	lsls	r2, r3, #8
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	e01b      	b.n	8001e04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001dcc:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001dd2:	4949      	ldr	r1, [pc, #292]	; (8001ef8 <HAL_RCC_OscConfig+0x34c>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f8ec 	bl	8000fb4 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff f8e7 	bl	8000fb4 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1e3      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df4:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x236>
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d047      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e0e:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2238      	movs	r2, #56	; 0x38
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b18      	cmp	r3, #24
 8001e18:	d10a      	bne.n	8001e30 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d03c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2f2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d138      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e1c5      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d019      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f8b6 	bl	8000fb4 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f8b1 	bl	8000fb4 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1ad      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d0f1      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2a2>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	438a      	bics	r2, r1
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f89c 	bl	8000fb4 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff f897 	bl	8000fb4 <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e193      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d1f1      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2fe>
 8001ea8:	e0c6      	b.n	8002038 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2238      	movs	r2, #56	; 0x38
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d11e      	bne.n	8001efc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_OscConfig+0x31e>
 8001ec8:	e0b6      	b.n	8002038 <HAL_RCC_OscConfig+0x48c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d000      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x328>
 8001ed2:	e0b1      	b.n	8002038 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e171      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	fffeffff 	.word	0xfffeffff
 8001ee0:	fffbffff 	.word	0xfffbffff
 8001ee4:	ffff80ff 	.word	0xffff80ff
 8001ee8:	ffffc7ff 	.word	0xffffc7ff
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001efc:	4bb1      	ldr	r3, [pc, #708]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	055b      	lsls	r3, r3, #21
 8001f04:	4013      	ands	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x360>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x362>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d011      	beq.n	8001f36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4bac      	ldr	r3, [pc, #688]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f16:	4bab      	ldr	r3, [pc, #684]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0549      	lsls	r1, r1, #21
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f20:	4ba8      	ldr	r3, [pc, #672]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	055b      	lsls	r3, r3, #21
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f2e:	231f      	movs	r3, #31
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f36:	4ba4      	ldr	r3, [pc, #656]	; (80021c8 <HAL_RCC_OscConfig+0x61c>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d11a      	bne.n	8001f78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f42:	4ba1      	ldr	r3, [pc, #644]	; (80021c8 <HAL_RCC_OscConfig+0x61c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4ba0      	ldr	r3, [pc, #640]	; (80021c8 <HAL_RCC_OscConfig+0x61c>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0049      	lsls	r1, r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f830 	bl	8000fb4 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff f82b 	bl	8000fb4 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e127      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	4b96      	ldr	r3, [pc, #600]	; (80021c8 <HAL_RCC_OscConfig+0x61c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3e2>
 8001f80:	4b90      	ldr	r3, [pc, #576]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001f82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f84:	4b8f      	ldr	r3, [pc, #572]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x41c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x404>
 8001f96:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001f98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f9a:	4b8a      	ldr	r3, [pc, #552]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fa2:	4b88      	ldr	r3, [pc, #544]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001fa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fa6:	4b87      	ldr	r3, [pc, #540]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001fa8:	2101      	movs	r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x41c>
 8001fb0:	4b84      	ldr	r3, [pc, #528]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fb4:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438a      	bics	r2, r1
 8001fba:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fbc:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001fbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc0:	4b80      	ldr	r3, [pc, #512]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d014      	beq.n	8001ffa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fff0 	bl	8000fb4 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe ffeb 	bl	8000fb4 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a79      	ldr	r2, [pc, #484]	; (80021cc <HAL_RCC_OscConfig+0x620>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0e6      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x42e>
 8001ff8:	e013      	b.n	8002022 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7fe ffdb 	bl	8000fb4 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002002:	e009      	b.n	8002018 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe ffd6 	bl	8000fb4 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	4a6f      	ldr	r2, [pc, #444]	; (80021cc <HAL_RCC_OscConfig+0x620>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0d1      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002022:	231f      	movs	r3, #31
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 800202e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002030:	4b64      	ldr	r3, [pc, #400]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8002032:	4967      	ldr	r1, [pc, #412]	; (80021d0 <HAL_RCC_OscConfig+0x624>)
 8002034:	400a      	ands	r2, r1
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d100      	bne.n	8002042 <HAL_RCC_OscConfig+0x496>
 8002040:	e0bb      	b.n	80021ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002042:	4b60      	ldr	r3, [pc, #384]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2238      	movs	r2, #56	; 0x38
 8002048:	4013      	ands	r3, r2
 800204a:	2b10      	cmp	r3, #16
 800204c:	d100      	bne.n	8002050 <HAL_RCC_OscConfig+0x4a4>
 800204e:	e07b      	b.n	8002148 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d156      	bne.n	8002106 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 800205e:	495d      	ldr	r1, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x628>)
 8002060:	400a      	ands	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe ffa6 	bl	8000fb4 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe ffa1 	bl	8000fb4 <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e09d      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	049b      	lsls	r3, r3, #18
 8002088:	4013      	ands	r3, r2
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b4d      	ldr	r3, [pc, #308]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_RCC_OscConfig+0x62c>)
 8002092:	4013      	ands	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	431a      	orrs	r2, r3
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c0:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0449      	lsls	r1, r1, #17
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020ce:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0549      	lsls	r1, r1, #21
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe ff6a 	bl	8000fb4 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7fe ff65 	bl	8000fb4 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e061      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f8:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	049b      	lsls	r3, r3, #18
 8002100:	4013      	ands	r3, r2
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x53a>
 8002104:	e059      	b.n	80021ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 800210c:	4931      	ldr	r1, [pc, #196]	; (80021d4 <HAL_RCC_OscConfig+0x628>)
 800210e:	400a      	ands	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7fe ff4f 	bl	8000fb4 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe ff4a 	bl	8000fb4 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e046      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	049b      	lsls	r3, r3, #18
 8002136:	4013      	ands	r3, r2
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8002140:	4926      	ldr	r1, [pc, #152]	; (80021dc <HAL_RCC_OscConfig+0x630>)
 8002142:	400a      	ands	r2, r1
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	e038      	b.n	80021ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e033      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x618>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2203      	movs	r2, #3
 800215e:	401a      	ands	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	429a      	cmp	r2, r3
 8002166:	d126      	bne.n	80021b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2270      	movs	r2, #112	; 0x70
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d11f      	bne.n	80021b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	23fe      	movs	r3, #254	; 0xfe
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d116      	bne.n	80021b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	23f8      	movs	r3, #248	; 0xf8
 800218c:	039b      	lsls	r3, r3, #14
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d10e      	bne.n	80021b6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	23e0      	movs	r3, #224	; 0xe0
 800219c:	051b      	lsls	r3, r3, #20
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	0f5b      	lsrs	r3, r3, #29
 80021ac:	075a      	lsls	r2, r3, #29
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b008      	add	sp, #32
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
 80021cc:	00001388 	.word	0x00001388
 80021d0:	efffffff 	.word	0xefffffff
 80021d4:	feffffff 	.word	0xfeffffff
 80021d8:	11c1808c 	.word	0x11c1808c
 80021dc:	eefefffc 	.word	0xeefefffc

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0e9      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b76      	ldr	r3, [pc, #472]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2207      	movs	r2, #7
 80021fa:	4013      	ands	r3, r2
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d91e      	bls.n	8002240 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2207      	movs	r2, #7
 8002208:	4393      	bics	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002214:	f7fe fece 	bl	8000fb4 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800221c:	e009      	b.n	8002232 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221e:	f7fe fec9 	bl	8000fb4 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a6a      	ldr	r2, [pc, #424]	; (80023d4 <HAL_RCC_ClockConfig+0x1f4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0ca      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2207      	movs	r2, #7
 8002238:	4013      	ands	r3, r2
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d1ee      	bne.n	800221e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2202      	movs	r2, #2
 8002246:	4013      	ands	r3, r2
 8002248:	d015      	beq.n	8002276 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2204      	movs	r2, #4
 8002250:	4013      	ands	r3, r2
 8002252:	d006      	beq.n	8002262 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002254:	4b60      	ldr	r3, [pc, #384]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 800225a:	21e0      	movs	r1, #224	; 0xe0
 800225c:	01c9      	lsls	r1, r1, #7
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002262:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4a5d      	ldr	r2, [pc, #372]	; (80023dc <HAL_RCC_ClockConfig+0x1fc>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	4013      	ands	r3, r2
 800227e:	d057      	beq.n	8002330 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	4013      	ands	r3, r2
 8002292:	d12b      	bne.n	80022ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e097      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	049b      	lsls	r3, r3, #18
 80022a8:	4013      	ands	r3, r2
 80022aa:	d11f      	bne.n	80022ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e08b      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b8:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	d113      	bne.n	80022ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e07f      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d106      	bne.n	80022de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d0:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d108      	bne.n	80022ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e074      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022de:	4b3e      	ldr	r3, [pc, #248]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e06d      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2207      	movs	r2, #7
 80022f2:	4393      	bics	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002300:	f7fe fe58 	bl	8000fb4 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002308:	e009      	b.n	800231e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230a:	f7fe fe53 	bl	8000fb4 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <HAL_RCC_ClockConfig+0x1f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e054      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2238      	movs	r2, #56	; 0x38
 8002324:	401a      	ands	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	429a      	cmp	r2, r3
 800232e:	d1ec      	bne.n	800230a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2207      	movs	r2, #7
 8002336:	4013      	ands	r3, r2
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d21e      	bcs.n	800237c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2207      	movs	r2, #7
 8002344:	4393      	bics	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002350:	f7fe fe30 	bl	8000fb4 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002358:	e009      	b.n	800236e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235a:	f7fe fe2b 	bl	8000fb4 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_RCC_ClockConfig+0x1f4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e02c      	b.n	80023c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2207      	movs	r2, #7
 8002374:	4013      	ands	r3, r2
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2204      	movs	r2, #4
 8002382:	4013      	ands	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <HAL_RCC_ClockConfig+0x200>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800239a:	f000 f829 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 800239e:	0001      	movs	r1, r0
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCC_ClockConfig+0x1f8>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	220f      	movs	r2, #15
 80023a8:	401a      	ands	r2, r3
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x204>)
 80023ac:	0092      	lsls	r2, r2, #2
 80023ae:	58d3      	ldr	r3, [r2, r3]
 80023b0:	221f      	movs	r2, #31
 80023b2:	4013      	ands	r3, r2
 80023b4:	000a      	movs	r2, r1
 80023b6:	40da      	lsrs	r2, r3
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x208>)
 80023ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x20c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fe fd9b 	bl	8000efc <HAL_InitTick>
 80023c6:	0003      	movs	r3, r0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40022000 	.word	0x40022000
 80023d4:	00001388 	.word	0x00001388
 80023d8:	40021000 	.word	0x40021000
 80023dc:	fffff0ff 	.word	0xfffff0ff
 80023e0:	ffff8fff 	.word	0xffff8fff
 80023e4:	080055bc 	.word	0x080055bc
 80023e8:	20000008 	.word	0x20000008
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f6:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2238      	movs	r2, #56	; 0x38
 80023fc:	4013      	ands	r3, r2
 80023fe:	d10f      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002400:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0adb      	lsrs	r3, r3, #11
 8002406:	2207      	movs	r2, #7
 8002408:	4013      	ands	r3, r2
 800240a:	2201      	movs	r2, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	0013      	movs	r3, r2
 8002410:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	4835      	ldr	r0, [pc, #212]	; (80024ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002416:	f7fd fe87 	bl	8000128 <__udivsi3>
 800241a:	0003      	movs	r3, r0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e05d      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002420:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2238      	movs	r2, #56	; 0x38
 8002426:	4013      	ands	r3, r2
 8002428:	2b08      	cmp	r3, #8
 800242a:	d102      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e054      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2238      	movs	r2, #56	; 0x38
 8002438:	4013      	ands	r3, r2
 800243a:	2b10      	cmp	r3, #16
 800243c:	d138      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	2207      	movs	r2, #7
 8002450:	4013      	ands	r3, r2
 8002452:	3301      	adds	r3, #1
 8002454:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d10d      	bne.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	4824      	ldr	r0, [pc, #144]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002460:	f7fd fe62 	bl	8000128 <__udivsi3>
 8002464:	0003      	movs	r3, r0
 8002466:	0019      	movs	r1, r3
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	227f      	movs	r2, #127	; 0x7f
 8002470:	4013      	ands	r3, r2
 8002472:	434b      	muls	r3, r1
 8002474:	617b      	str	r3, [r7, #20]
        break;
 8002476:	e00d      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	481c      	ldr	r0, [pc, #112]	; (80024ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800247c:	f7fd fe54 	bl	8000128 <__udivsi3>
 8002480:	0003      	movs	r3, r0
 8002482:	0019      	movs	r1, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	227f      	movs	r2, #127	; 0x7f
 800248c:	4013      	ands	r3, r2
 800248e:	434b      	muls	r3, r1
 8002490:	617b      	str	r3, [r7, #20]
        break;
 8002492:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0f5b      	lsrs	r3, r3, #29
 800249a:	2207      	movs	r2, #7
 800249c:	4013      	ands	r3, r2
 800249e:	3301      	adds	r3, #1
 80024a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	6978      	ldr	r0, [r7, #20]
 80024a6:	f7fd fe3f 	bl	8000128 <__udivsi3>
 80024aa:	0003      	movs	r3, r0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e015      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2238      	movs	r2, #56	; 0x38
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d103      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2238      	movs	r2, #56	; 0x38
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b18      	cmp	r3, #24
 80024ce:	d103      	bne.n	80024d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024d0:	23fa      	movs	r3, #250	; 0xfa
 80024d2:	01db      	lsls	r3, r3, #7
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	e001      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024dc:	693b      	ldr	r3, [r7, #16]
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b006      	add	sp, #24
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	40021000 	.word	0x40021000
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <HAL_RCC_GetHCLKFreq+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800250c:	f7ff fff2 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002510:	0004      	movs	r4, r0
 8002512:	f7ff fb3f 	bl	8001b94 <LL_RCC_GetAPB1Prescaler>
 8002516:	0003      	movs	r3, r0
 8002518:	0b1a      	lsrs	r2, r3, #12
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	58d3      	ldr	r3, [r2, r3]
 8002520:	221f      	movs	r2, #31
 8002522:	4013      	ands	r3, r2
 8002524:	40dc      	lsrs	r4, r3
 8002526:	0023      	movs	r3, r4
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	bdb0      	pop	{r4, r5, r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	080055fc 	.word	0x080055fc

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800253c:	2313      	movs	r3, #19
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002544:	2312      	movs	r3, #18
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d100      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002558:	e0a3      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2011      	movs	r0, #17
 800255c:	183b      	adds	r3, r7, r0
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4bc3      	ldr	r3, [pc, #780]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	055b      	lsls	r3, r3, #21
 800256a:	4013      	ands	r3, r2
 800256c:	d110      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4bc0      	ldr	r3, [pc, #768]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002572:	4bbf      	ldr	r3, [pc, #764]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002574:	2180      	movs	r1, #128	; 0x80
 8002576:	0549      	lsls	r1, r1, #21
 8002578:	430a      	orrs	r2, r1
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
 800257c:	4bbc      	ldr	r3, [pc, #752]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800257e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258a:	183b      	adds	r3, r7, r0
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002590:	4bb8      	ldr	r3, [pc, #736]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4bb7      	ldr	r3, [pc, #732]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0049      	lsls	r1, r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800259e:	f7fe fd09 	bl	8000fb4 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a6:	e00b      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a8:	f7fe fd04 	bl	8000fb4 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d904      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80025b6:	2313      	movs	r3, #19
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	2203      	movs	r2, #3
 80025bc:	701a      	strb	r2, [r3, #0]
        break;
 80025be:	e005      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025c0:	4bac      	ldr	r3, [pc, #688]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	d0ed      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80025cc:	2313      	movs	r3, #19
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d154      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025d6:	4ba6      	ldr	r3, [pc, #664]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d019      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d014      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025f2:	4b9f      	ldr	r3, [pc, #636]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	4aa0      	ldr	r2, [pc, #640]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025fc:	4b9c      	ldr	r3, [pc, #624]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002600:	4b9b      	ldr	r3, [pc, #620]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	0249      	lsls	r1, r1, #9
 8002606:	430a      	orrs	r2, r1
 8002608:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800260a:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800260e:	4b98      	ldr	r3, [pc, #608]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002610:	499a      	ldr	r1, [pc, #616]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002612:	400a      	ands	r2, r1
 8002614:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002616:	4b96      	ldr	r3, [pc, #600]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2201      	movs	r2, #1
 8002620:	4013      	ands	r3, r2
 8002622:	d016      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fcc6 	bl	8000fb4 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262c:	e00c      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fcc1 	bl	8000fb4 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	4a91      	ldr	r2, [pc, #580]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d904      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800263e:	2313      	movs	r3, #19
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2203      	movs	r2, #3
 8002644:	701a      	strb	r2, [r3, #0]
            break;
 8002646:	e004      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002648:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2202      	movs	r2, #2
 800264e:	4013      	ands	r3, r2
 8002650:	d0ed      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002652:	2313      	movs	r3, #19
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265c:	4b84      	ldr	r3, [pc, #528]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	4a85      	ldr	r2, [pc, #532]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266a:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266c:	430a      	orrs	r2, r1
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002670:	e00c      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002672:	2312      	movs	r3, #18
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2213      	movs	r2, #19
 8002678:	18ba      	adds	r2, r7, r2
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e005      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	2312      	movs	r3, #18
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2213      	movs	r2, #19
 8002686:	18ba      	adds	r2, r7, r2
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800268c:	2311      	movs	r3, #17
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800269a:	4b75      	ldr	r3, [pc, #468]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269c:	4979      	ldr	r1, [pc, #484]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800269e:	400a      	ands	r2, r1
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ac:	4b70      	ldr	r3, [pc, #448]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	2203      	movs	r2, #3
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ca:	4b69      	ldr	r3, [pc, #420]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	220c      	movs	r2, #12
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2210      	movs	r2, #16
 80026e4:	4013      	ands	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e8:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	4a66      	ldr	r2, [pc, #408]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4013      	ands	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002708:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	4a5f      	ldr	r2, [pc, #380]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002718:	430a      	orrs	r2, r1
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4013      	ands	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002728:	4b51      	ldr	r3, [pc, #324]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	4a58      	ldr	r2, [pc, #352]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002738:	430a      	orrs	r2, r1
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2220      	movs	r2, #32
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002756:	430a      	orrs	r2, r1
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	01db      	lsls	r3, r3, #7
 8002762:	4013      	ands	r3, r2
 8002764:	d015      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	0899      	lsrs	r1, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002774:	430a      	orrs	r2, r1
 8002776:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	05db      	lsls	r3, r3, #23
 8002780:	429a      	cmp	r2, r3
 8002782:	d106      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	0249      	lsls	r1, r1, #9
 800278e:	430a      	orrs	r2, r1
 8002790:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	031b      	lsls	r3, r3, #12
 800279a:	4013      	ands	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	4393      	bics	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ac:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ae:	430a      	orrs	r2, r1
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	039b      	lsls	r3, r3, #14
 80027ba:	4013      	ands	r3, r2
 80027bc:	d016      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	4a35      	ldr	r2, [pc, #212]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	03db      	lsls	r3, r3, #15
 80027da:	429a      	cmp	r2, r3
 80027dc:	d106      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	0449      	lsls	r1, r1, #17
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	03db      	lsls	r3, r3, #15
 80027f4:	4013      	ands	r3, r2
 80027f6:	d016      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	4a27      	ldr	r2, [pc, #156]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002808:	430a      	orrs	r2, r1
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	045b      	lsls	r3, r3, #17
 8002814:	429a      	cmp	r2, r3
 8002816:	d106      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0449      	lsls	r1, r1, #17
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4013      	ands	r3, r2
 8002830:	d016      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002842:	430a      	orrs	r2, r1
 8002844:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	01db      	lsls	r3, r3, #7
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0249      	lsls	r1, r1, #9
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002860:	2312      	movs	r3, #18
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b006      	add	sp, #24
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	fffffcff 	.word	0xfffffcff
 800287c:	fffeffff 	.word	0xfffeffff
 8002880:	00001388 	.word	0x00001388
 8002884:	efffffff 	.word	0xefffffff
 8002888:	fffff3ff 	.word	0xfffff3ff
 800288c:	fff3ffff 	.word	0xfff3ffff
 8002890:	ffcfffff 	.word	0xffcfffff
 8002894:	ffffcfff 	.word	0xffffcfff
 8002898:	ffbfffff 	.word	0xffbfffff
 800289c:	feffffff 	.word	0xfeffffff
 80028a0:	ffff3fff 	.word	0xffff3fff

080028a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028ac:	230f      	movs	r3, #15
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d100      	bne.n	80028bc <HAL_RTC_Init+0x18>
 80028ba:	e08c      	b.n	80029d6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2229      	movs	r2, #41	; 0x29
 80028c0:	5c9b      	ldrb	r3, [r3, r2]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2228      	movs	r2, #40	; 0x28
 80028cc:	2100      	movs	r1, #0
 80028ce:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2288      	movs	r2, #136	; 0x88
 80028d4:	0212      	lsls	r2, r2, #8
 80028d6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f7fe f93c 	bl	8000b58 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2229      	movs	r2, #41	; 0x29
 80028e4:	2102      	movs	r1, #2
 80028e6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2210      	movs	r2, #16
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d062      	beq.n	80029bc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	22ca      	movs	r2, #202	; 0xca
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2253      	movs	r2, #83	; 0x53
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002906:	250f      	movs	r5, #15
 8002908:	197c      	adds	r4, r7, r5
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f892 	bl	8002a36 <RTC_EnterInitMode>
 8002912:	0003      	movs	r3, r0
 8002914:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002916:	0028      	movs	r0, r5
 8002918:	183b      	adds	r3, r7, r0
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d12c      	bne.n	800297a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	492e      	ldr	r1, [pc, #184]	; (80029e4 <HAL_RTC_Init+0x140>)
 800292c:	400a      	ands	r2, r1
 800292e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6999      	ldr	r1, [r3, #24]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6912      	ldr	r2, [r2, #16]
 8002956:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6919      	ldr	r1, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	041a      	lsls	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800296c:	183c      	adds	r4, r7, r0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f8a3 	bl	8002abc <RTC_ExitInitMode>
 8002976:	0003      	movs	r3, r0
 8002978:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800297a:	230f      	movs	r3, #15
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	00d2      	lsls	r2, r2, #3
 8002990:	08d2      	lsrs	r2, r2, #3
 8002992:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6999      	ldr	r1, [r3, #24]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
 80029ba:	e003      	b.n	80029c4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80029bc:	230f      	movs	r3, #15
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80029c4:	230f      	movs	r3, #15
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2229      	movs	r2, #41	; 0x29
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80029d6:	230f      	movs	r3, #15
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b004      	add	sp, #16
 80029e2:	bdb0      	pop	{r4, r5, r7, pc}
 80029e4:	fb8fffbf 	.word	0xfb8fffbf

080029e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	21a0      	movs	r1, #160	; 0xa0
 80029fc:	438a      	bics	r2, r1
 80029fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002a00:	f7fe fad8 	bl	8000fb4 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002a08:	e00a      	b.n	8002a20 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a0a:	f7fe fad3 	bl	8000fb4 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad2      	subs	r2, r2, r3
 8002a14:	23fa      	movs	r3, #250	; 0xfa
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d901      	bls.n	8002a20 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e006      	b.n	8002a2e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d0ee      	beq.n	8002a0a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b004      	add	sp, #16
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002a3e:	230f      	movs	r3, #15
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d12c      	bne.n	8002aac <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a62:	f7fe faa7 	bl	8000fb4 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a6a:	e014      	b.n	8002a96 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a6c:	f7fe faa2 	bl	8000fb4 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	200f      	movs	r0, #15
 8002a78:	183b      	adds	r3, r7, r0
 8002a7a:	1839      	adds	r1, r7, r0
 8002a7c:	7809      	ldrb	r1, [r1, #0]
 8002a7e:	7019      	strb	r1, [r3, #0]
 8002a80:	23fa      	movs	r3, #250	; 0xfa
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d906      	bls.n	8002a96 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2229      	movs	r2, #41	; 0x29
 8002a92:	2103      	movs	r1, #3
 8002a94:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d104      	bne.n	8002aac <RTC_EnterInitMode+0x76>
 8002aa2:	230f      	movs	r3, #15
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d1df      	bne.n	8002a6c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002aac:	230f      	movs	r3, #15
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b004      	add	sp, #16
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac4:	240f      	movs	r4, #15
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <RTC_ExitInitMode+0x84>)
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <RTC_ExitInitMode+0x84>)
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <RTC_ExitInitMode+0x84>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2220      	movs	r2, #32
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d10d      	bne.n	8002afe <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff ff7f 	bl	80029e8 <HAL_RTC_WaitForSynchro>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d021      	beq.n	8002b32 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2229      	movs	r2, #41	; 0x29
 8002af2:	2103      	movs	r1, #3
 8002af4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	2203      	movs	r2, #3
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e019      	b.n	8002b32 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <RTC_ExitInitMode+0x84>)
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <RTC_ExitInitMode+0x84>)
 8002b04:	2120      	movs	r1, #32
 8002b06:	438a      	bics	r2, r1
 8002b08:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff ff6b 	bl	80029e8 <HAL_RTC_WaitForSynchro>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d007      	beq.n	8002b26 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2229      	movs	r2, #41	; 0x29
 8002b1a:	2103      	movs	r1, #3
 8002b1c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002b1e:	230f      	movs	r3, #15
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2203      	movs	r2, #3
 8002b24:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <RTC_ExitInitMode+0x84>)
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <RTC_ExitInitMode+0x84>)
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002b32:	230f      	movs	r3, #15
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	781b      	ldrb	r3, [r3, #0]
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b005      	add	sp, #20
 8002b3e:	bd90      	pop	{r4, r7, pc}
 8002b40:	40002800 	.word	0x40002800

08002b44 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2228      	movs	r2, #40	; 0x28
 8002b54:	5c9b      	ldrb	r3, [r3, r2]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e082      	b.n	8002c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2228      	movs	r2, #40	; 0x28
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2229      	movs	r2, #41	; 0x29
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	22ca      	movs	r2, #202	; 0xca
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2253      	movs	r2, #83	; 0x53
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4938      	ldr	r1, [pc, #224]	; (8002c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2104      	movs	r1, #4
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2240      	movs	r2, #64	; 0x40
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d121      	bne.n	8002bec <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fa04 	bl	8000fb4 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002bb0:	e016      	b.n	8002be0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bb2:	f7fe f9ff 	bl	8000fb4 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad2      	subs	r2, r2, r3
 8002bbc:	23fa      	movs	r3, #250	; 0xfa
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d90d      	bls.n	8002be0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	22ff      	movs	r2, #255	; 0xff
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2229      	movs	r2, #41	; 0x29
 8002bd0:	2103      	movs	r1, #3
 8002bd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2228      	movs	r2, #40	; 0x28
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e041      	b.n	8002c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2204      	movs	r2, #4
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0e2      	beq.n	8002bb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2107      	movs	r1, #7
 8002c00:	438a      	bics	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6999      	ldr	r1, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	58d3      	ldr	r3, [r2, r3]
 8002c1a:	4916      	ldr	r1, [pc, #88]	; (8002c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0312      	lsls	r2, r2, #12
 8002c20:	4313      	orrs	r3, r2
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	01c9      	lsls	r1, r1, #7
 8002c34:	430a      	orrs	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	00c9      	lsls	r1, r1, #3
 8002c46:	430a      	orrs	r2, r1
 8002c48:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2229      	movs	r2, #41	; 0x29
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2228      	movs	r2, #40	; 0x28
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	fffffbff 	.word	0xfffffbff
 8002c70:	40002800 	.word	0x40002800
 8002c74:	40021800 	.word	0x40021800

08002c78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	2204      	movs	r2, #4
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2104      	movs	r1, #4
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 f808 	bl	8002cb4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2229      	movs	r2, #41	; 0x29
 8002ca8:	2101      	movs	r1, #1
 8002caa:	5499      	strb	r1, [r3, r2]
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e04a      	b.n	8002d6c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223d      	movs	r2, #61	; 0x3d
 8002cda:	5c9b      	ldrb	r3, [r3, r2]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d107      	bne.n	8002cf2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	223c      	movs	r2, #60	; 0x3c
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7fd ff79 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	223d      	movs	r2, #61	; 0x3d
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	0019      	movs	r1, r3
 8002d04:	0010      	movs	r0, r2
 8002d06:	f000 fa11 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2248      	movs	r2, #72	; 0x48
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	223e      	movs	r2, #62	; 0x3e
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	223f      	movs	r2, #63	; 0x3f
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2241      	movs	r2, #65	; 0x41
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2242      	movs	r2, #66	; 0x42
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2243      	movs	r2, #67	; 0x43
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2244      	movs	r2, #68	; 0x44
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2245      	movs	r2, #69	; 0x45
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2246      	movs	r2, #70	; 0x46
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2247      	movs	r2, #71	; 0x47
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	223d      	movs	r2, #61	; 0x3d
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223d      	movs	r2, #61	; 0x3d
 8002d80:	5c9b      	ldrb	r3, [r3, r2]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d001      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e042      	b.n	8002e12 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	223d      	movs	r2, #61	; 0x3d
 8002d90:	2102      	movs	r1, #2
 8002d92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2101      	movs	r1, #1
 8002da0:	430a      	orrs	r2, r1
 8002da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_TIM_Base_Start_IT+0xa8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00f      	beq.n	8002dce <HAL_TIM_Base_Start_IT+0x5a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d009      	beq.n	8002dce <HAL_TIM_Base_Start_IT+0x5a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <HAL_TIM_Base_Start_IT+0xac>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_TIM_Base_Start_IT+0x5a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d116      	bne.n	8002dfc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d016      	beq.n	8002e0e <HAL_TIM_Base_Start_IT+0x9a>
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d011      	beq.n	8002e0e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	e008      	b.n	8002e0e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2101      	movs	r1, #1
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e000      	b.n	8002e10 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	00010007 	.word	0x00010007

08002e2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2101      	movs	r1, #1
 8002e40:	438a      	bics	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_TIM_Base_Stop_IT+0x54>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d10d      	bne.n	8002e6c <HAL_TIM_Base_Stop_IT+0x40>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <HAL_TIM_Base_Stop_IT+0x58>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d107      	bne.n	8002e6c <HAL_TIM_Base_Stop_IT+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	223d      	movs	r2, #61	; 0x3d
 8002e70:	2101      	movs	r1, #1
 8002e72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	00001111 	.word	0x00001111
 8002e84:	00000444 	.word	0x00000444

08002e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d124      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d11d      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	4252      	negs	r2, r2
 8002eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 f916 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e007      	b.n	8002ee2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f909 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f915 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d125      	bne.n	8002f42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11e      	bne.n	8002f42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2205      	movs	r2, #5
 8002f0a:	4252      	negs	r2, r2
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	23c0      	movs	r3, #192	; 0xc0
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f8e9 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002f2a:	e007      	b.n	8002f3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 f8dc 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f8e8 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d124      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2208      	movs	r2, #8
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d11d      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2209      	movs	r2, #9
 8002f64:	4252      	negs	r2, r2
 8002f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2203      	movs	r2, #3
 8002f76:	4013      	ands	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f8bd 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002f82:	e007      	b.n	8002f94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f8b0 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f8bc 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d125      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2210      	movs	r2, #16
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d11e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2211      	movs	r2, #17
 8002fbc:	4252      	negs	r2, r2
 8002fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	23c0      	movs	r3, #192	; 0xc0
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f890 	bl	80030fc <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e007      	b.n	8002fee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 f883 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 f88f 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10f      	bne.n	8003022 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	2b01      	cmp	r3, #1
 800300e:	d108      	bne.n	8003022 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2202      	movs	r2, #2
 8003016:	4252      	negs	r2, r2
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0018      	movs	r0, r3
 800301e:	f7fd fd57 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	4013      	ands	r3, r2
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	d10f      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	4013      	ands	r3, r2
 800303a:	2b80      	cmp	r3, #128	; 0x80
 800303c:	d108      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2281      	movs	r2, #129	; 0x81
 8003044:	4252      	negs	r2, r2
 8003046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f8f6 	bl	800323c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	401a      	ands	r2, r3
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	429a      	cmp	r2, r3
 8003062:	d10e      	bne.n	8003082 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	4013      	ands	r3, r2
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d107      	bne.n	8003082 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <HAL_TIM_IRQHandler+0x260>)
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f8e5 	bl	800324c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2240      	movs	r2, #64	; 0x40
 800308a:	4013      	ands	r3, r2
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d10f      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	4013      	ands	r3, r2
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d108      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2241      	movs	r2, #65	; 0x41
 80030a4:	4252      	negs	r2, r2
 80030a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f836 	bl	800311c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2220      	movs	r2, #32
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d10f      	bne.n	80030de <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d108      	bne.n	80030de <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	4252      	negs	r2, r2
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 f8a7 	bl	800322c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	fffffeff 	.word	0xfffffeff

080030ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a34      	ldr	r2, [pc, #208]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d008      	beq.n	8003156 <TIM_Base_SetConfig+0x2a>
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	05db      	lsls	r3, r3, #23
 800314a:	429a      	cmp	r2, r3
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0x2a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a30      	ldr	r2, [pc, #192]	; (8003214 <TIM_Base_SetConfig+0xe8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2270      	movs	r2, #112	; 0x70
 800315a:	4393      	bics	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a29      	ldr	r2, [pc, #164]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d018      	beq.n	80031a2 <TIM_Base_SetConfig+0x76>
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	05db      	lsls	r3, r3, #23
 8003176:	429a      	cmp	r2, r3
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0x76>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a25      	ldr	r2, [pc, #148]	; (8003214 <TIM_Base_SetConfig+0xe8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0x76>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <TIM_Base_SetConfig+0xec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x76>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a23      	ldr	r2, [pc, #140]	; (800321c <TIM_Base_SetConfig+0xf0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x76>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a22      	ldr	r2, [pc, #136]	; (8003220 <TIM_Base_SetConfig+0xf4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x76>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <TIM_Base_SetConfig+0xf8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a20      	ldr	r2, [pc, #128]	; (8003228 <TIM_Base_SetConfig+0xfc>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	4393      	bics	r3, r2
 80031ba:	001a      	movs	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0xce>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <TIM_Base_SetConfig+0xf0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0xce>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <TIM_Base_SetConfig+0xf4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0xce>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <TIM_Base_SetConfig+0xf8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d103      	bne.n	8003202 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	615a      	str	r2, [r3, #20]
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b004      	add	sp, #16
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40000400 	.word	0x40000400
 8003218:	40002000 	.word	0x40002000
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800
 8003228:	fffffcff 	.word	0xfffffcff

0800322c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b002      	add	sp, #8
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e046      	b.n	80032fc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2288      	movs	r2, #136	; 0x88
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2284      	movs	r2, #132	; 0x84
 800327c:	2100      	movs	r1, #0
 800327e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f7fd fcd6 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2288      	movs	r2, #136	; 0x88
 800328c:	2124      	movs	r1, #36	; 0x24
 800328e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	438a      	bics	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 fc12 	bl	8003acc <UART_SetConfig>
 80032a8:	0003      	movs	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e024      	b.n	80032fc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 fec3 	bl	8004048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	490d      	ldr	r1, [pc, #52]	; (8003304 <HAL_UART_Init+0xa8>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	212a      	movs	r1, #42	; 0x2a
 80032de:	438a      	bics	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 ff5b 	bl	80041b0 <UART_CheckIdleState>
 80032fa:	0003      	movs	r3, r0
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	ffffb7ff 	.word	0xffffb7ff

08003308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2288      	movs	r2, #136	; 0x88
 800331c:	589b      	ldr	r3, [r3, r2]
 800331e:	2b20      	cmp	r3, #32
 8003320:	d000      	beq.n	8003324 <HAL_UART_Transmit+0x1c>
 8003322:	e088      	b.n	8003436 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_UART_Transmit+0x2a>
 800332a:	1dbb      	adds	r3, r7, #6
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e080      	b.n	8003438 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	015b      	lsls	r3, r3, #5
 800333e:	429a      	cmp	r2, r3
 8003340:	d109      	bne.n	8003356 <HAL_UART_Transmit+0x4e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d105      	bne.n	8003356 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	d001      	beq.n	8003356 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e070      	b.n	8003438 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2290      	movs	r2, #144	; 0x90
 800335a:	2100      	movs	r1, #0
 800335c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2288      	movs	r2, #136	; 0x88
 8003362:	2121      	movs	r1, #33	; 0x21
 8003364:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003366:	f7fd fe25 	bl	8000fb4 <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1dba      	adds	r2, r7, #6
 8003372:	2154      	movs	r1, #84	; 0x54
 8003374:	8812      	ldrh	r2, [r2, #0]
 8003376:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1dba      	adds	r2, r7, #6
 800337c:	2156      	movs	r1, #86	; 0x56
 800337e:	8812      	ldrh	r2, [r2, #0]
 8003380:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	015b      	lsls	r3, r3, #5
 800338a:	429a      	cmp	r2, r3
 800338c:	d108      	bne.n	80033a0 <HAL_UART_Transmit+0x98>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e003      	b.n	80033a8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a8:	e02c      	b.n	8003404 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	0013      	movs	r3, r2
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	f000 ff48 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d001      	beq.n	80033c4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e039      	b.n	8003438 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	001a      	movs	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	05d2      	lsls	r2, r2, #23
 80033d6:	0dd2      	lsrs	r2, r2, #23
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	3302      	adds	r3, #2
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e007      	b.n	80033f2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	3301      	adds	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2256      	movs	r2, #86	; 0x56
 80033f6:	5a9b      	ldrh	r3, [r3, r2]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b299      	uxth	r1, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2256      	movs	r2, #86	; 0x56
 8003402:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2256      	movs	r2, #86	; 0x56
 8003408:	5a9b      	ldrh	r3, [r3, r2]
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1cc      	bne.n	80033aa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	0013      	movs	r3, r2
 800341a:	2200      	movs	r2, #0
 800341c:	2140      	movs	r1, #64	; 0x40
 800341e:	f000 ff15 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d001      	beq.n	800342a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e006      	b.n	8003438 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2288      	movs	r2, #136	; 0x88
 800342e:	2120      	movs	r1, #32
 8003430:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e000      	b.n	8003438 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
  }
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b008      	add	sp, #32
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b0aa      	sub	sp, #168	; 0xa8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	22a4      	movs	r2, #164	; 0xa4
 8003450:	18b9      	adds	r1, r7, r2
 8003452:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	20a0      	movs	r0, #160	; 0xa0
 800345c:	1839      	adds	r1, r7, r0
 800345e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	249c      	movs	r4, #156	; 0x9c
 8003468:	1939      	adds	r1, r7, r4
 800346a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800346c:	0011      	movs	r1, r2
 800346e:	18bb      	adds	r3, r7, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4aa2      	ldr	r2, [pc, #648]	; (80036fc <HAL_UART_IRQHandler+0x2bc>)
 8003474:	4013      	ands	r3, r2
 8003476:	2298      	movs	r2, #152	; 0x98
 8003478:	18bd      	adds	r5, r7, r2
 800347a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800347c:	18bb      	adds	r3, r7, r2
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11a      	bne.n	80034ba <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003484:	187b      	adds	r3, r7, r1
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2220      	movs	r2, #32
 800348a:	4013      	ands	r3, r2
 800348c:	d015      	beq.n	80034ba <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800348e:	183b      	adds	r3, r7, r0
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2220      	movs	r2, #32
 8003494:	4013      	ands	r3, r2
 8003496:	d105      	bne.n	80034a4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003498:	193b      	adds	r3, r7, r4
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	055b      	lsls	r3, r3, #21
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00a      	beq.n	80034ba <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d100      	bne.n	80034ae <HAL_UART_IRQHandler+0x6e>
 80034ac:	e2dc      	b.n	8003a68 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	0010      	movs	r0, r2
 80034b6:	4798      	blx	r3
      }
      return;
 80034b8:	e2d6      	b.n	8003a68 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034ba:	2398      	movs	r3, #152	; 0x98
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d100      	bne.n	80034c6 <HAL_UART_IRQHandler+0x86>
 80034c4:	e122      	b.n	800370c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034c6:	239c      	movs	r3, #156	; 0x9c
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a8c      	ldr	r2, [pc, #560]	; (8003700 <HAL_UART_IRQHandler+0x2c0>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	d106      	bne.n	80034e0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034d2:	23a0      	movs	r3, #160	; 0xa0
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a8a      	ldr	r2, [pc, #552]	; (8003704 <HAL_UART_IRQHandler+0x2c4>)
 80034da:	4013      	ands	r3, r2
 80034dc:	d100      	bne.n	80034e0 <HAL_UART_IRQHandler+0xa0>
 80034de:	e115      	b.n	800370c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034e0:	23a4      	movs	r3, #164	; 0xa4
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2201      	movs	r2, #1
 80034e8:	4013      	ands	r3, r2
 80034ea:	d012      	beq.n	8003512 <HAL_UART_IRQHandler+0xd2>
 80034ec:	23a0      	movs	r3, #160	; 0xa0
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	d00b      	beq.n	8003512 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2290      	movs	r2, #144	; 0x90
 8003506:	589b      	ldr	r3, [r3, r2]
 8003508:	2201      	movs	r2, #1
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2190      	movs	r1, #144	; 0x90
 8003510:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003512:	23a4      	movs	r3, #164	; 0xa4
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2202      	movs	r2, #2
 800351a:	4013      	ands	r3, r2
 800351c:	d011      	beq.n	8003542 <HAL_UART_IRQHandler+0x102>
 800351e:	239c      	movs	r3, #156	; 0x9c
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	d00b      	beq.n	8003542 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2202      	movs	r2, #2
 8003530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2290      	movs	r2, #144	; 0x90
 8003536:	589b      	ldr	r3, [r3, r2]
 8003538:	2204      	movs	r2, #4
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2190      	movs	r1, #144	; 0x90
 8003540:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003542:	23a4      	movs	r3, #164	; 0xa4
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2204      	movs	r2, #4
 800354a:	4013      	ands	r3, r2
 800354c:	d011      	beq.n	8003572 <HAL_UART_IRQHandler+0x132>
 800354e:	239c      	movs	r3, #156	; 0x9c
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
 8003558:	d00b      	beq.n	8003572 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2204      	movs	r2, #4
 8003560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2290      	movs	r2, #144	; 0x90
 8003566:	589b      	ldr	r3, [r3, r2]
 8003568:	2202      	movs	r2, #2
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2190      	movs	r1, #144	; 0x90
 8003570:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003572:	23a4      	movs	r3, #164	; 0xa4
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2208      	movs	r2, #8
 800357a:	4013      	ands	r3, r2
 800357c:	d017      	beq.n	80035ae <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800357e:	23a0      	movs	r3, #160	; 0xa0
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2220      	movs	r2, #32
 8003586:	4013      	ands	r3, r2
 8003588:	d105      	bne.n	8003596 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800358a:	239c      	movs	r3, #156	; 0x9c
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5b      	ldr	r2, [pc, #364]	; (8003700 <HAL_UART_IRQHandler+0x2c0>)
 8003592:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2208      	movs	r2, #8
 800359c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2290      	movs	r2, #144	; 0x90
 80035a2:	589b      	ldr	r3, [r3, r2]
 80035a4:	2208      	movs	r2, #8
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2190      	movs	r1, #144	; 0x90
 80035ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035ae:	23a4      	movs	r3, #164	; 0xa4
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4013      	ands	r3, r2
 80035ba:	d013      	beq.n	80035e4 <HAL_UART_IRQHandler+0x1a4>
 80035bc:	23a0      	movs	r3, #160	; 0xa0
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	04db      	lsls	r3, r3, #19
 80035c6:	4013      	ands	r3, r2
 80035c8:	d00c      	beq.n	80035e4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2290      	movs	r2, #144	; 0x90
 80035d8:	589b      	ldr	r3, [r3, r2]
 80035da:	2220      	movs	r2, #32
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2190      	movs	r1, #144	; 0x90
 80035e2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2290      	movs	r2, #144	; 0x90
 80035e8:	589b      	ldr	r3, [r3, r2]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d100      	bne.n	80035f0 <HAL_UART_IRQHandler+0x1b0>
 80035ee:	e23d      	b.n	8003a6c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035f0:	23a4      	movs	r3, #164	; 0xa4
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2220      	movs	r2, #32
 80035f8:	4013      	ands	r3, r2
 80035fa:	d015      	beq.n	8003628 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035fc:	23a0      	movs	r3, #160	; 0xa0
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2220      	movs	r2, #32
 8003604:	4013      	ands	r3, r2
 8003606:	d106      	bne.n	8003616 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003608:	239c      	movs	r3, #156	; 0x9c
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	055b      	lsls	r3, r3, #21
 8003612:	4013      	ands	r3, r2
 8003614:	d008      	beq.n	8003628 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	0010      	movs	r0, r2
 8003626:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2290      	movs	r2, #144	; 0x90
 800362c:	589b      	ldr	r3, [r3, r2]
 800362e:	2194      	movs	r1, #148	; 0x94
 8003630:	187a      	adds	r2, r7, r1
 8003632:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	4013      	ands	r3, r2
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d004      	beq.n	800364c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003642:	187b      	adds	r3, r7, r1
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2228      	movs	r2, #40	; 0x28
 8003648:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800364a:	d04c      	beq.n	80036e6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 ffaa 	bl	80045a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	4013      	ands	r3, r2
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d13c      	bne.n	80036dc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003662:	f3ef 8310 	mrs	r3, PRIMASK
 8003666:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	2090      	movs	r0, #144	; 0x90
 800366c:	183a      	adds	r2, r7, r0
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	2301      	movs	r3, #1
 8003672:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	438a      	bics	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	183b      	adds	r3, r7, r0
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003694:	f383 8810 	msr	PRIMASK, r3
}
 8003698:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	589b      	ldr	r3, [r3, r2]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d016      	beq.n	80036d2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	589b      	ldr	r3, [r3, r2]
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <HAL_UART_IRQHandler+0x2c8>)
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	589b      	ldr	r3, [r3, r2]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7fd fed7 	bl	8001468 <HAL_DMA_Abort_IT>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d01c      	beq.n	80036f8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	589b      	ldr	r3, [r3, r2]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	5852      	ldr	r2, [r2, r1]
 80036cc:	0010      	movs	r0, r2
 80036ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e012      	b.n	80036f8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 f9f1 	bl	8003abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036da:	e00d      	b.n	80036f8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 f9ec 	bl	8003abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e008      	b.n	80036f8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 f9e7 	bl	8003abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2290      	movs	r2, #144	; 0x90
 80036f2:	2100      	movs	r1, #0
 80036f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80036f6:	e1b9      	b.n	8003a6c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	46c0      	nop			; (mov r8, r8)
    return;
 80036fa:	e1b7      	b.n	8003a6c <HAL_UART_IRQHandler+0x62c>
 80036fc:	0000080f 	.word	0x0000080f
 8003700:	10000001 	.word	0x10000001
 8003704:	04000120 	.word	0x04000120
 8003708:	0800486d 	.word	0x0800486d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d000      	beq.n	8003716 <HAL_UART_IRQHandler+0x2d6>
 8003714:	e13e      	b.n	8003994 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003716:	23a4      	movs	r3, #164	; 0xa4
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2210      	movs	r2, #16
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_UART_IRQHandler+0x2e4>
 8003722:	e137      	b.n	8003994 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003724:	23a0      	movs	r3, #160	; 0xa0
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	4013      	ands	r3, r2
 800372e:	d100      	bne.n	8003732 <HAL_UART_IRQHandler+0x2f2>
 8003730:	e130      	b.n	8003994 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2210      	movs	r2, #16
 8003738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	4013      	ands	r3, r2
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d000      	beq.n	800374a <HAL_UART_IRQHandler+0x30a>
 8003748:	e0a4      	b.n	8003894 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	589b      	ldr	r3, [r3, r2]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	217e      	movs	r1, #126	; 0x7e
 8003756:	187b      	adds	r3, r7, r1
 8003758:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800375a:	187b      	adds	r3, r7, r1
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d100      	bne.n	8003764 <HAL_UART_IRQHandler+0x324>
 8003762:	e185      	b.n	8003a70 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	225c      	movs	r2, #92	; 0x5c
 8003768:	5a9b      	ldrh	r3, [r3, r2]
 800376a:	187a      	adds	r2, r7, r1
 800376c:	8812      	ldrh	r2, [r2, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d300      	bcc.n	8003774 <HAL_UART_IRQHandler+0x334>
 8003772:	e17d      	b.n	8003a70 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	187a      	adds	r2, r7, r1
 8003778:	215e      	movs	r1, #94	; 0x5e
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2280      	movs	r2, #128	; 0x80
 8003782:	589b      	ldr	r3, [r3, r2]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2220      	movs	r2, #32
 800378a:	4013      	ands	r3, r2
 800378c:	d170      	bne.n	8003870 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378e:	f3ef 8310 	mrs	r3, PRIMASK
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003796:	67bb      	str	r3, [r7, #120]	; 0x78
 8003798:	2301      	movs	r3, #1
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	49b4      	ldr	r1, [pc, #720]	; (8003a80 <HAL_UART_IRQHandler+0x640>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	f383 8810 	msr	PRIMASK, r3
}
 80037be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c0:	f3ef 8310 	mrs	r3, PRIMASK
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	677b      	str	r3, [r7, #116]	; 0x74
 80037ca:	2301      	movs	r3, #1
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d0:	f383 8810 	msr	PRIMASK, r3
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2101      	movs	r1, #1
 80037e2:	438a      	bics	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ec:	f383 8810 	msr	PRIMASK, r3
}
 80037f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f2:	f3ef 8310 	mrs	r3, PRIMASK
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80037f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fa:	673b      	str	r3, [r7, #112]	; 0x70
 80037fc:	2301      	movs	r3, #1
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003802:	f383 8810 	msr	PRIMASK, r3
}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	438a      	bics	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381e:	f383 8810 	msr	PRIMASK, r3
}
 8003822:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	228c      	movs	r2, #140	; 0x8c
 8003828:	2120      	movs	r1, #32
 800382a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003832:	f3ef 8310 	mrs	r3, PRIMASK
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800383c:	2301      	movs	r3, #1
 800383e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2110      	movs	r1, #16
 8003854:	438a      	bics	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	589b      	ldr	r3, [r3, r2]
 800386a:	0018      	movs	r0, r3
 800386c:	f7fd fd9a 	bl	80013a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	225c      	movs	r2, #92	; 0x5c
 800387a:	5a9a      	ldrh	r2, [r3, r2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	215e      	movs	r1, #94	; 0x5e
 8003880:	5a5b      	ldrh	r3, [r3, r1]
 8003882:	b29b      	uxth	r3, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0011      	movs	r1, r2
 800388c:	0018      	movs	r0, r3
 800388e:	f7fd f901 	bl	8000a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003892:	e0ed      	b.n	8003a70 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	225c      	movs	r2, #92	; 0x5c
 8003898:	5a99      	ldrh	r1, [r3, r2]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	225e      	movs	r2, #94	; 0x5e
 800389e:	5a9b      	ldrh	r3, [r3, r2]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	208e      	movs	r0, #142	; 0x8e
 80038a4:	183b      	adds	r3, r7, r0
 80038a6:	1a8a      	subs	r2, r1, r2
 80038a8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	225e      	movs	r2, #94	; 0x5e
 80038ae:	5a9b      	ldrh	r3, [r3, r2]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d100      	bne.n	80038b8 <HAL_UART_IRQHandler+0x478>
 80038b6:	e0dd      	b.n	8003a74 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d100      	bne.n	80038c2 <HAL_UART_IRQHandler+0x482>
 80038c0:	e0d8      	b.n	8003a74 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c2:	f3ef 8310 	mrs	r3, PRIMASK
 80038c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038ca:	2488      	movs	r4, #136	; 0x88
 80038cc:	193a      	adds	r2, r7, r4
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	2301      	movs	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f383 8810 	msr	PRIMASK, r3
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4967      	ldr	r1, [pc, #412]	; (8003a84 <HAL_UART_IRQHandler+0x644>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003900:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003902:	2484      	movs	r4, #132	; 0x84
 8003904:	193a      	adds	r2, r7, r4
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	2301      	movs	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	495a      	ldr	r1, [pc, #360]	; (8003a88 <HAL_UART_IRQHandler+0x648>)
 8003920:	400a      	ands	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	193b      	adds	r3, r7, r4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	228c      	movs	r2, #140	; 0x8c
 8003936:	2120      	movs	r1, #32
 8003938:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394e:	2480      	movs	r4, #128	; 0x80
 8003950:	193a      	adds	r2, r7, r4
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	2301      	movs	r3, #1
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2110      	movs	r1, #16
 800396c:	438a      	bics	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	193b      	adds	r3, r7, r4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003984:	183b      	adds	r3, r7, r0
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0011      	movs	r1, r2
 800398c:	0018      	movs	r0, r3
 800398e:	f7fd f881 	bl	8000a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003992:	e06f      	b.n	8003a74 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003994:	23a4      	movs	r3, #164	; 0xa4
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	035b      	lsls	r3, r3, #13
 800399e:	4013      	ands	r3, r2
 80039a0:	d010      	beq.n	80039c4 <HAL_UART_IRQHandler+0x584>
 80039a2:	239c      	movs	r3, #156	; 0x9c
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	03db      	lsls	r3, r3, #15
 80039ac:	4013      	ands	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0352      	lsls	r2, r2, #13
 80039b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 ff98 	bl	80048f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039c2:	e05a      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80039c4:	23a4      	movs	r3, #164	; 0xa4
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	4013      	ands	r3, r2
 80039ce:	d016      	beq.n	80039fe <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80039d0:	23a0      	movs	r3, #160	; 0xa0
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	4013      	ands	r3, r2
 80039da:	d106      	bne.n	80039ea <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80039dc:	239c      	movs	r3, #156	; 0x9c
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	4013      	ands	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d042      	beq.n	8003a78 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	0010      	movs	r0, r2
 80039fa:	4798      	blx	r3
    }
    return;
 80039fc:	e03c      	b.n	8003a78 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039fe:	23a4      	movs	r3, #164	; 0xa4
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	4013      	ands	r3, r2
 8003a08:	d00a      	beq.n	8003a20 <HAL_UART_IRQHandler+0x5e0>
 8003a0a:	23a0      	movs	r3, #160	; 0xa0
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2240      	movs	r2, #64	; 0x40
 8003a12:	4013      	ands	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 ff3e 	bl	800489a <UART_EndTransmit_IT>
    return;
 8003a1e:	e02c      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003a20:	23a4      	movs	r3, #164	; 0xa4
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <HAL_UART_IRQHandler+0x606>
 8003a2e:	23a0      	movs	r3, #160	; 0xa0
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	05db      	lsls	r3, r3, #23
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 ff67 	bl	8004912 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a44:	e019      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a46:	23a4      	movs	r3, #164	; 0xa4
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	045b      	lsls	r3, r3, #17
 8003a50:	4013      	ands	r3, r2
 8003a52:	d012      	beq.n	8003a7a <HAL_UART_IRQHandler+0x63a>
 8003a54:	23a0      	movs	r3, #160	; 0xa0
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	da0d      	bge.n	8003a7a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 ff4e 	bl	8004902 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a66:	e008      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
      return;
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	e006      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
    return;
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	e004      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
      return;
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	e002      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
      return;
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	e000      	b.n	8003a7a <HAL_UART_IRQHandler+0x63a>
    return;
 8003a78:	46c0      	nop			; (mov r8, r8)
  }
}
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b02a      	add	sp, #168	; 0xa8
 8003a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a80:	fffffeff 	.word	0xfffffeff
 8003a84:	fffffedf 	.word	0xfffffedf
 8003a88:	effffffe 	.word	0xeffffffe

08003a8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b090      	sub	sp, #64	; 0x40
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad4:	231a      	movs	r3, #26
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	189b      	adds	r3, r3, r2
 8003ada:	19db      	adds	r3, r3, r7
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4aaf      	ldr	r2, [pc, #700]	; (8003dbc <UART_SetConfig+0x2f0>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4aaa      	ldr	r2, [pc, #680]	; (8003dc0 <UART_SetConfig+0x2f4>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	68d9      	ldr	r1, [r3, #12]
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	0003      	movs	r3, r0
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4aa4      	ldr	r2, [pc, #656]	; (8003dc4 <UART_SetConfig+0x2f8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a9f      	ldr	r2, [pc, #636]	; (8003dc8 <UART_SetConfig+0x2fc>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	220f      	movs	r2, #15
 8003b60:	4393      	bics	r3, r2
 8003b62:	0018      	movs	r0, r3
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a95      	ldr	r2, [pc, #596]	; (8003dcc <UART_SetConfig+0x300>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d131      	bne.n	8003be0 <UART_SetConfig+0x114>
 8003b7c:	4b94      	ldr	r3, [pc, #592]	; (8003dd0 <UART_SetConfig+0x304>)
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	2203      	movs	r2, #3
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d01d      	beq.n	8003bc4 <UART_SetConfig+0xf8>
 8003b88:	d823      	bhi.n	8003bd2 <UART_SetConfig+0x106>
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d00c      	beq.n	8003ba8 <UART_SetConfig+0xdc>
 8003b8e:	d820      	bhi.n	8003bd2 <UART_SetConfig+0x106>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <UART_SetConfig+0xce>
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d00e      	beq.n	8003bb6 <UART_SetConfig+0xea>
 8003b98:	e01b      	b.n	8003bd2 <UART_SetConfig+0x106>
 8003b9a:	231b      	movs	r3, #27
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e0b4      	b.n	8003d12 <UART_SetConfig+0x246>
 8003ba8:	231b      	movs	r3, #27
 8003baa:	2220      	movs	r2, #32
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e0ad      	b.n	8003d12 <UART_SetConfig+0x246>
 8003bb6:	231b      	movs	r3, #27
 8003bb8:	2220      	movs	r2, #32
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e0a6      	b.n	8003d12 <UART_SetConfig+0x246>
 8003bc4:	231b      	movs	r3, #27
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	2208      	movs	r2, #8
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e09f      	b.n	8003d12 <UART_SetConfig+0x246>
 8003bd2:	231b      	movs	r3, #27
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	2210      	movs	r2, #16
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e098      	b.n	8003d12 <UART_SetConfig+0x246>
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a7b      	ldr	r2, [pc, #492]	; (8003dd4 <UART_SetConfig+0x308>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d131      	bne.n	8003c4e <UART_SetConfig+0x182>
 8003bea:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <UART_SetConfig+0x304>)
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	220c      	movs	r2, #12
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	d01d      	beq.n	8003c32 <UART_SetConfig+0x166>
 8003bf6:	d823      	bhi.n	8003c40 <UART_SetConfig+0x174>
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d00c      	beq.n	8003c16 <UART_SetConfig+0x14a>
 8003bfc:	d820      	bhi.n	8003c40 <UART_SetConfig+0x174>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <UART_SetConfig+0x13c>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00e      	beq.n	8003c24 <UART_SetConfig+0x158>
 8003c06:	e01b      	b.n	8003c40 <UART_SetConfig+0x174>
 8003c08:	231b      	movs	r3, #27
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	19db      	adds	r3, r3, r7
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e07d      	b.n	8003d12 <UART_SetConfig+0x246>
 8003c16:	231b      	movs	r3, #27
 8003c18:	2220      	movs	r2, #32
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	19db      	adds	r3, r3, r7
 8003c1e:	2202      	movs	r2, #2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e076      	b.n	8003d12 <UART_SetConfig+0x246>
 8003c24:	231b      	movs	r3, #27
 8003c26:	2220      	movs	r2, #32
 8003c28:	189b      	adds	r3, r3, r2
 8003c2a:	19db      	adds	r3, r3, r7
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e06f      	b.n	8003d12 <UART_SetConfig+0x246>
 8003c32:	231b      	movs	r3, #27
 8003c34:	2220      	movs	r2, #32
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	19db      	adds	r3, r3, r7
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e068      	b.n	8003d12 <UART_SetConfig+0x246>
 8003c40:	231b      	movs	r3, #27
 8003c42:	2220      	movs	r2, #32
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2210      	movs	r2, #16
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e061      	b.n	8003d12 <UART_SetConfig+0x246>
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a61      	ldr	r2, [pc, #388]	; (8003dd8 <UART_SetConfig+0x30c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d106      	bne.n	8003c66 <UART_SetConfig+0x19a>
 8003c58:	231b      	movs	r3, #27
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e055      	b.n	8003d12 <UART_SetConfig+0x246>
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	; (8003ddc <UART_SetConfig+0x310>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d106      	bne.n	8003c7e <UART_SetConfig+0x1b2>
 8003c70:	231b      	movs	r3, #27
 8003c72:	2220      	movs	r2, #32
 8003c74:	189b      	adds	r3, r3, r2
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e049      	b.n	8003d12 <UART_SetConfig+0x246>
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a50      	ldr	r2, [pc, #320]	; (8003dc4 <UART_SetConfig+0x2f8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d13e      	bne.n	8003d06 <UART_SetConfig+0x23a>
 8003c88:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <UART_SetConfig+0x304>)
 8003c8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c8c:	23c0      	movs	r3, #192	; 0xc0
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4013      	ands	r3, r2
 8003c92:	22c0      	movs	r2, #192	; 0xc0
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d027      	beq.n	8003cea <UART_SetConfig+0x21e>
 8003c9a:	22c0      	movs	r2, #192	; 0xc0
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d82a      	bhi.n	8003cf8 <UART_SetConfig+0x22c>
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d011      	beq.n	8003cce <UART_SetConfig+0x202>
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d822      	bhi.n	8003cf8 <UART_SetConfig+0x22c>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <UART_SetConfig+0x1f4>
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	00d2      	lsls	r2, r2, #3
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <UART_SetConfig+0x210>
 8003cbe:	e01b      	b.n	8003cf8 <UART_SetConfig+0x22c>
 8003cc0:	231b      	movs	r3, #27
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e021      	b.n	8003d12 <UART_SetConfig+0x246>
 8003cce:	231b      	movs	r3, #27
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e01a      	b.n	8003d12 <UART_SetConfig+0x246>
 8003cdc:	231b      	movs	r3, #27
 8003cde:	2220      	movs	r2, #32
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	19db      	adds	r3, r3, r7
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e013      	b.n	8003d12 <UART_SetConfig+0x246>
 8003cea:	231b      	movs	r3, #27
 8003cec:	2220      	movs	r2, #32
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	19db      	adds	r3, r3, r7
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e00c      	b.n	8003d12 <UART_SetConfig+0x246>
 8003cf8:	231b      	movs	r3, #27
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	19db      	adds	r3, r3, r7
 8003d00:	2210      	movs	r2, #16
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e005      	b.n	8003d12 <UART_SetConfig+0x246>
 8003d06:	231b      	movs	r3, #27
 8003d08:	2220      	movs	r2, #32
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	19db      	adds	r3, r3, r7
 8003d0e:	2210      	movs	r2, #16
 8003d10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2b      	ldr	r2, [pc, #172]	; (8003dc4 <UART_SetConfig+0x2f8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d000      	beq.n	8003d1e <UART_SetConfig+0x252>
 8003d1c:	e0a9      	b.n	8003e72 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d1e:	231b      	movs	r3, #27
 8003d20:	2220      	movs	r2, #32
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	19db      	adds	r3, r3, r7
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d015      	beq.n	8003d58 <UART_SetConfig+0x28c>
 8003d2c:	dc18      	bgt.n	8003d60 <UART_SetConfig+0x294>
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00d      	beq.n	8003d4e <UART_SetConfig+0x282>
 8003d32:	dc15      	bgt.n	8003d60 <UART_SetConfig+0x294>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <UART_SetConfig+0x272>
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d005      	beq.n	8003d48 <UART_SetConfig+0x27c>
 8003d3c:	e010      	b.n	8003d60 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d3e:	f7fe fbe3 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003d42:	0003      	movs	r3, r0
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d46:	e014      	b.n	8003d72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <UART_SetConfig+0x314>)
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d4c:	e011      	b.n	8003d72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4e:	f7fe fb4f 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003d52:	0003      	movs	r3, r0
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d56:	e00c      	b.n	8003d72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d5e:	e008      	b.n	8003d72 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003d64:	231a      	movs	r3, #26
 8003d66:	2220      	movs	r2, #32
 8003d68:	189b      	adds	r3, r3, r2
 8003d6a:	19db      	adds	r3, r3, r7
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
        break;
 8003d70:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d100      	bne.n	8003d7a <UART_SetConfig+0x2ae>
 8003d78:	e14b      	b.n	8004012 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <UART_SetConfig+0x318>)
 8003d80:	0052      	lsls	r2, r2, #1
 8003d82:	5ad3      	ldrh	r3, [r2, r3]
 8003d84:	0019      	movs	r1, r3
 8003d86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d88:	f7fc f9ce 	bl	8000128 <__udivsi3>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	0013      	movs	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	189b      	adds	r3, r3, r2
 8003d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d305      	bcc.n	8003dac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d91d      	bls.n	8003de8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003dac:	231a      	movs	r3, #26
 8003dae:	2220      	movs	r2, #32
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	19db      	adds	r3, r3, r7
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e12b      	b.n	8004012 <UART_SetConfig+0x546>
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	cfff69f3 	.word	0xcfff69f3
 8003dc0:	ffffcfff 	.word	0xffffcfff
 8003dc4:	40008000 	.word	0x40008000
 8003dc8:	11fff4ff 	.word	0x11fff4ff
 8003dcc:	40013800 	.word	0x40013800
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40004400 	.word	0x40004400
 8003dd8:	40004800 	.word	0x40004800
 8003ddc:	40004c00 	.word	0x40004c00
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	0800561c 	.word	0x0800561c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003df4:	4b92      	ldr	r3, [pc, #584]	; (8004040 <UART_SetConfig+0x574>)
 8003df6:	0052      	lsls	r2, r2, #1
 8003df8:	5ad3      	ldrh	r3, [r2, r3]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	69b8      	ldr	r0, [r7, #24]
 8003e06:	69f9      	ldr	r1, [r7, #28]
 8003e08:	f7fc fb04 	bl	8000414 <__aeabi_uldivmod>
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	000b      	movs	r3, r1
 8003e10:	0e11      	lsrs	r1, r2, #24
 8003e12:	021d      	lsls	r5, r3, #8
 8003e14:	430d      	orrs	r5, r1
 8003e16:	0214      	lsls	r4, r2, #8
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68b8      	ldr	r0, [r7, #8]
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	1900      	adds	r0, r0, r4
 8003e2a:	4169      	adcs	r1, r5
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f7fc faeb 	bl	8000414 <__aeabi_uldivmod>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	000b      	movs	r3, r1
 8003e42:	0013      	movs	r3, r2
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e48:	23c0      	movs	r3, #192	; 0xc0
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d309      	bcc.n	8003e64 <UART_SetConfig+0x398>
 8003e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	035b      	lsls	r3, r3, #13
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d204      	bcs.n	8003e64 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	e0d6      	b.n	8004012 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003e64:	231a      	movs	r3, #26
 8003e66:	2220      	movs	r2, #32
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	19db      	adds	r3, r3, r7
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e0cf      	b.n	8004012 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d000      	beq.n	8003e80 <UART_SetConfig+0x3b4>
 8003e7e:	e070      	b.n	8003f62 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003e80:	231b      	movs	r3, #27
 8003e82:	2220      	movs	r2, #32
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	19db      	adds	r3, r3, r7
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d015      	beq.n	8003eba <UART_SetConfig+0x3ee>
 8003e8e:	dc18      	bgt.n	8003ec2 <UART_SetConfig+0x3f6>
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d00d      	beq.n	8003eb0 <UART_SetConfig+0x3e4>
 8003e94:	dc15      	bgt.n	8003ec2 <UART_SetConfig+0x3f6>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <UART_SetConfig+0x3d4>
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d005      	beq.n	8003eaa <UART_SetConfig+0x3de>
 8003e9e:	e010      	b.n	8003ec2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f7fe fb32 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ea8:	e014      	b.n	8003ed4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eaa:	4b66      	ldr	r3, [pc, #408]	; (8004044 <UART_SetConfig+0x578>)
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eae:	e011      	b.n	8003ed4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb0:	f7fe fa9e 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eb8:	e00c      	b.n	8003ed4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ec0:	e008      	b.n	8003ed4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ec6:	231a      	movs	r3, #26
 8003ec8:	2220      	movs	r2, #32
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
        break;
 8003ed2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d100      	bne.n	8003edc <UART_SetConfig+0x410>
 8003eda:	e09a      	b.n	8004012 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee0:	4b57      	ldr	r3, [pc, #348]	; (8004040 <UART_SetConfig+0x574>)
 8003ee2:	0052      	lsls	r2, r2, #1
 8003ee4:	5ad3      	ldrh	r3, [r2, r3]
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003eea:	f7fc f91d 	bl	8000128 <__udivsi3>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	005a      	lsls	r2, r3, #1
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	18d2      	adds	r2, r2, r3
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	0019      	movs	r1, r3
 8003f00:	0010      	movs	r0, r2
 8003f02:	f7fc f911 	bl	8000128 <__udivsi3>
 8003f06:	0003      	movs	r3, r0
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2b0f      	cmp	r3, #15
 8003f0e:	d921      	bls.n	8003f54 <UART_SetConfig+0x488>
 8003f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	025b      	lsls	r3, r3, #9
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d21c      	bcs.n	8003f54 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	200e      	movs	r0, #14
 8003f20:	2420      	movs	r4, #32
 8003f22:	1903      	adds	r3, r0, r4
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	210f      	movs	r1, #15
 8003f28:	438a      	bics	r2, r1
 8003f2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2207      	movs	r2, #7
 8003f34:	4013      	ands	r3, r2
 8003f36:	b299      	uxth	r1, r3
 8003f38:	1903      	adds	r3, r0, r4
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	1902      	adds	r2, r0, r4
 8003f3e:	19d2      	adds	r2, r2, r7
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1902      	adds	r2, r0, r4
 8003f4c:	19d2      	adds	r2, r2, r7
 8003f4e:	8812      	ldrh	r2, [r2, #0]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	e05e      	b.n	8004012 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003f54:	231a      	movs	r3, #26
 8003f56:	2220      	movs	r2, #32
 8003f58:	189b      	adds	r3, r3, r2
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e057      	b.n	8004012 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f62:	231b      	movs	r3, #27
 8003f64:	2220      	movs	r2, #32
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	19db      	adds	r3, r3, r7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d015      	beq.n	8003f9c <UART_SetConfig+0x4d0>
 8003f70:	dc18      	bgt.n	8003fa4 <UART_SetConfig+0x4d8>
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d00d      	beq.n	8003f92 <UART_SetConfig+0x4c6>
 8003f76:	dc15      	bgt.n	8003fa4 <UART_SetConfig+0x4d8>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <UART_SetConfig+0x4b6>
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d005      	beq.n	8003f8c <UART_SetConfig+0x4c0>
 8003f80:	e010      	b.n	8003fa4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f82:	f7fe fac1 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003f86:	0003      	movs	r3, r0
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f8a:	e014      	b.n	8003fb6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <UART_SetConfig+0x578>)
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f90:	e011      	b.n	8003fb6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f92:	f7fe fa2d 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003f96:	0003      	movs	r3, r0
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f9a:	e00c      	b.n	8003fb6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fa2:	e008      	b.n	8003fb6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003fa8:	231a      	movs	r3, #26
 8003faa:	2220      	movs	r2, #32
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	19db      	adds	r3, r3, r7
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
        break;
 8003fb4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02a      	beq.n	8004012 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <UART_SetConfig+0x574>)
 8003fc2:	0052      	lsls	r2, r2, #1
 8003fc4:	5ad3      	ldrh	r3, [r2, r3]
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fca:	f7fc f8ad 	bl	8000128 <__udivsi3>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	18d2      	adds	r2, r2, r3
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	0019      	movs	r1, r3
 8003fe0:	0010      	movs	r0, r2
 8003fe2:	f7fc f8a1 	bl	8000128 <__udivsi3>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d90a      	bls.n	8004006 <UART_SetConfig+0x53a>
 8003ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	025b      	lsls	r3, r3, #9
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d205      	bcs.n	8004006 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	e005      	b.n	8004012 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004006:	231a      	movs	r3, #26
 8004008:	2220      	movs	r2, #32
 800400a:	189b      	adds	r3, r3, r2
 800400c:	19db      	adds	r3, r3, r7
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	226a      	movs	r2, #106	; 0x6a
 8004016:	2101      	movs	r1, #1
 8004018:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	2268      	movs	r2, #104	; 0x68
 800401e:	2101      	movs	r1, #1
 8004020:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2200      	movs	r2, #0
 8004026:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	2200      	movs	r2, #0
 800402c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800402e:	231a      	movs	r3, #26
 8004030:	2220      	movs	r2, #32
 8004032:	189b      	adds	r3, r3, r2
 8004034:	19db      	adds	r3, r3, r7
 8004036:	781b      	ldrb	r3, [r3, #0]
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b010      	add	sp, #64	; 0x40
 800403e:	bdb0      	pop	{r4, r5, r7, pc}
 8004040:	0800561c 	.word	0x0800561c
 8004044:	00f42400 	.word	0x00f42400

08004048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	2201      	movs	r2, #1
 8004056:	4013      	ands	r3, r2
 8004058:	d00b      	beq.n	8004072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a4a      	ldr	r2, [pc, #296]	; (800418c <UART_AdvFeatureConfig+0x144>)
 8004062:	4013      	ands	r3, r2
 8004064:	0019      	movs	r1, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	2202      	movs	r2, #2
 8004078:	4013      	ands	r3, r2
 800407a:	d00b      	beq.n	8004094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a43      	ldr	r2, [pc, #268]	; (8004190 <UART_AdvFeatureConfig+0x148>)
 8004084:	4013      	ands	r3, r2
 8004086:	0019      	movs	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	2204      	movs	r2, #4
 800409a:	4013      	ands	r3, r2
 800409c:	d00b      	beq.n	80040b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a3b      	ldr	r2, [pc, #236]	; (8004194 <UART_AdvFeatureConfig+0x14c>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	2208      	movs	r2, #8
 80040bc:	4013      	ands	r3, r2
 80040be:	d00b      	beq.n	80040d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a34      	ldr	r2, [pc, #208]	; (8004198 <UART_AdvFeatureConfig+0x150>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	0019      	movs	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	2210      	movs	r2, #16
 80040de:	4013      	ands	r3, r2
 80040e0:	d00b      	beq.n	80040fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a2c      	ldr	r2, [pc, #176]	; (800419c <UART_AdvFeatureConfig+0x154>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	2220      	movs	r2, #32
 8004100:	4013      	ands	r3, r2
 8004102:	d00b      	beq.n	800411c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <UART_AdvFeatureConfig+0x158>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	2240      	movs	r2, #64	; 0x40
 8004122:	4013      	ands	r3, r2
 8004124:	d01d      	beq.n	8004162 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <UART_AdvFeatureConfig+0x15c>)
 800412e:	4013      	ands	r3, r2
 8004130:	0019      	movs	r1, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	035b      	lsls	r3, r3, #13
 8004146:	429a      	cmp	r2, r3
 8004148:	d10b      	bne.n	8004162 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <UART_AdvFeatureConfig+0x160>)
 8004152:	4013      	ands	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	4013      	ands	r3, r2
 800416a:	d00b      	beq.n	8004184 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4a0e      	ldr	r2, [pc, #56]	; (80041ac <UART_AdvFeatureConfig+0x164>)
 8004174:	4013      	ands	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}
 800418c:	fffdffff 	.word	0xfffdffff
 8004190:	fffeffff 	.word	0xfffeffff
 8004194:	fffbffff 	.word	0xfffbffff
 8004198:	ffff7fff 	.word	0xffff7fff
 800419c:	ffffefff 	.word	0xffffefff
 80041a0:	ffffdfff 	.word	0xffffdfff
 80041a4:	ffefffff 	.word	0xffefffff
 80041a8:	ff9fffff 	.word	0xff9fffff
 80041ac:	fff7ffff 	.word	0xfff7ffff

080041b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2290      	movs	r2, #144	; 0x90
 80041bc:	2100      	movs	r1, #0
 80041be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041c0:	f7fc fef8 	bl	8000fb4 <HAL_GetTick>
 80041c4:	0003      	movs	r3, r0
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2208      	movs	r2, #8
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d10c      	bne.n	80041f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2280      	movs	r2, #128	; 0x80
 80041da:	0391      	lsls	r1, r2, #14
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <UART_CheckIdleState+0x98>)
 80041e0:	9200      	str	r2, [sp, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f000 f832 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e026      	b.n	800423e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2204      	movs	r2, #4
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d10c      	bne.n	8004218 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2280      	movs	r2, #128	; 0x80
 8004202:	03d1      	lsls	r1, r2, #15
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <UART_CheckIdleState+0x98>)
 8004208:	9200      	str	r2, [sp, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	f000 f81e 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e012      	b.n	800423e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2288      	movs	r2, #136	; 0x88
 800421c:	2120      	movs	r1, #32
 800421e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	228c      	movs	r2, #140	; 0x8c
 8004224:	2120      	movs	r1, #32
 8004226:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2284      	movs	r2, #132	; 0x84
 8004238:	2100      	movs	r1, #0
 800423a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b004      	add	sp, #16
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	01ffffff 	.word	0x01ffffff

0800424c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b094      	sub	sp, #80	; 0x50
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	1dfb      	adds	r3, r7, #7
 800425a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425c:	e0a7      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004260:	3301      	adds	r3, #1
 8004262:	d100      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004264:	e0a3      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fc fea5 	bl	8000fb4 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <UART_WaitOnFlagUntilTimeout+0x30>
 8004276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004278:	2b00      	cmp	r3, #0
 800427a:	d13f      	bne.n	80042fc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427c:	f3ef 8310 	mrs	r3, PRIMASK
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004284:	647b      	str	r3, [r7, #68]	; 0x44
 8004286:	2301      	movs	r3, #1
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	494e      	ldr	r1, [pc, #312]	; (80043d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800429e:	400a      	ands	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	f383 8810 	msr	PRIMASK, r3
}
 80042ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ae:	f3ef 8310 	mrs	r3, PRIMASK
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	643b      	str	r3, [r7, #64]	; 0x40
 80042b8:	2301      	movs	r3, #1
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	f383 8810 	msr	PRIMASK, r3
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2101      	movs	r1, #1
 80042d0:	438a      	bics	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2288      	movs	r2, #136	; 0x88
 80042e4:	2120      	movs	r1, #32
 80042e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	228c      	movs	r2, #140	; 0x8c
 80042ec:	2120      	movs	r1, #32
 80042ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2284      	movs	r2, #132	; 0x84
 80042f4:	2100      	movs	r1, #0
 80042f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e069      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	d052      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	401a      	ands	r2, r3
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	429a      	cmp	r2, r3
 800431a:	d148      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2280      	movs	r2, #128	; 0x80
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004326:	f3ef 8310 	mrs	r3, PRIMASK
 800432a:	613b      	str	r3, [r7, #16]
  return(result);
 800432c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004330:	2301      	movs	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f383 8810 	msr	PRIMASK, r3
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4924      	ldr	r1, [pc, #144]	; (80043d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004348:	400a      	ands	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800434e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004358:	f3ef 8310 	mrs	r3, PRIMASK
 800435c:	61fb      	str	r3, [r7, #28]
  return(result);
 800435e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004360:	64bb      	str	r3, [r7, #72]	; 0x48
 8004362:	2301      	movs	r3, #1
 8004364:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f383 8810 	msr	PRIMASK, r3
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	438a      	bics	r2, r1
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2288      	movs	r2, #136	; 0x88
 800438e:	2120      	movs	r1, #32
 8004390:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	228c      	movs	r2, #140	; 0x8c
 8004396:	2120      	movs	r1, #32
 8004398:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2290      	movs	r2, #144	; 0x90
 800439e:	2120      	movs	r1, #32
 80043a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2284      	movs	r2, #132	; 0x84
 80043a6:	2100      	movs	r1, #0
 80043a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e010      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	425a      	negs	r2, r3
 80043be:	4153      	adcs	r3, r2
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	001a      	movs	r2, r3
 80043c4:	1dfb      	adds	r3, r7, #7
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d100      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x182>
 80043cc:	e747      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b014      	add	sp, #80	; 0x50
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	fffffe5f 	.word	0xfffffe5f

080043dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b090      	sub	sp, #64	; 0x40
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	1dbb      	adds	r3, r7, #6
 80043e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1dba      	adds	r2, r7, #6
 80043f4:	215c      	movs	r1, #92	; 0x5c
 80043f6:	8812      	ldrh	r2, [r2, #0]
 80043f8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2290      	movs	r2, #144	; 0x90
 80043fe:	2100      	movs	r1, #0
 8004400:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	228c      	movs	r2, #140	; 0x8c
 8004406:	2122      	movs	r1, #34	; 0x22
 8004408:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	589b      	ldr	r3, [r3, r2]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02d      	beq.n	8004470 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	589b      	ldr	r3, [r3, r2]
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <UART_Start_Receive_DMA+0x140>)
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2280      	movs	r2, #128	; 0x80
 8004422:	589b      	ldr	r3, [r3, r2]
 8004424:	4a3e      	ldr	r2, [pc, #248]	; (8004520 <UART_Start_Receive_DMA+0x144>)
 8004426:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2280      	movs	r2, #128	; 0x80
 800442c:	589b      	ldr	r3, [r3, r2]
 800442e:	4a3d      	ldr	r2, [pc, #244]	; (8004524 <UART_Start_Receive_DMA+0x148>)
 8004430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2280      	movs	r2, #128	; 0x80
 8004436:	589b      	ldr	r3, [r3, r2]
 8004438:	2200      	movs	r2, #0
 800443a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	5898      	ldr	r0, [r3, r2]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3324      	adds	r3, #36	; 0x24
 8004448:	0019      	movs	r1, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	001a      	movs	r2, r3
 8004450:	1dbb      	adds	r3, r7, #6
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	f7fc ff20 	bl	8001298 <HAL_DMA_Start_IT>
 8004458:	1e03      	subs	r3, r0, #0
 800445a:	d009      	beq.n	8004470 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2290      	movs	r2, #144	; 0x90
 8004460:	2110      	movs	r1, #16
 8004462:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	228c      	movs	r2, #140	; 0x8c
 8004468:	2120      	movs	r1, #32
 800446a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e050      	b.n	8004512 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d019      	beq.n	80044ac <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004478:	f3ef 8310 	mrs	r3, PRIMASK
 800447c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004482:	2301      	movs	r3, #1
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	f383 8810 	msr	PRIMASK, r3
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	0049      	lsls	r1, r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ac:	f3ef 8310 	mrs	r3, PRIMASK
 80044b0:	613b      	str	r3, [r7, #16]
  return(result);
 80044b2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b6:	2301      	movs	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	430a      	orrs	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f383 8810 	msr	PRIMASK, r3
}
 80044dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044de:	f3ef 8310 	mrs	r3, PRIMASK
 80044e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80044e4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
 80044e8:	2301      	movs	r3, #1
 80044ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f383 8810 	msr	PRIMASK, r3
}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f383 8810 	msr	PRIMASK, r3
}
 800450e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b010      	add	sp, #64	; 0x40
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	08004675 	.word	0x08004675
 8004520:	080047a5 	.word	0x080047a5
 8004524:	080047e7 	.word	0x080047e7

08004528 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004530:	f3ef 8310 	mrs	r3, PRIMASK
 8004534:	60bb      	str	r3, [r7, #8]
  return(result);
 8004536:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
 800453a:	2301      	movs	r3, #1
 800453c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	21c0      	movs	r1, #192	; 0xc0
 8004552:	438a      	bics	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f383 8810 	msr	PRIMASK, r3
}
 8004560:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004562:	f3ef 8310 	mrs	r3, PRIMASK
 8004566:	617b      	str	r3, [r7, #20]
  return(result);
 8004568:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	2301      	movs	r3, #1
 800456e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f383 8810 	msr	PRIMASK, r3
}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4908      	ldr	r1, [pc, #32]	; (80045a4 <UART_EndTxTransfer+0x7c>)
 8004584:	400a      	ands	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2288      	movs	r2, #136	; 0x88
 8004598:	2120      	movs	r1, #32
 800459a:	5099      	str	r1, [r3, r2]
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b00a      	add	sp, #40	; 0x28
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	ff7fffff 	.word	0xff7fffff

080045a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b0:	f3ef 8310 	mrs	r3, PRIMASK
 80045b4:	617b      	str	r3, [r7, #20]
  return(result);
 80045b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ba:	2301      	movs	r3, #1
 80045bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f383 8810 	msr	PRIMASK, r3
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4926      	ldr	r1, [pc, #152]	; (800466c <UART_EndRxTransfer+0xc4>)
 80045d2:	400a      	ands	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f383 8810 	msr	PRIMASK, r3
}
 80045e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e2:	f3ef 8310 	mrs	r3, PRIMASK
 80045e6:	623b      	str	r3, [r7, #32]
  return(result);
 80045e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
 80045ec:	2301      	movs	r3, #1
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	f383 8810 	msr	PRIMASK, r3
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	491b      	ldr	r1, [pc, #108]	; (8004670 <UART_EndRxTransfer+0xc8>)
 8004604:	400a      	ands	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d118      	bne.n	800464e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461c:	f3ef 8310 	mrs	r3, PRIMASK
 8004620:	60bb      	str	r3, [r7, #8]
  return(result);
 8004622:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004626:	2301      	movs	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f383 8810 	msr	PRIMASK, r3
}
 8004630:	46c0      	nop			; (mov r8, r8)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2110      	movs	r1, #16
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f383 8810 	msr	PRIMASK, r3
}
 800464c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	228c      	movs	r2, #140	; 0x8c
 8004652:	2120      	movs	r1, #32
 8004654:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b00e      	add	sp, #56	; 0x38
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	fffffedf 	.word	0xfffffedf
 8004670:	effffffe 	.word	0xeffffffe

08004674 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b094      	sub	sp, #80	; 0x50
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2220      	movs	r2, #32
 800468a:	4013      	ands	r3, r2
 800468c:	d16f      	bne.n	800476e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004690:	225e      	movs	r2, #94	; 0x5e
 8004692:	2100      	movs	r1, #0
 8004694:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004696:	f3ef 8310 	mrs	r3, PRIMASK
 800469a:	61bb      	str	r3, [r7, #24]
  return(result);
 800469c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800469e:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a0:	2301      	movs	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f383 8810 	msr	PRIMASK, r3
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	493a      	ldr	r1, [pc, #232]	; (80047a0 <UART_DMAReceiveCplt+0x12c>)
 80046b8:	400a      	ands	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c8:	f3ef 8310 	mrs	r3, PRIMASK
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	647b      	str	r3, [r7, #68]	; 0x44
 80046d2:	2301      	movs	r3, #1
 80046d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2101      	movs	r1, #1
 80046ea:	438a      	bics	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]
 80046ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fa:	f3ef 8310 	mrs	r3, PRIMASK
 80046fe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
 8004704:	2301      	movs	r3, #1
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2140      	movs	r1, #64	; 0x40
 800471c:	438a      	bics	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472e:	228c      	movs	r2, #140	; 0x8c
 8004730:	2120      	movs	r1, #32
 8004732:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d118      	bne.n	800476e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473c:	f3ef 8310 	mrs	r3, PRIMASK
 8004740:	60fb      	str	r3, [r7, #12]
  return(result);
 8004742:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004746:	2301      	movs	r3, #1
 8004748:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f383 8810 	msr	PRIMASK, r3
}
 8004750:	46c0      	nop			; (mov r8, r8)
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2110      	movs	r1, #16
 800475e:	438a      	bics	r2, r1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800476e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004770:	2200      	movs	r2, #0
 8004772:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d108      	bne.n	800478e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477e:	225c      	movs	r2, #92	; 0x5c
 8004780:	5a9a      	ldrh	r2, [r3, r2]
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	0011      	movs	r1, r2
 8004786:	0018      	movs	r0, r3
 8004788:	f7fc f984 	bl	8000a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800478c:	e003      	b.n	8004796 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800478e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004790:	0018      	movs	r0, r3
 8004792:	f7ff f983 	bl	8003a9c <HAL_UART_RxCpltCallback>
}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b014      	add	sp, #80	; 0x50
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	fffffeff 	.word	0xfffffeff

080047a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d10a      	bne.n	80047d6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	225c      	movs	r2, #92	; 0x5c
 80047c4:	5a9b      	ldrh	r3, [r3, r2]
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0011      	movs	r1, r2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7fc f960 	bl	8000a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047d4:	e003      	b.n	80047de <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	0018      	movs	r0, r3
 80047da:	f7ff f967 	bl	8003aac <HAL_UART_RxHalfCpltCallback>
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b004      	add	sp, #16
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2288      	movs	r2, #136	; 0x88
 80047f8:	589b      	ldr	r3, [r3, r2]
 80047fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	228c      	movs	r2, #140	; 0x8c
 8004800:	589b      	ldr	r3, [r3, r2]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	4013      	ands	r3, r2
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d10a      	bne.n	8004828 <UART_DMAError+0x42>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b21      	cmp	r3, #33	; 0x21
 8004816:	d107      	bne.n	8004828 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2256      	movs	r2, #86	; 0x56
 800481c:	2100      	movs	r1, #0
 800481e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	0018      	movs	r0, r3
 8004824:	f7ff fe80 	bl	8004528 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2240      	movs	r2, #64	; 0x40
 8004830:	4013      	ands	r3, r2
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d10a      	bne.n	800484c <UART_DMAError+0x66>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b22      	cmp	r3, #34	; 0x22
 800483a:	d107      	bne.n	800484c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	225e      	movs	r2, #94	; 0x5e
 8004840:	2100      	movs	r1, #0
 8004842:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	0018      	movs	r0, r3
 8004848:	f7ff feae 	bl	80045a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2290      	movs	r2, #144	; 0x90
 8004850:	589b      	ldr	r3, [r3, r2]
 8004852:	2210      	movs	r2, #16
 8004854:	431a      	orrs	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2190      	movs	r1, #144	; 0x90
 800485a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	0018      	movs	r0, r3
 8004860:	f7ff f92c 	bl	8003abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b006      	add	sp, #24
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	225e      	movs	r2, #94	; 0x5e
 800487e:	2100      	movs	r1, #0
 8004880:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2256      	movs	r2, #86	; 0x56
 8004886:	2100      	movs	r1, #0
 8004888:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff f915 	bl	8003abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b004      	add	sp, #16
 8004898:	bd80      	pop	{r7, pc}

0800489a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a2:	f3ef 8310 	mrs	r3, PRIMASK
 80048a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80048a8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	2301      	movs	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	438a      	bics	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2288      	movs	r2, #136	; 0x88
 80048d8:	2120      	movs	r1, #32
 80048da:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff f8d1 	bl	8003a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b006      	add	sp, #24
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b002      	add	sp, #8
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2284      	movs	r2, #132	; 0x84
 8004930:	5c9b      	ldrb	r3, [r3, r2]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_UARTEx_DisableFifoMode+0x16>
 8004936:	2302      	movs	r3, #2
 8004938:	e027      	b.n	800498a <HAL_UARTEx_DisableFifoMode+0x66>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2284      	movs	r2, #132	; 0x84
 800493e:	2101      	movs	r1, #1
 8004940:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2288      	movs	r2, #136	; 0x88
 8004946:	2124      	movs	r1, #36	; 0x24
 8004948:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	438a      	bics	r2, r1
 8004960:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a0b      	ldr	r2, [pc, #44]	; (8004994 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004966:	4013      	ands	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2288      	movs	r2, #136	; 0x88
 800497c:	2120      	movs	r1, #32
 800497e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2284      	movs	r2, #132	; 0x84
 8004984:	2100      	movs	r1, #0
 8004986:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b004      	add	sp, #16
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	dfffffff 	.word	0xdfffffff

08004998 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2284      	movs	r2, #132	; 0x84
 80049a6:	5c9b      	ldrb	r3, [r3, r2]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e02e      	b.n	8004a0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2284      	movs	r2, #132	; 0x84
 80049b4:	2101      	movs	r1, #1
 80049b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2288      	movs	r2, #136	; 0x88
 80049bc:	2124      	movs	r1, #36	; 0x24
 80049be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2101      	movs	r1, #1
 80049d4:	438a      	bics	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	08d9      	lsrs	r1, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 f8bc 	bl	8004b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2288      	movs	r2, #136	; 0x88
 8004a00:	2120      	movs	r1, #32
 8004a02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2284      	movs	r2, #132	; 0x84
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2284      	movs	r2, #132	; 0x84
 8004a26:	5c9b      	ldrb	r3, [r3, r2]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e02f      	b.n	8004a90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2284      	movs	r2, #132	; 0x84
 8004a34:	2101      	movs	r1, #1
 8004a36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2288      	movs	r2, #136	; 0x88
 8004a3c:	2124      	movs	r1, #36	; 0x24
 8004a3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2101      	movs	r1, #1
 8004a54:	438a      	bics	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4a0e      	ldr	r2, [pc, #56]	; (8004a98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	0019      	movs	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f000 f87b 	bl	8004b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2288      	movs	r2, #136	; 0x88
 8004a82:	2120      	movs	r1, #32
 8004a84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2284      	movs	r2, #132	; 0x84
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b004      	add	sp, #16
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	f1ffffff 	.word	0xf1ffffff

08004a9c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a9c:	b5b0      	push	{r4, r5, r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	1dbb      	adds	r3, r7, #6
 8004aa8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	228c      	movs	r2, #140	; 0x8c
 8004aae:	589b      	ldr	r3, [r3, r2]
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d156      	bne.n	8004b62 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004aba:	1dbb      	adds	r3, r7, #6
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e04e      	b.n	8004b64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	015b      	lsls	r3, r3, #5
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d109      	bne.n	8004ae6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2201      	movs	r2, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d001      	beq.n	8004ae6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e03e      	b.n	8004b64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004af2:	2527      	movs	r5, #39	; 0x27
 8004af4:	197c      	adds	r4, r7, r5
 8004af6:	1dbb      	adds	r3, r7, #6
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7ff fc6c 	bl	80043dc <UART_Start_Receive_DMA>
 8004b04:	0003      	movs	r3, r0
 8004b06:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004b08:	197b      	adds	r3, r7, r5
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d124      	bne.n	8004b5a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d11c      	bne.n	8004b52 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b20:	f3ef 8310 	mrs	r3, PRIMASK
 8004b24:	617b      	str	r3, [r7, #20]
  return(result);
 8004b26:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b28:	623b      	str	r3, [r7, #32]
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f383 8810 	msr	PRIMASK, r3
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2110      	movs	r1, #16
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f383 8810 	msr	PRIMASK, r3
}
 8004b50:	e003      	b.n	8004b5a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004b52:	2327      	movs	r3, #39	; 0x27
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004b5a:	2327      	movs	r3, #39	; 0x27
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	e000      	b.n	8004b64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b00a      	add	sp, #40	; 0x28
 8004b6a:	bdb0      	pop	{r4, r5, r7, pc}

08004b6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d108      	bne.n	8004b8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	226a      	movs	r2, #106	; 0x6a
 8004b80:	2101      	movs	r1, #1
 8004b82:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2268      	movs	r2, #104	; 0x68
 8004b88:	2101      	movs	r1, #1
 8004b8a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b8c:	e043      	b.n	8004c16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b8e:	260f      	movs	r6, #15
 8004b90:	19bb      	adds	r3, r7, r6
 8004b92:	2208      	movs	r2, #8
 8004b94:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b96:	200e      	movs	r0, #14
 8004b98:	183b      	adds	r3, r7, r0
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	0e5b      	lsrs	r3, r3, #25
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	240d      	movs	r4, #13
 8004baa:	193b      	adds	r3, r7, r4
 8004bac:	2107      	movs	r1, #7
 8004bae:	400a      	ands	r2, r1
 8004bb0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	0f5b      	lsrs	r3, r3, #29
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	250c      	movs	r5, #12
 8004bbe:	197b      	adds	r3, r7, r5
 8004bc0:	2107      	movs	r1, #7
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bc6:	183b      	adds	r3, r7, r0
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	197a      	adds	r2, r7, r5
 8004bcc:	7812      	ldrb	r2, [r2, #0]
 8004bce:	4914      	ldr	r1, [pc, #80]	; (8004c20 <UARTEx_SetNbDataToProcess+0xb4>)
 8004bd0:	5c8a      	ldrb	r2, [r1, r2]
 8004bd2:	435a      	muls	r2, r3
 8004bd4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bd6:	197b      	adds	r3, r7, r5
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <UARTEx_SetNbDataToProcess+0xb8>)
 8004bdc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bde:	0019      	movs	r1, r3
 8004be0:	f7fb fb2c 	bl	800023c <__divsi3>
 8004be4:	0003      	movs	r3, r0
 8004be6:	b299      	uxth	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	226a      	movs	r2, #106	; 0x6a
 8004bec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bee:	19bb      	adds	r3, r7, r6
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	193a      	adds	r2, r7, r4
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	490a      	ldr	r1, [pc, #40]	; (8004c20 <UARTEx_SetNbDataToProcess+0xb4>)
 8004bf8:	5c8a      	ldrb	r2, [r1, r2]
 8004bfa:	435a      	muls	r2, r3
 8004bfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bfe:	193b      	adds	r3, r7, r4
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <UARTEx_SetNbDataToProcess+0xb8>)
 8004c04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c06:	0019      	movs	r1, r3
 8004c08:	f7fb fb18 	bl	800023c <__divsi3>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	b299      	uxth	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2268      	movs	r2, #104	; 0x68
 8004c14:	5299      	strh	r1, [r3, r2]
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b005      	add	sp, #20
 8004c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	08005634 	.word	0x08005634
 8004c24:	0800563c 	.word	0x0800563c

08004c28 <__errno>:
 8004c28:	4b01      	ldr	r3, [pc, #4]	; (8004c30 <__errno+0x8>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	4770      	bx	lr
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	20000014 	.word	0x20000014

08004c34 <__libc_init_array>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	2600      	movs	r6, #0
 8004c38:	4d0c      	ldr	r5, [pc, #48]	; (8004c6c <__libc_init_array+0x38>)
 8004c3a:	4c0d      	ldr	r4, [pc, #52]	; (8004c70 <__libc_init_array+0x3c>)
 8004c3c:	1b64      	subs	r4, r4, r5
 8004c3e:	10a4      	asrs	r4, r4, #2
 8004c40:	42a6      	cmp	r6, r4
 8004c42:	d109      	bne.n	8004c58 <__libc_init_array+0x24>
 8004c44:	2600      	movs	r6, #0
 8004c46:	f000 fc9d 	bl	8005584 <_init>
 8004c4a:	4d0a      	ldr	r5, [pc, #40]	; (8004c74 <__libc_init_array+0x40>)
 8004c4c:	4c0a      	ldr	r4, [pc, #40]	; (8004c78 <__libc_init_array+0x44>)
 8004c4e:	1b64      	subs	r4, r4, r5
 8004c50:	10a4      	asrs	r4, r4, #2
 8004c52:	42a6      	cmp	r6, r4
 8004c54:	d105      	bne.n	8004c62 <__libc_init_array+0x2e>
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	00b3      	lsls	r3, r6, #2
 8004c5a:	58eb      	ldr	r3, [r5, r3]
 8004c5c:	4798      	blx	r3
 8004c5e:	3601      	adds	r6, #1
 8004c60:	e7ee      	b.n	8004c40 <__libc_init_array+0xc>
 8004c62:	00b3      	lsls	r3, r6, #2
 8004c64:	58eb      	ldr	r3, [r5, r3]
 8004c66:	4798      	blx	r3
 8004c68:	3601      	adds	r6, #1
 8004c6a:	e7f2      	b.n	8004c52 <__libc_init_array+0x1e>
 8004c6c:	08005680 	.word	0x08005680
 8004c70:	08005680 	.word	0x08005680
 8004c74:	08005680 	.word	0x08005680
 8004c78:	08005684 	.word	0x08005684

08004c7c <memset>:
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	1882      	adds	r2, r0, r2
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d100      	bne.n	8004c86 <memset+0xa>
 8004c84:	4770      	bx	lr
 8004c86:	7019      	strb	r1, [r3, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	e7f9      	b.n	8004c80 <memset+0x4>

08004c8c <siprintf>:
 8004c8c:	b40e      	push	{r1, r2, r3}
 8004c8e:	b500      	push	{lr}
 8004c90:	490b      	ldr	r1, [pc, #44]	; (8004cc0 <siprintf+0x34>)
 8004c92:	b09c      	sub	sp, #112	; 0x70
 8004c94:	ab1d      	add	r3, sp, #116	; 0x74
 8004c96:	9002      	str	r0, [sp, #8]
 8004c98:	9006      	str	r0, [sp, #24]
 8004c9a:	9107      	str	r1, [sp, #28]
 8004c9c:	9104      	str	r1, [sp, #16]
 8004c9e:	4809      	ldr	r0, [pc, #36]	; (8004cc4 <siprintf+0x38>)
 8004ca0:	4909      	ldr	r1, [pc, #36]	; (8004cc8 <siprintf+0x3c>)
 8004ca2:	cb04      	ldmia	r3!, {r2}
 8004ca4:	9105      	str	r1, [sp, #20]
 8004ca6:	6800      	ldr	r0, [r0, #0]
 8004ca8:	a902      	add	r1, sp, #8
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	f000 f882 	bl	8004db4 <_svfiprintf_r>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9a02      	ldr	r2, [sp, #8]
 8004cb4:	7013      	strb	r3, [r2, #0]
 8004cb6:	b01c      	add	sp, #112	; 0x70
 8004cb8:	bc08      	pop	{r3}
 8004cba:	b003      	add	sp, #12
 8004cbc:	4718      	bx	r3
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	7fffffff 	.word	0x7fffffff
 8004cc4:	20000014 	.word	0x20000014
 8004cc8:	ffff0208 	.word	0xffff0208

08004ccc <strncmp>:
 8004ccc:	b530      	push	{r4, r5, lr}
 8004cce:	0005      	movs	r5, r0
 8004cd0:	1e10      	subs	r0, r2, #0
 8004cd2:	d008      	beq.n	8004ce6 <strncmp+0x1a>
 8004cd4:	2400      	movs	r4, #0
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	5d2b      	ldrb	r3, [r5, r4]
 8004cda:	5d08      	ldrb	r0, [r1, r4]
 8004cdc:	4283      	cmp	r3, r0
 8004cde:	d101      	bne.n	8004ce4 <strncmp+0x18>
 8004ce0:	4294      	cmp	r4, r2
 8004ce2:	d101      	bne.n	8004ce8 <strncmp+0x1c>
 8004ce4:	1a18      	subs	r0, r3, r0
 8004ce6:	bd30      	pop	{r4, r5, pc}
 8004ce8:	3401      	adds	r4, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f4      	bne.n	8004cd8 <strncmp+0xc>
 8004cee:	e7f9      	b.n	8004ce4 <strncmp+0x18>

08004cf0 <__ssputs_r>:
 8004cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf2:	688e      	ldr	r6, [r1, #8]
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	0007      	movs	r7, r0
 8004cf8:	000c      	movs	r4, r1
 8004cfa:	9203      	str	r2, [sp, #12]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	429e      	cmp	r6, r3
 8004d00:	d83c      	bhi.n	8004d7c <__ssputs_r+0x8c>
 8004d02:	2390      	movs	r3, #144	; 0x90
 8004d04:	898a      	ldrh	r2, [r1, #12]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	421a      	tst	r2, r3
 8004d0a:	d034      	beq.n	8004d76 <__ssputs_r+0x86>
 8004d0c:	6909      	ldr	r1, [r1, #16]
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	6960      	ldr	r0, [r4, #20]
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	9302      	str	r3, [sp, #8]
 8004d16:	2303      	movs	r3, #3
 8004d18:	4343      	muls	r3, r0
 8004d1a:	0fdd      	lsrs	r5, r3, #31
 8004d1c:	18ed      	adds	r5, r5, r3
 8004d1e:	9b01      	ldr	r3, [sp, #4]
 8004d20:	9802      	ldr	r0, [sp, #8]
 8004d22:	3301      	adds	r3, #1
 8004d24:	181b      	adds	r3, r3, r0
 8004d26:	106d      	asrs	r5, r5, #1
 8004d28:	42ab      	cmp	r3, r5
 8004d2a:	d900      	bls.n	8004d2e <__ssputs_r+0x3e>
 8004d2c:	001d      	movs	r5, r3
 8004d2e:	0553      	lsls	r3, r2, #21
 8004d30:	d532      	bpl.n	8004d98 <__ssputs_r+0xa8>
 8004d32:	0029      	movs	r1, r5
 8004d34:	0038      	movs	r0, r7
 8004d36:	f000 fb53 	bl	80053e0 <_malloc_r>
 8004d3a:	1e06      	subs	r6, r0, #0
 8004d3c:	d109      	bne.n	8004d52 <__ssputs_r+0x62>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	2001      	movs	r0, #1
 8004d46:	89a2      	ldrh	r2, [r4, #12]
 8004d48:	4240      	negs	r0, r0
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	b005      	add	sp, #20
 8004d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d52:	9a02      	ldr	r2, [sp, #8]
 8004d54:	6921      	ldr	r1, [r4, #16]
 8004d56:	f000 faba 	bl	80052ce <memcpy>
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <__ssputs_r+0xc0>)
 8004d5e:	401a      	ands	r2, r3
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	4313      	orrs	r3, r2
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	6126      	str	r6, [r4, #16]
 8004d6a:	18f6      	adds	r6, r6, r3
 8004d6c:	6026      	str	r6, [r4, #0]
 8004d6e:	6165      	str	r5, [r4, #20]
 8004d70:	9e01      	ldr	r6, [sp, #4]
 8004d72:	1aed      	subs	r5, r5, r3
 8004d74:	60a5      	str	r5, [r4, #8]
 8004d76:	9b01      	ldr	r3, [sp, #4]
 8004d78:	429e      	cmp	r6, r3
 8004d7a:	d900      	bls.n	8004d7e <__ssputs_r+0x8e>
 8004d7c:	9e01      	ldr	r6, [sp, #4]
 8004d7e:	0032      	movs	r2, r6
 8004d80:	9903      	ldr	r1, [sp, #12]
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	f000 faac 	bl	80052e0 <memmove>
 8004d88:	68a3      	ldr	r3, [r4, #8]
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	1b9b      	subs	r3, r3, r6
 8004d8e:	60a3      	str	r3, [r4, #8]
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	199e      	adds	r6, r3, r6
 8004d94:	6026      	str	r6, [r4, #0]
 8004d96:	e7da      	b.n	8004d4e <__ssputs_r+0x5e>
 8004d98:	002a      	movs	r2, r5
 8004d9a:	0038      	movs	r0, r7
 8004d9c:	f000 fb96 	bl	80054cc <_realloc_r>
 8004da0:	1e06      	subs	r6, r0, #0
 8004da2:	d1e0      	bne.n	8004d66 <__ssputs_r+0x76>
 8004da4:	0038      	movs	r0, r7
 8004da6:	6921      	ldr	r1, [r4, #16]
 8004da8:	f000 faae 	bl	8005308 <_free_r>
 8004dac:	e7c7      	b.n	8004d3e <__ssputs_r+0x4e>
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	fffffb7f 	.word	0xfffffb7f

08004db4 <_svfiprintf_r>:
 8004db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db6:	b0a1      	sub	sp, #132	; 0x84
 8004db8:	9003      	str	r0, [sp, #12]
 8004dba:	001d      	movs	r5, r3
 8004dbc:	898b      	ldrh	r3, [r1, #12]
 8004dbe:	000f      	movs	r7, r1
 8004dc0:	0016      	movs	r6, r2
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	d511      	bpl.n	8004dea <_svfiprintf_r+0x36>
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10e      	bne.n	8004dea <_svfiprintf_r+0x36>
 8004dcc:	2140      	movs	r1, #64	; 0x40
 8004dce:	f000 fb07 	bl	80053e0 <_malloc_r>
 8004dd2:	6038      	str	r0, [r7, #0]
 8004dd4:	6138      	str	r0, [r7, #16]
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d105      	bne.n	8004de6 <_svfiprintf_r+0x32>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	9a03      	ldr	r2, [sp, #12]
 8004dde:	3801      	subs	r0, #1
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	b021      	add	sp, #132	; 0x84
 8004de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de6:	2340      	movs	r3, #64	; 0x40
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	2300      	movs	r3, #0
 8004dec:	ac08      	add	r4, sp, #32
 8004dee:	6163      	str	r3, [r4, #20]
 8004df0:	3320      	adds	r3, #32
 8004df2:	7663      	strb	r3, [r4, #25]
 8004df4:	3310      	adds	r3, #16
 8004df6:	76a3      	strb	r3, [r4, #26]
 8004df8:	9507      	str	r5, [sp, #28]
 8004dfa:	0035      	movs	r5, r6
 8004dfc:	782b      	ldrb	r3, [r5, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <_svfiprintf_r+0x52>
 8004e02:	2b25      	cmp	r3, #37	; 0x25
 8004e04:	d147      	bne.n	8004e96 <_svfiprintf_r+0xe2>
 8004e06:	1bab      	subs	r3, r5, r6
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	42b5      	cmp	r5, r6
 8004e0c:	d00c      	beq.n	8004e28 <_svfiprintf_r+0x74>
 8004e0e:	0032      	movs	r2, r6
 8004e10:	0039      	movs	r1, r7
 8004e12:	9803      	ldr	r0, [sp, #12]
 8004e14:	f7ff ff6c 	bl	8004cf0 <__ssputs_r>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d100      	bne.n	8004e1e <_svfiprintf_r+0x6a>
 8004e1c:	e0ae      	b.n	8004f7c <_svfiprintf_r+0x1c8>
 8004e1e:	6962      	ldr	r2, [r4, #20]
 8004e20:	9b05      	ldr	r3, [sp, #20]
 8004e22:	4694      	mov	ip, r2
 8004e24:	4463      	add	r3, ip
 8004e26:	6163      	str	r3, [r4, #20]
 8004e28:	782b      	ldrb	r3, [r5, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d100      	bne.n	8004e30 <_svfiprintf_r+0x7c>
 8004e2e:	e0a5      	b.n	8004f7c <_svfiprintf_r+0x1c8>
 8004e30:	2201      	movs	r2, #1
 8004e32:	2300      	movs	r3, #0
 8004e34:	4252      	negs	r2, r2
 8004e36:	6062      	str	r2, [r4, #4]
 8004e38:	a904      	add	r1, sp, #16
 8004e3a:	3254      	adds	r2, #84	; 0x54
 8004e3c:	1852      	adds	r2, r2, r1
 8004e3e:	1c6e      	adds	r6, r5, #1
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	60e3      	str	r3, [r4, #12]
 8004e44:	60a3      	str	r3, [r4, #8]
 8004e46:	7013      	strb	r3, [r2, #0]
 8004e48:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e4a:	2205      	movs	r2, #5
 8004e4c:	7831      	ldrb	r1, [r6, #0]
 8004e4e:	4854      	ldr	r0, [pc, #336]	; (8004fa0 <_svfiprintf_r+0x1ec>)
 8004e50:	f000 fa32 	bl	80052b8 <memchr>
 8004e54:	1c75      	adds	r5, r6, #1
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d11f      	bne.n	8004e9a <_svfiprintf_r+0xe6>
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	06d3      	lsls	r3, r2, #27
 8004e5e:	d504      	bpl.n	8004e6a <_svfiprintf_r+0xb6>
 8004e60:	2353      	movs	r3, #83	; 0x53
 8004e62:	a904      	add	r1, sp, #16
 8004e64:	185b      	adds	r3, r3, r1
 8004e66:	2120      	movs	r1, #32
 8004e68:	7019      	strb	r1, [r3, #0]
 8004e6a:	0713      	lsls	r3, r2, #28
 8004e6c:	d504      	bpl.n	8004e78 <_svfiprintf_r+0xc4>
 8004e6e:	2353      	movs	r3, #83	; 0x53
 8004e70:	a904      	add	r1, sp, #16
 8004e72:	185b      	adds	r3, r3, r1
 8004e74:	212b      	movs	r1, #43	; 0x2b
 8004e76:	7019      	strb	r1, [r3, #0]
 8004e78:	7833      	ldrb	r3, [r6, #0]
 8004e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e7c:	d016      	beq.n	8004eac <_svfiprintf_r+0xf8>
 8004e7e:	0035      	movs	r5, r6
 8004e80:	2100      	movs	r1, #0
 8004e82:	200a      	movs	r0, #10
 8004e84:	68e3      	ldr	r3, [r4, #12]
 8004e86:	782a      	ldrb	r2, [r5, #0]
 8004e88:	1c6e      	adds	r6, r5, #1
 8004e8a:	3a30      	subs	r2, #48	; 0x30
 8004e8c:	2a09      	cmp	r2, #9
 8004e8e:	d94e      	bls.n	8004f2e <_svfiprintf_r+0x17a>
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d111      	bne.n	8004eb8 <_svfiprintf_r+0x104>
 8004e94:	e017      	b.n	8004ec6 <_svfiprintf_r+0x112>
 8004e96:	3501      	adds	r5, #1
 8004e98:	e7b0      	b.n	8004dfc <_svfiprintf_r+0x48>
 8004e9a:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <_svfiprintf_r+0x1ec>)
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	1ac0      	subs	r0, r0, r3
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4083      	lsls	r3, r0
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	002e      	movs	r6, r5
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	e7ce      	b.n	8004e4a <_svfiprintf_r+0x96>
 8004eac:	9b07      	ldr	r3, [sp, #28]
 8004eae:	1d19      	adds	r1, r3, #4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	9107      	str	r1, [sp, #28]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	db01      	blt.n	8004ebc <_svfiprintf_r+0x108>
 8004eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eba:	e004      	b.n	8004ec6 <_svfiprintf_r+0x112>
 8004ebc:	425b      	negs	r3, r3
 8004ebe:	60e3      	str	r3, [r4, #12]
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	782b      	ldrb	r3, [r5, #0]
 8004ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8004eca:	d10a      	bne.n	8004ee2 <_svfiprintf_r+0x12e>
 8004ecc:	786b      	ldrb	r3, [r5, #1]
 8004ece:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed0:	d135      	bne.n	8004f3e <_svfiprintf_r+0x18a>
 8004ed2:	9b07      	ldr	r3, [sp, #28]
 8004ed4:	3502      	adds	r5, #2
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	9207      	str	r2, [sp, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	db2b      	blt.n	8004f38 <_svfiprintf_r+0x184>
 8004ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee2:	4e30      	ldr	r6, [pc, #192]	; (8004fa4 <_svfiprintf_r+0x1f0>)
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	0030      	movs	r0, r6
 8004ee8:	7829      	ldrb	r1, [r5, #0]
 8004eea:	f000 f9e5 	bl	80052b8 <memchr>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d006      	beq.n	8004f00 <_svfiprintf_r+0x14c>
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	1b80      	subs	r0, r0, r6
 8004ef6:	4083      	lsls	r3, r0
 8004ef8:	6822      	ldr	r2, [r4, #0]
 8004efa:	3501      	adds	r5, #1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	7829      	ldrb	r1, [r5, #0]
 8004f02:	2206      	movs	r2, #6
 8004f04:	4828      	ldr	r0, [pc, #160]	; (8004fa8 <_svfiprintf_r+0x1f4>)
 8004f06:	1c6e      	adds	r6, r5, #1
 8004f08:	7621      	strb	r1, [r4, #24]
 8004f0a:	f000 f9d5 	bl	80052b8 <memchr>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d03c      	beq.n	8004f8c <_svfiprintf_r+0x1d8>
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <_svfiprintf_r+0x1f8>)
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d125      	bne.n	8004f64 <_svfiprintf_r+0x1b0>
 8004f18:	2207      	movs	r2, #7
 8004f1a:	9b07      	ldr	r3, [sp, #28]
 8004f1c:	3307      	adds	r3, #7
 8004f1e:	4393      	bics	r3, r2
 8004f20:	3308      	adds	r3, #8
 8004f22:	9307      	str	r3, [sp, #28]
 8004f24:	6963      	ldr	r3, [r4, #20]
 8004f26:	9a04      	ldr	r2, [sp, #16]
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	6163      	str	r3, [r4, #20]
 8004f2c:	e765      	b.n	8004dfa <_svfiprintf_r+0x46>
 8004f2e:	4343      	muls	r3, r0
 8004f30:	0035      	movs	r5, r6
 8004f32:	2101      	movs	r1, #1
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	e7a6      	b.n	8004e86 <_svfiprintf_r+0xd2>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	425b      	negs	r3, r3
 8004f3c:	e7d0      	b.n	8004ee0 <_svfiprintf_r+0x12c>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	200a      	movs	r0, #10
 8004f42:	001a      	movs	r2, r3
 8004f44:	3501      	adds	r5, #1
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	7829      	ldrb	r1, [r5, #0]
 8004f4a:	1c6e      	adds	r6, r5, #1
 8004f4c:	3930      	subs	r1, #48	; 0x30
 8004f4e:	2909      	cmp	r1, #9
 8004f50:	d903      	bls.n	8004f5a <_svfiprintf_r+0x1a6>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0c5      	beq.n	8004ee2 <_svfiprintf_r+0x12e>
 8004f56:	9209      	str	r2, [sp, #36]	; 0x24
 8004f58:	e7c3      	b.n	8004ee2 <_svfiprintf_r+0x12e>
 8004f5a:	4342      	muls	r2, r0
 8004f5c:	0035      	movs	r5, r6
 8004f5e:	2301      	movs	r3, #1
 8004f60:	1852      	adds	r2, r2, r1
 8004f62:	e7f1      	b.n	8004f48 <_svfiprintf_r+0x194>
 8004f64:	ab07      	add	r3, sp, #28
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	003a      	movs	r2, r7
 8004f6a:	0021      	movs	r1, r4
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <_svfiprintf_r+0x1fc>)
 8004f6e:	9803      	ldr	r0, [sp, #12]
 8004f70:	e000      	b.n	8004f74 <_svfiprintf_r+0x1c0>
 8004f72:	bf00      	nop
 8004f74:	9004      	str	r0, [sp, #16]
 8004f76:	9b04      	ldr	r3, [sp, #16]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	d1d3      	bne.n	8004f24 <_svfiprintf_r+0x170>
 8004f7c:	89bb      	ldrh	r3, [r7, #12]
 8004f7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f80:	065b      	lsls	r3, r3, #25
 8004f82:	d400      	bmi.n	8004f86 <_svfiprintf_r+0x1d2>
 8004f84:	e72d      	b.n	8004de2 <_svfiprintf_r+0x2e>
 8004f86:	2001      	movs	r0, #1
 8004f88:	4240      	negs	r0, r0
 8004f8a:	e72a      	b.n	8004de2 <_svfiprintf_r+0x2e>
 8004f8c:	ab07      	add	r3, sp, #28
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	003a      	movs	r2, r7
 8004f92:	0021      	movs	r1, r4
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <_svfiprintf_r+0x1fc>)
 8004f96:	9803      	ldr	r0, [sp, #12]
 8004f98:	f000 f87c 	bl	8005094 <_printf_i>
 8004f9c:	e7ea      	b.n	8004f74 <_svfiprintf_r+0x1c0>
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	08005644 	.word	0x08005644
 8004fa4:	0800564a 	.word	0x0800564a
 8004fa8:	0800564e 	.word	0x0800564e
 8004fac:	00000000 	.word	0x00000000
 8004fb0:	08004cf1 	.word	0x08004cf1

08004fb4 <_printf_common>:
 8004fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fb6:	0015      	movs	r5, r2
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	688a      	ldr	r2, [r1, #8]
 8004fbc:	690b      	ldr	r3, [r1, #16]
 8004fbe:	000c      	movs	r4, r1
 8004fc0:	9000      	str	r0, [sp, #0]
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	da00      	bge.n	8004fc8 <_printf_common+0x14>
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	0022      	movs	r2, r4
 8004fca:	602b      	str	r3, [r5, #0]
 8004fcc:	3243      	adds	r2, #67	; 0x43
 8004fce:	7812      	ldrb	r2, [r2, #0]
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	d001      	beq.n	8004fd8 <_printf_common+0x24>
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	069b      	lsls	r3, r3, #26
 8004fdc:	d502      	bpl.n	8004fe4 <_printf_common+0x30>
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	0017      	movs	r7, r2
 8004fea:	401f      	ands	r7, r3
 8004fec:	421a      	tst	r2, r3
 8004fee:	d027      	beq.n	8005040 <_printf_common+0x8c>
 8004ff0:	0023      	movs	r3, r4
 8004ff2:	3343      	adds	r3, #67	; 0x43
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	1e5a      	subs	r2, r3, #1
 8004ff8:	4193      	sbcs	r3, r2
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	0692      	lsls	r2, r2, #26
 8004ffe:	d430      	bmi.n	8005062 <_printf_common+0xae>
 8005000:	0022      	movs	r2, r4
 8005002:	9901      	ldr	r1, [sp, #4]
 8005004:	9800      	ldr	r0, [sp, #0]
 8005006:	9e08      	ldr	r6, [sp, #32]
 8005008:	3243      	adds	r2, #67	; 0x43
 800500a:	47b0      	blx	r6
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d025      	beq.n	800505c <_printf_common+0xa8>
 8005010:	2306      	movs	r3, #6
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	682a      	ldr	r2, [r5, #0]
 8005016:	68e1      	ldr	r1, [r4, #12]
 8005018:	2500      	movs	r5, #0
 800501a:	4003      	ands	r3, r0
 800501c:	2b04      	cmp	r3, #4
 800501e:	d103      	bne.n	8005028 <_printf_common+0x74>
 8005020:	1a8d      	subs	r5, r1, r2
 8005022:	43eb      	mvns	r3, r5
 8005024:	17db      	asrs	r3, r3, #31
 8005026:	401d      	ands	r5, r3
 8005028:	68a3      	ldr	r3, [r4, #8]
 800502a:	6922      	ldr	r2, [r4, #16]
 800502c:	4293      	cmp	r3, r2
 800502e:	dd01      	ble.n	8005034 <_printf_common+0x80>
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	18ed      	adds	r5, r5, r3
 8005034:	2700      	movs	r7, #0
 8005036:	42bd      	cmp	r5, r7
 8005038:	d120      	bne.n	800507c <_printf_common+0xc8>
 800503a:	2000      	movs	r0, #0
 800503c:	e010      	b.n	8005060 <_printf_common+0xac>
 800503e:	3701      	adds	r7, #1
 8005040:	68e3      	ldr	r3, [r4, #12]
 8005042:	682a      	ldr	r2, [r5, #0]
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	42bb      	cmp	r3, r7
 8005048:	ddd2      	ble.n	8004ff0 <_printf_common+0x3c>
 800504a:	0022      	movs	r2, r4
 800504c:	2301      	movs	r3, #1
 800504e:	9901      	ldr	r1, [sp, #4]
 8005050:	9800      	ldr	r0, [sp, #0]
 8005052:	9e08      	ldr	r6, [sp, #32]
 8005054:	3219      	adds	r2, #25
 8005056:	47b0      	blx	r6
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d1f0      	bne.n	800503e <_printf_common+0x8a>
 800505c:	2001      	movs	r0, #1
 800505e:	4240      	negs	r0, r0
 8005060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005062:	2030      	movs	r0, #48	; 0x30
 8005064:	18e1      	adds	r1, r4, r3
 8005066:	3143      	adds	r1, #67	; 0x43
 8005068:	7008      	strb	r0, [r1, #0]
 800506a:	0021      	movs	r1, r4
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	3145      	adds	r1, #69	; 0x45
 8005070:	7809      	ldrb	r1, [r1, #0]
 8005072:	18a2      	adds	r2, r4, r2
 8005074:	3243      	adds	r2, #67	; 0x43
 8005076:	3302      	adds	r3, #2
 8005078:	7011      	strb	r1, [r2, #0]
 800507a:	e7c1      	b.n	8005000 <_printf_common+0x4c>
 800507c:	0022      	movs	r2, r4
 800507e:	2301      	movs	r3, #1
 8005080:	9901      	ldr	r1, [sp, #4]
 8005082:	9800      	ldr	r0, [sp, #0]
 8005084:	9e08      	ldr	r6, [sp, #32]
 8005086:	321a      	adds	r2, #26
 8005088:	47b0      	blx	r6
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	d0e6      	beq.n	800505c <_printf_common+0xa8>
 800508e:	3701      	adds	r7, #1
 8005090:	e7d1      	b.n	8005036 <_printf_common+0x82>
	...

08005094 <_printf_i>:
 8005094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005096:	b08b      	sub	sp, #44	; 0x2c
 8005098:	9206      	str	r2, [sp, #24]
 800509a:	000a      	movs	r2, r1
 800509c:	3243      	adds	r2, #67	; 0x43
 800509e:	9307      	str	r3, [sp, #28]
 80050a0:	9005      	str	r0, [sp, #20]
 80050a2:	9204      	str	r2, [sp, #16]
 80050a4:	7e0a      	ldrb	r2, [r1, #24]
 80050a6:	000c      	movs	r4, r1
 80050a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050aa:	2a78      	cmp	r2, #120	; 0x78
 80050ac:	d807      	bhi.n	80050be <_printf_i+0x2a>
 80050ae:	2a62      	cmp	r2, #98	; 0x62
 80050b0:	d809      	bhi.n	80050c6 <_printf_i+0x32>
 80050b2:	2a00      	cmp	r2, #0
 80050b4:	d100      	bne.n	80050b8 <_printf_i+0x24>
 80050b6:	e0c1      	b.n	800523c <_printf_i+0x1a8>
 80050b8:	2a58      	cmp	r2, #88	; 0x58
 80050ba:	d100      	bne.n	80050be <_printf_i+0x2a>
 80050bc:	e08c      	b.n	80051d8 <_printf_i+0x144>
 80050be:	0026      	movs	r6, r4
 80050c0:	3642      	adds	r6, #66	; 0x42
 80050c2:	7032      	strb	r2, [r6, #0]
 80050c4:	e022      	b.n	800510c <_printf_i+0x78>
 80050c6:	0010      	movs	r0, r2
 80050c8:	3863      	subs	r0, #99	; 0x63
 80050ca:	2815      	cmp	r0, #21
 80050cc:	d8f7      	bhi.n	80050be <_printf_i+0x2a>
 80050ce:	f7fb f821 	bl	8000114 <__gnu_thumb1_case_shi>
 80050d2:	0016      	.short	0x0016
 80050d4:	fff6001f 	.word	0xfff6001f
 80050d8:	fff6fff6 	.word	0xfff6fff6
 80050dc:	001ffff6 	.word	0x001ffff6
 80050e0:	fff6fff6 	.word	0xfff6fff6
 80050e4:	fff6fff6 	.word	0xfff6fff6
 80050e8:	003600a8 	.word	0x003600a8
 80050ec:	fff6009a 	.word	0xfff6009a
 80050f0:	00b9fff6 	.word	0x00b9fff6
 80050f4:	0036fff6 	.word	0x0036fff6
 80050f8:	fff6fff6 	.word	0xfff6fff6
 80050fc:	009e      	.short	0x009e
 80050fe:	0026      	movs	r6, r4
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	3642      	adds	r6, #66	; 0x42
 8005104:	1d11      	adds	r1, r2, #4
 8005106:	6019      	str	r1, [r3, #0]
 8005108:	6813      	ldr	r3, [r2, #0]
 800510a:	7033      	strb	r3, [r6, #0]
 800510c:	2301      	movs	r3, #1
 800510e:	e0a7      	b.n	8005260 <_printf_i+0x1cc>
 8005110:	6808      	ldr	r0, [r1, #0]
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	1d0a      	adds	r2, r1, #4
 8005116:	0605      	lsls	r5, r0, #24
 8005118:	d50b      	bpl.n	8005132 <_printf_i+0x9e>
 800511a:	680d      	ldr	r5, [r1, #0]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	2d00      	cmp	r5, #0
 8005120:	da03      	bge.n	800512a <_printf_i+0x96>
 8005122:	232d      	movs	r3, #45	; 0x2d
 8005124:	9a04      	ldr	r2, [sp, #16]
 8005126:	426d      	negs	r5, r5
 8005128:	7013      	strb	r3, [r2, #0]
 800512a:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <_printf_i+0x21c>)
 800512c:	270a      	movs	r7, #10
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	e01b      	b.n	800516a <_printf_i+0xd6>
 8005132:	680d      	ldr	r5, [r1, #0]
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	0641      	lsls	r1, r0, #25
 8005138:	d5f1      	bpl.n	800511e <_printf_i+0x8a>
 800513a:	b22d      	sxth	r5, r5
 800513c:	e7ef      	b.n	800511e <_printf_i+0x8a>
 800513e:	680d      	ldr	r5, [r1, #0]
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	1d08      	adds	r0, r1, #4
 8005144:	6018      	str	r0, [r3, #0]
 8005146:	062e      	lsls	r6, r5, #24
 8005148:	d501      	bpl.n	800514e <_printf_i+0xba>
 800514a:	680d      	ldr	r5, [r1, #0]
 800514c:	e003      	b.n	8005156 <_printf_i+0xc2>
 800514e:	066d      	lsls	r5, r5, #25
 8005150:	d5fb      	bpl.n	800514a <_printf_i+0xb6>
 8005152:	680d      	ldr	r5, [r1, #0]
 8005154:	b2ad      	uxth	r5, r5
 8005156:	4b56      	ldr	r3, [pc, #344]	; (80052b0 <_printf_i+0x21c>)
 8005158:	2708      	movs	r7, #8
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	2a6f      	cmp	r2, #111	; 0x6f
 800515e:	d000      	beq.n	8005162 <_printf_i+0xce>
 8005160:	3702      	adds	r7, #2
 8005162:	0023      	movs	r3, r4
 8005164:	2200      	movs	r2, #0
 8005166:	3343      	adds	r3, #67	; 0x43
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	6863      	ldr	r3, [r4, #4]
 800516c:	60a3      	str	r3, [r4, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	db03      	blt.n	800517a <_printf_i+0xe6>
 8005172:	2204      	movs	r2, #4
 8005174:	6821      	ldr	r1, [r4, #0]
 8005176:	4391      	bics	r1, r2
 8005178:	6021      	str	r1, [r4, #0]
 800517a:	2d00      	cmp	r5, #0
 800517c:	d102      	bne.n	8005184 <_printf_i+0xf0>
 800517e:	9e04      	ldr	r6, [sp, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00c      	beq.n	800519e <_printf_i+0x10a>
 8005184:	9e04      	ldr	r6, [sp, #16]
 8005186:	0028      	movs	r0, r5
 8005188:	0039      	movs	r1, r7
 800518a:	f7fb f853 	bl	8000234 <__aeabi_uidivmod>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	3e01      	subs	r6, #1
 8005192:	5c5b      	ldrb	r3, [r3, r1]
 8005194:	7033      	strb	r3, [r6, #0]
 8005196:	002b      	movs	r3, r5
 8005198:	0005      	movs	r5, r0
 800519a:	429f      	cmp	r7, r3
 800519c:	d9f3      	bls.n	8005186 <_printf_i+0xf2>
 800519e:	2f08      	cmp	r7, #8
 80051a0:	d109      	bne.n	80051b6 <_printf_i+0x122>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	07db      	lsls	r3, r3, #31
 80051a6:	d506      	bpl.n	80051b6 <_printf_i+0x122>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	6922      	ldr	r2, [r4, #16]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	dc02      	bgt.n	80051b6 <_printf_i+0x122>
 80051b0:	2330      	movs	r3, #48	; 0x30
 80051b2:	3e01      	subs	r6, #1
 80051b4:	7033      	strb	r3, [r6, #0]
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	1b9b      	subs	r3, r3, r6
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	9b07      	ldr	r3, [sp, #28]
 80051be:	0021      	movs	r1, r4
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	9805      	ldr	r0, [sp, #20]
 80051c4:	9b06      	ldr	r3, [sp, #24]
 80051c6:	aa09      	add	r2, sp, #36	; 0x24
 80051c8:	f7ff fef4 	bl	8004fb4 <_printf_common>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d14c      	bne.n	800526a <_printf_i+0x1d6>
 80051d0:	2001      	movs	r0, #1
 80051d2:	4240      	negs	r0, r0
 80051d4:	b00b      	add	sp, #44	; 0x2c
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	3145      	adds	r1, #69	; 0x45
 80051da:	700a      	strb	r2, [r1, #0]
 80051dc:	4a34      	ldr	r2, [pc, #208]	; (80052b0 <_printf_i+0x21c>)
 80051de:	9203      	str	r2, [sp, #12]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	6821      	ldr	r1, [r4, #0]
 80051e4:	ca20      	ldmia	r2!, {r5}
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	0608      	lsls	r0, r1, #24
 80051ea:	d516      	bpl.n	800521a <_printf_i+0x186>
 80051ec:	07cb      	lsls	r3, r1, #31
 80051ee:	d502      	bpl.n	80051f6 <_printf_i+0x162>
 80051f0:	2320      	movs	r3, #32
 80051f2:	4319      	orrs	r1, r3
 80051f4:	6021      	str	r1, [r4, #0]
 80051f6:	2710      	movs	r7, #16
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	d1b2      	bne.n	8005162 <_printf_i+0xce>
 80051fc:	2320      	movs	r3, #32
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	439a      	bics	r2, r3
 8005202:	6022      	str	r2, [r4, #0]
 8005204:	e7ad      	b.n	8005162 <_printf_i+0xce>
 8005206:	2220      	movs	r2, #32
 8005208:	6809      	ldr	r1, [r1, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	0022      	movs	r2, r4
 8005210:	2178      	movs	r1, #120	; 0x78
 8005212:	3245      	adds	r2, #69	; 0x45
 8005214:	7011      	strb	r1, [r2, #0]
 8005216:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <_printf_i+0x220>)
 8005218:	e7e1      	b.n	80051de <_printf_i+0x14a>
 800521a:	0648      	lsls	r0, r1, #25
 800521c:	d5e6      	bpl.n	80051ec <_printf_i+0x158>
 800521e:	b2ad      	uxth	r5, r5
 8005220:	e7e4      	b.n	80051ec <_printf_i+0x158>
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	680d      	ldr	r5, [r1, #0]
 8005226:	1d10      	adds	r0, r2, #4
 8005228:	6949      	ldr	r1, [r1, #20]
 800522a:	6018      	str	r0, [r3, #0]
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	062e      	lsls	r6, r5, #24
 8005230:	d501      	bpl.n	8005236 <_printf_i+0x1a2>
 8005232:	6019      	str	r1, [r3, #0]
 8005234:	e002      	b.n	800523c <_printf_i+0x1a8>
 8005236:	066d      	lsls	r5, r5, #25
 8005238:	d5fb      	bpl.n	8005232 <_printf_i+0x19e>
 800523a:	8019      	strh	r1, [r3, #0]
 800523c:	2300      	movs	r3, #0
 800523e:	9e04      	ldr	r6, [sp, #16]
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	e7bb      	b.n	80051bc <_printf_i+0x128>
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	1d11      	adds	r1, r2, #4
 8005248:	6019      	str	r1, [r3, #0]
 800524a:	6816      	ldr	r6, [r2, #0]
 800524c:	2100      	movs	r1, #0
 800524e:	0030      	movs	r0, r6
 8005250:	6862      	ldr	r2, [r4, #4]
 8005252:	f000 f831 	bl	80052b8 <memchr>
 8005256:	2800      	cmp	r0, #0
 8005258:	d001      	beq.n	800525e <_printf_i+0x1ca>
 800525a:	1b80      	subs	r0, r0, r6
 800525c:	6060      	str	r0, [r4, #4]
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	2300      	movs	r3, #0
 8005264:	9a04      	ldr	r2, [sp, #16]
 8005266:	7013      	strb	r3, [r2, #0]
 8005268:	e7a8      	b.n	80051bc <_printf_i+0x128>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	0032      	movs	r2, r6
 800526e:	9906      	ldr	r1, [sp, #24]
 8005270:	9805      	ldr	r0, [sp, #20]
 8005272:	9d07      	ldr	r5, [sp, #28]
 8005274:	47a8      	blx	r5
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	d0aa      	beq.n	80051d0 <_printf_i+0x13c>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	079b      	lsls	r3, r3, #30
 800527e:	d415      	bmi.n	80052ac <_printf_i+0x218>
 8005280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005282:	68e0      	ldr	r0, [r4, #12]
 8005284:	4298      	cmp	r0, r3
 8005286:	daa5      	bge.n	80051d4 <_printf_i+0x140>
 8005288:	0018      	movs	r0, r3
 800528a:	e7a3      	b.n	80051d4 <_printf_i+0x140>
 800528c:	0022      	movs	r2, r4
 800528e:	2301      	movs	r3, #1
 8005290:	9906      	ldr	r1, [sp, #24]
 8005292:	9805      	ldr	r0, [sp, #20]
 8005294:	9e07      	ldr	r6, [sp, #28]
 8005296:	3219      	adds	r2, #25
 8005298:	47b0      	blx	r6
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	d098      	beq.n	80051d0 <_printf_i+0x13c>
 800529e:	3501      	adds	r5, #1
 80052a0:	68e3      	ldr	r3, [r4, #12]
 80052a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	42ab      	cmp	r3, r5
 80052a8:	dcf0      	bgt.n	800528c <_printf_i+0x1f8>
 80052aa:	e7e9      	b.n	8005280 <_printf_i+0x1ec>
 80052ac:	2500      	movs	r5, #0
 80052ae:	e7f7      	b.n	80052a0 <_printf_i+0x20c>
 80052b0:	08005655 	.word	0x08005655
 80052b4:	08005666 	.word	0x08005666

080052b8 <memchr>:
 80052b8:	b2c9      	uxtb	r1, r1
 80052ba:	1882      	adds	r2, r0, r2
 80052bc:	4290      	cmp	r0, r2
 80052be:	d101      	bne.n	80052c4 <memchr+0xc>
 80052c0:	2000      	movs	r0, #0
 80052c2:	4770      	bx	lr
 80052c4:	7803      	ldrb	r3, [r0, #0]
 80052c6:	428b      	cmp	r3, r1
 80052c8:	d0fb      	beq.n	80052c2 <memchr+0xa>
 80052ca:	3001      	adds	r0, #1
 80052cc:	e7f6      	b.n	80052bc <memchr+0x4>

080052ce <memcpy>:
 80052ce:	2300      	movs	r3, #0
 80052d0:	b510      	push	{r4, lr}
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d100      	bne.n	80052d8 <memcpy+0xa>
 80052d6:	bd10      	pop	{r4, pc}
 80052d8:	5ccc      	ldrb	r4, [r1, r3]
 80052da:	54c4      	strb	r4, [r0, r3]
 80052dc:	3301      	adds	r3, #1
 80052de:	e7f8      	b.n	80052d2 <memcpy+0x4>

080052e0 <memmove>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4288      	cmp	r0, r1
 80052e4:	d902      	bls.n	80052ec <memmove+0xc>
 80052e6:	188b      	adds	r3, r1, r2
 80052e8:	4298      	cmp	r0, r3
 80052ea:	d303      	bcc.n	80052f4 <memmove+0x14>
 80052ec:	2300      	movs	r3, #0
 80052ee:	e007      	b.n	8005300 <memmove+0x20>
 80052f0:	5c8b      	ldrb	r3, [r1, r2]
 80052f2:	5483      	strb	r3, [r0, r2]
 80052f4:	3a01      	subs	r2, #1
 80052f6:	d2fb      	bcs.n	80052f0 <memmove+0x10>
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	5ccc      	ldrb	r4, [r1, r3]
 80052fc:	54c4      	strb	r4, [r0, r3]
 80052fe:	3301      	adds	r3, #1
 8005300:	429a      	cmp	r2, r3
 8005302:	d1fa      	bne.n	80052fa <memmove+0x1a>
 8005304:	e7f8      	b.n	80052f8 <memmove+0x18>
	...

08005308 <_free_r>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	0005      	movs	r5, r0
 800530c:	2900      	cmp	r1, #0
 800530e:	d010      	beq.n	8005332 <_free_r+0x2a>
 8005310:	1f0c      	subs	r4, r1, #4
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	da00      	bge.n	800531a <_free_r+0x12>
 8005318:	18e4      	adds	r4, r4, r3
 800531a:	0028      	movs	r0, r5
 800531c:	f000 f918 	bl	8005550 <__malloc_lock>
 8005320:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <_free_r+0x90>)
 8005322:	6813      	ldr	r3, [r2, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <_free_r+0x2c>
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	6014      	str	r4, [r2, #0]
 800532c:	0028      	movs	r0, r5
 800532e:	f000 f917 	bl	8005560 <__malloc_unlock>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	42a3      	cmp	r3, r4
 8005336:	d908      	bls.n	800534a <_free_r+0x42>
 8005338:	6821      	ldr	r1, [r4, #0]
 800533a:	1860      	adds	r0, r4, r1
 800533c:	4283      	cmp	r3, r0
 800533e:	d1f3      	bne.n	8005328 <_free_r+0x20>
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	1841      	adds	r1, r0, r1
 8005346:	6021      	str	r1, [r4, #0]
 8005348:	e7ee      	b.n	8005328 <_free_r+0x20>
 800534a:	001a      	movs	r2, r3
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <_free_r+0x4e>
 8005352:	42a3      	cmp	r3, r4
 8005354:	d9f9      	bls.n	800534a <_free_r+0x42>
 8005356:	6811      	ldr	r1, [r2, #0]
 8005358:	1850      	adds	r0, r2, r1
 800535a:	42a0      	cmp	r0, r4
 800535c:	d10b      	bne.n	8005376 <_free_r+0x6e>
 800535e:	6820      	ldr	r0, [r4, #0]
 8005360:	1809      	adds	r1, r1, r0
 8005362:	1850      	adds	r0, r2, r1
 8005364:	6011      	str	r1, [r2, #0]
 8005366:	4283      	cmp	r3, r0
 8005368:	d1e0      	bne.n	800532c <_free_r+0x24>
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	1841      	adds	r1, r0, r1
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	6053      	str	r3, [r2, #4]
 8005374:	e7da      	b.n	800532c <_free_r+0x24>
 8005376:	42a0      	cmp	r0, r4
 8005378:	d902      	bls.n	8005380 <_free_r+0x78>
 800537a:	230c      	movs	r3, #12
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	e7d5      	b.n	800532c <_free_r+0x24>
 8005380:	6821      	ldr	r1, [r4, #0]
 8005382:	1860      	adds	r0, r4, r1
 8005384:	4283      	cmp	r3, r0
 8005386:	d103      	bne.n	8005390 <_free_r+0x88>
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	1841      	adds	r1, r0, r1
 800538e:	6021      	str	r1, [r4, #0]
 8005390:	6063      	str	r3, [r4, #4]
 8005392:	6054      	str	r4, [r2, #4]
 8005394:	e7ca      	b.n	800532c <_free_r+0x24>
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	20000368 	.word	0x20000368

0800539c <sbrk_aligned>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4e0f      	ldr	r6, [pc, #60]	; (80053dc <sbrk_aligned+0x40>)
 80053a0:	000d      	movs	r5, r1
 80053a2:	6831      	ldr	r1, [r6, #0]
 80053a4:	0004      	movs	r4, r0
 80053a6:	2900      	cmp	r1, #0
 80053a8:	d102      	bne.n	80053b0 <sbrk_aligned+0x14>
 80053aa:	f000 f8bf 	bl	800552c <_sbrk_r>
 80053ae:	6030      	str	r0, [r6, #0]
 80053b0:	0029      	movs	r1, r5
 80053b2:	0020      	movs	r0, r4
 80053b4:	f000 f8ba 	bl	800552c <_sbrk_r>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d00a      	beq.n	80053d2 <sbrk_aligned+0x36>
 80053bc:	2303      	movs	r3, #3
 80053be:	1cc5      	adds	r5, r0, #3
 80053c0:	439d      	bics	r5, r3
 80053c2:	42a8      	cmp	r0, r5
 80053c4:	d007      	beq.n	80053d6 <sbrk_aligned+0x3a>
 80053c6:	1a29      	subs	r1, r5, r0
 80053c8:	0020      	movs	r0, r4
 80053ca:	f000 f8af 	bl	800552c <_sbrk_r>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	d101      	bne.n	80053d6 <sbrk_aligned+0x3a>
 80053d2:	2501      	movs	r5, #1
 80053d4:	426d      	negs	r5, r5
 80053d6:	0028      	movs	r0, r5
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	2000036c 	.word	0x2000036c

080053e0 <_malloc_r>:
 80053e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e2:	2203      	movs	r2, #3
 80053e4:	1ccb      	adds	r3, r1, #3
 80053e6:	4393      	bics	r3, r2
 80053e8:	3308      	adds	r3, #8
 80053ea:	0006      	movs	r6, r0
 80053ec:	001f      	movs	r7, r3
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d232      	bcs.n	8005458 <_malloc_r+0x78>
 80053f2:	270c      	movs	r7, #12
 80053f4:	42b9      	cmp	r1, r7
 80053f6:	d831      	bhi.n	800545c <_malloc_r+0x7c>
 80053f8:	0030      	movs	r0, r6
 80053fa:	f000 f8a9 	bl	8005550 <__malloc_lock>
 80053fe:	4d32      	ldr	r5, [pc, #200]	; (80054c8 <_malloc_r+0xe8>)
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	001c      	movs	r4, r3
 8005404:	2c00      	cmp	r4, #0
 8005406:	d12e      	bne.n	8005466 <_malloc_r+0x86>
 8005408:	0039      	movs	r1, r7
 800540a:	0030      	movs	r0, r6
 800540c:	f7ff ffc6 	bl	800539c <sbrk_aligned>
 8005410:	0004      	movs	r4, r0
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d11e      	bne.n	8005454 <_malloc_r+0x74>
 8005416:	682c      	ldr	r4, [r5, #0]
 8005418:	0025      	movs	r5, r4
 800541a:	2d00      	cmp	r5, #0
 800541c:	d14a      	bne.n	80054b4 <_malloc_r+0xd4>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0029      	movs	r1, r5
 8005422:	18e3      	adds	r3, r4, r3
 8005424:	0030      	movs	r0, r6
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	f000 f880 	bl	800552c <_sbrk_r>
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	4283      	cmp	r3, r0
 8005430:	d143      	bne.n	80054ba <_malloc_r+0xda>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	3703      	adds	r7, #3
 8005436:	1aff      	subs	r7, r7, r3
 8005438:	2303      	movs	r3, #3
 800543a:	439f      	bics	r7, r3
 800543c:	3708      	adds	r7, #8
 800543e:	2f0c      	cmp	r7, #12
 8005440:	d200      	bcs.n	8005444 <_malloc_r+0x64>
 8005442:	270c      	movs	r7, #12
 8005444:	0039      	movs	r1, r7
 8005446:	0030      	movs	r0, r6
 8005448:	f7ff ffa8 	bl	800539c <sbrk_aligned>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d034      	beq.n	80054ba <_malloc_r+0xda>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	19df      	adds	r7, r3, r7
 8005454:	6027      	str	r7, [r4, #0]
 8005456:	e013      	b.n	8005480 <_malloc_r+0xa0>
 8005458:	2b00      	cmp	r3, #0
 800545a:	dacb      	bge.n	80053f4 <_malloc_r+0x14>
 800545c:	230c      	movs	r3, #12
 800545e:	2500      	movs	r5, #0
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	0028      	movs	r0, r5
 8005464:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	1bd1      	subs	r1, r2, r7
 800546a:	d420      	bmi.n	80054ae <_malloc_r+0xce>
 800546c:	290b      	cmp	r1, #11
 800546e:	d917      	bls.n	80054a0 <_malloc_r+0xc0>
 8005470:	19e2      	adds	r2, r4, r7
 8005472:	6027      	str	r7, [r4, #0]
 8005474:	42a3      	cmp	r3, r4
 8005476:	d111      	bne.n	800549c <_malloc_r+0xbc>
 8005478:	602a      	str	r2, [r5, #0]
 800547a:	6863      	ldr	r3, [r4, #4]
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	6053      	str	r3, [r2, #4]
 8005480:	0030      	movs	r0, r6
 8005482:	0025      	movs	r5, r4
 8005484:	f000 f86c 	bl	8005560 <__malloc_unlock>
 8005488:	2207      	movs	r2, #7
 800548a:	350b      	adds	r5, #11
 800548c:	1d23      	adds	r3, r4, #4
 800548e:	4395      	bics	r5, r2
 8005490:	1aea      	subs	r2, r5, r3
 8005492:	429d      	cmp	r5, r3
 8005494:	d0e5      	beq.n	8005462 <_malloc_r+0x82>
 8005496:	1b5b      	subs	r3, r3, r5
 8005498:	50a3      	str	r3, [r4, r2]
 800549a:	e7e2      	b.n	8005462 <_malloc_r+0x82>
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e7ec      	b.n	800547a <_malloc_r+0x9a>
 80054a0:	6862      	ldr	r2, [r4, #4]
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	d101      	bne.n	80054aa <_malloc_r+0xca>
 80054a6:	602a      	str	r2, [r5, #0]
 80054a8:	e7ea      	b.n	8005480 <_malloc_r+0xa0>
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	e7e8      	b.n	8005480 <_malloc_r+0xa0>
 80054ae:	0023      	movs	r3, r4
 80054b0:	6864      	ldr	r4, [r4, #4]
 80054b2:	e7a7      	b.n	8005404 <_malloc_r+0x24>
 80054b4:	002c      	movs	r4, r5
 80054b6:	686d      	ldr	r5, [r5, #4]
 80054b8:	e7af      	b.n	800541a <_malloc_r+0x3a>
 80054ba:	230c      	movs	r3, #12
 80054bc:	0030      	movs	r0, r6
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	f000 f84e 	bl	8005560 <__malloc_unlock>
 80054c4:	e7cd      	b.n	8005462 <_malloc_r+0x82>
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	20000368 	.word	0x20000368

080054cc <_realloc_r>:
 80054cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ce:	0007      	movs	r7, r0
 80054d0:	000e      	movs	r6, r1
 80054d2:	0014      	movs	r4, r2
 80054d4:	2900      	cmp	r1, #0
 80054d6:	d105      	bne.n	80054e4 <_realloc_r+0x18>
 80054d8:	0011      	movs	r1, r2
 80054da:	f7ff ff81 	bl	80053e0 <_malloc_r>
 80054de:	0005      	movs	r5, r0
 80054e0:	0028      	movs	r0, r5
 80054e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	d103      	bne.n	80054f0 <_realloc_r+0x24>
 80054e8:	f7ff ff0e 	bl	8005308 <_free_r>
 80054ec:	0025      	movs	r5, r4
 80054ee:	e7f7      	b.n	80054e0 <_realloc_r+0x14>
 80054f0:	f000 f83e 	bl	8005570 <_malloc_usable_size_r>
 80054f4:	9001      	str	r0, [sp, #4]
 80054f6:	4284      	cmp	r4, r0
 80054f8:	d803      	bhi.n	8005502 <_realloc_r+0x36>
 80054fa:	0035      	movs	r5, r6
 80054fc:	0843      	lsrs	r3, r0, #1
 80054fe:	42a3      	cmp	r3, r4
 8005500:	d3ee      	bcc.n	80054e0 <_realloc_r+0x14>
 8005502:	0021      	movs	r1, r4
 8005504:	0038      	movs	r0, r7
 8005506:	f7ff ff6b 	bl	80053e0 <_malloc_r>
 800550a:	1e05      	subs	r5, r0, #0
 800550c:	d0e8      	beq.n	80054e0 <_realloc_r+0x14>
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	0022      	movs	r2, r4
 8005512:	429c      	cmp	r4, r3
 8005514:	d900      	bls.n	8005518 <_realloc_r+0x4c>
 8005516:	001a      	movs	r2, r3
 8005518:	0031      	movs	r1, r6
 800551a:	0028      	movs	r0, r5
 800551c:	f7ff fed7 	bl	80052ce <memcpy>
 8005520:	0031      	movs	r1, r6
 8005522:	0038      	movs	r0, r7
 8005524:	f7ff fef0 	bl	8005308 <_free_r>
 8005528:	e7da      	b.n	80054e0 <_realloc_r+0x14>
	...

0800552c <_sbrk_r>:
 800552c:	2300      	movs	r3, #0
 800552e:	b570      	push	{r4, r5, r6, lr}
 8005530:	4d06      	ldr	r5, [pc, #24]	; (800554c <_sbrk_r+0x20>)
 8005532:	0004      	movs	r4, r0
 8005534:	0008      	movs	r0, r1
 8005536:	602b      	str	r3, [r5, #0]
 8005538:	f7fb fc5a 	bl	8000df0 <_sbrk>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d103      	bne.n	8005548 <_sbrk_r+0x1c>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d000      	beq.n	8005548 <_sbrk_r+0x1c>
 8005546:	6023      	str	r3, [r4, #0]
 8005548:	bd70      	pop	{r4, r5, r6, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	20000370 	.word	0x20000370

08005550 <__malloc_lock>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4802      	ldr	r0, [pc, #8]	; (800555c <__malloc_lock+0xc>)
 8005554:	f000 f814 	bl	8005580 <__retarget_lock_acquire_recursive>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	20000374 	.word	0x20000374

08005560 <__malloc_unlock>:
 8005560:	b510      	push	{r4, lr}
 8005562:	4802      	ldr	r0, [pc, #8]	; (800556c <__malloc_unlock+0xc>)
 8005564:	f000 f80d 	bl	8005582 <__retarget_lock_release_recursive>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	20000374 	.word	0x20000374

08005570 <_malloc_usable_size_r>:
 8005570:	1f0b      	subs	r3, r1, #4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1f18      	subs	r0, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	da01      	bge.n	800557e <_malloc_usable_size_r+0xe>
 800557a:	580b      	ldr	r3, [r1, r0]
 800557c:	18c0      	adds	r0, r0, r3
 800557e:	4770      	bx	lr

08005580 <__retarget_lock_acquire_recursive>:
 8005580:	4770      	bx	lr

08005582 <__retarget_lock_release_recursive>:
 8005582:	4770      	bx	lr

08005584 <_init>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr

08005590 <_fini>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr
