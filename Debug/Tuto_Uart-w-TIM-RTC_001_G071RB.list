
Tuto_Uart-w-TIM-RTC_001_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004078  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041bc  080041bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041c4  080041c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  080041d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080041d8  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143c9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285b  00000000  00000000  000343fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00036c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00037da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c98  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142a1  00000000  00000000  00052a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a774e  00000000  00000000  00066d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed0  00000000  00000000  0010e4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800411c 	.word	0x0800411c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800411c 	.word	0x0800411c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fb04 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f80c 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f92c 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 800062c:	f000 f90c 	bl	8000848 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f8bc 	bl	80007ac <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000634:	f000 f85a 	bl	80006ec <MX_RTC_Init>
  MX_TIM14_Init();
 8000638:	f000 f890 	bl	800075c <MX_TIM14_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x20>
	...

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b093      	sub	sp, #76	; 0x4c
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	2410      	movs	r4, #16
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	2338      	movs	r3, #56	; 0x38
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f003 fd5b 	bl	800410c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000656:	003b      	movs	r3, r7
 8000658:	0018      	movs	r0, r3
 800065a:	2310      	movs	r3, #16
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f003 fd54 	bl	800410c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	0018      	movs	r0, r3
 800066a:	f001 f80d 	bl	8001688 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066e:	f000 fffd 	bl	800166c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemClock_Config+0xa8>)
 8000674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <SystemClock_Config+0xa8>)
 8000678:	2118      	movs	r1, #24
 800067a:	438a      	bics	r2, r1
 800067c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2206      	movs	r2, #6
 8000682:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2201      	movs	r2, #1
 8000688:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2240      	movs	r2, #64	; 0x40
 800069c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 f83a 	bl	8001720 <HAL_RCC_OscConfig>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006b0:	f000 f916 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	003b      	movs	r3, r7
 80006b6:	2207      	movs	r2, #7
 80006b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	003b      	movs	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	003b      	movs	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	003b      	movs	r3, r7
 80006ce:	2100      	movs	r1, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fb3f 	bl	8001d54 <HAL_RCC_ClockConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006da:	f000 f901 	bl	80008e0 <Error_Handler>
  }
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b013      	add	sp, #76	; 0x4c
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_RTC_Init+0x68>)
 80006f2:	4a19      	ldr	r2, [pc, #100]	; (8000758 <MX_RTC_Init+0x6c>)
 80006f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_RTC_Init+0x68>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_RTC_Init+0x68>)
 80006fe:	227f      	movs	r2, #127	; 0x7f
 8000700:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_RTC_Init+0x68>)
 8000704:	22ff      	movs	r2, #255	; 0xff
 8000706:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_RTC_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_RTC_Init+0x68>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_RTC_Init+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_RTC_Init+0x68>)
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	05d2      	lsls	r2, r2, #23
 8000720:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_RTC_Init+0x68>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_RTC_Init+0x68>)
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fe74 	bl	8002418 <HAL_RTC_Init>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f8d4 	bl	80008e0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_RTC_Init+0x68>)
 800073a:	2204      	movs	r2, #4
 800073c:	2105      	movs	r1, #5
 800073e:	0018      	movs	r0, r3
 8000740:	f001 ffba 	bl	80026b8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f8ca 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	20000028 	.word	0x20000028
 8000758:	40002800 	.word	0x40002800

0800075c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_TIM14_Init+0x40>)
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_TIM14_Init+0x44>)
 8000764:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_TIM14_Init+0x40>)
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <MX_TIM14_Init+0x48>)
 800076a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_TIM14_Init+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000-1;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_TIM14_Init+0x40>)
 8000774:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <MX_TIM14_Init+0x4c>)
 8000776:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_TIM14_Init+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_TIM14_Init+0x40>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_TIM14_Init+0x40>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 f856 	bl	8002838 <HAL_TIM_Base_Init>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000790:	f000 f8a6 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000054 	.word	0x20000054
 80007a0:	40002000 	.word	0x40002000
 80007a4:	00003e7f 	.word	0x00003e7f
 80007a8:	00001387 	.word	0x00001387

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <MX_USART2_UART_Init+0x98>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007b8:	22e1      	movs	r2, #225	; 0xe1
 80007ba:	0252      	lsls	r2, r2, #9
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fa68 	bl	8002ccc <HAL_UART_Init>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 f86e 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x94>)
 8000806:	2100      	movs	r1, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f003 fb7b 	bl	8003f04 <HAL_UARTEx_SetTxFifoThreshold>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f865 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_USART2_UART_Init+0x94>)
 8000818:	2100      	movs	r1, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f003 fbb2 	bl	8003f84 <HAL_UARTEx_SetRxFifoThreshold>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f85c 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x94>)
 800082a:	0018      	movs	r0, r3
 800082c:	f003 fb30 	bl	8003e90 <HAL_UARTEx_DisableFifoMode>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f854 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	200000a0 	.word	0x200000a0
 8000844:	40004400 	.word	0x40004400

08000848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_DMA_Init+0x38>)
 8000850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_DMA_Init+0x38>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	639a      	str	r2, [r3, #56]	; 0x38
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_DMA_Init+0x38>)
 800085c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2009      	movs	r0, #9
 800086c:	f000 fb10 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000870:	2009      	movs	r0, #9
 8000872:	f000 fb22 	bl	8000eba <HAL_NVIC_EnableIRQ>

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_GPIO_Init+0x58>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_GPIO_Init+0x58>)
 8000890:	2104      	movs	r1, #4
 8000892:	430a      	orrs	r2, r1
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_GPIO_Init+0x58>)
 8000898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089a:	2204      	movs	r2, #4
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_GPIO_Init+0x58>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_GPIO_Init+0x58>)
 80008a8:	2120      	movs	r1, #32
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_GPIO_Init+0x58>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b2:	2220      	movs	r2, #32
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_GPIO_Init+0x58>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_GPIO_Init+0x58>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MX_GPIO_Init+0x58>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b004      	add	sp, #16
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	641a      	str	r2, [r3, #64]	; 0x40
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0549      	lsls	r1, r1, #21
 8000914:	430a      	orrs	r2, r1
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_MspInit+0x44>)
 800091a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	055b      	lsls	r3, r3, #21
 8000920:	4013      	ands	r3, r2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b091      	sub	sp, #68	; 0x44
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	240c      	movs	r4, #12
 800093e:	193b      	adds	r3, r7, r4
 8000940:	0018      	movs	r0, r3
 8000942:	2334      	movs	r3, #52	; 0x34
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f003 fbe0 	bl	800410c <memset>
  if(hrtc->Instance==RTC)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_RTC_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12c      	bne.n	80009b0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	0292      	lsls	r2, r2, #10
 800095c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	f001 fb9d 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000972:	f7ff ffb5 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_RTC_MspInit+0x88>)
 8000978:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_RTC_MspInit+0x88>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0209      	lsls	r1, r1, #8
 8000980:	430a      	orrs	r2, r1
 8000982:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_RTC_MspInit+0x88>)
 8000986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_RTC_MspInit+0x88>)
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	00c9      	lsls	r1, r1, #3
 800098e:	430a      	orrs	r2, r1
 8000990:	63da      	str	r2, [r3, #60]	; 0x3c
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_RTC_MspInit+0x88>)
 8000994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4013      	ands	r3, r2
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2002      	movs	r0, #2
 80009a6:	f000 fa73 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80009aa:	2002      	movs	r0, #2
 80009ac:	f000 fa85 	bl	8000eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b011      	add	sp, #68	; 0x44
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	40002800 	.word	0x40002800
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_TIM_Base_MspInit+0x48>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d115      	bne.n	80009fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_TIM_Base_MspInit+0x4c>)
 80009d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_TIM_Base_MspInit+0x4c>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0209      	lsls	r1, r1, #8
 80009dc:	430a      	orrs	r2, r1
 80009de:	641a      	str	r2, [r3, #64]	; 0x40
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_TIM_Base_MspInit+0x4c>)
 80009e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2013      	movs	r0, #19
 80009f4:	f000 fa4c 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80009f8:	2013      	movs	r0, #19
 80009fa:	f000 fa5e 	bl	8000eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b004      	add	sp, #16
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40002000 	.word	0x40002000
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b097      	sub	sp, #92	; 0x5c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	2344      	movs	r3, #68	; 0x44
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f003 fb72 	bl	800410c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	2410      	movs	r4, #16
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2334      	movs	r3, #52	; 0x34
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f003 fb6a 	bl	800410c <memset>
  if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a3b      	ldr	r2, [pc, #236]	; (8000b2c <HAL_UART_MspInit+0x11c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d170      	bne.n	8000b24 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2202      	movs	r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fb29 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a5a:	f7ff ff41 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0289      	lsls	r1, r1, #10
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <HAL_UART_MspInit+0x120>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_STLK_TX_Pin|USART2_STLK_RX_Pin;
 8000a92:	2144      	movs	r1, #68	; 0x44
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2201      	movs	r2, #1
 8000ab0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	187a      	adds	r2, r7, r1
 8000ab4:	23a0      	movs	r3, #160	; 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fc72 	bl	80013a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_UART_MspInit+0x128>)
 8000ac4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ac8:	2234      	movs	r2, #52	; 0x34
 8000aca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 f9fb 	bl	8000ef4 <HAL_DMA_Init>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000b02:	f7ff feed 	bl	80008e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000b0c:	505a      	str	r2, [r3, r1]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_UART_MspInit+0x124>)
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	201c      	movs	r0, #28
 8000b1a:	f000 f9b9 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b1e:	201c      	movs	r0, #28
 8000b20:	f000 f9cb 	bl	8000eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b017      	add	sp, #92	; 0x5c
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	20000134 	.word	0x20000134
 8000b38:	40020008 	.word	0x40020008

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f8ce 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <RTC_TAMP_IRQHandler+0x14>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fe3a 	bl	80027ec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	20000028 	.word	0x20000028

08000b84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <DMA1_Channel1_IRQHandler+0x14>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fb08 	bl	80011a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000134 	.word	0x20000134

08000b9c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <TIM14_IRQHandler+0x14>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fea0 	bl	80028e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000054 	.word	0x20000054

08000bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <USART2_IRQHandler+0x14>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 f8dc 	bl	8002d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	200000a0 	.word	0x200000a0

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bdc:	f7ff fff6 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c06:	f003 fa5d 	bl	80040c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c0a:	f7ff fd07 	bl	800061c <main>

08000c0e <LoopForever>:

LoopForever:
  b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   r0, =_estack
 8000c10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c1c:	080041cc 	.word	0x080041cc
  ldr r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c24:	20000194 	.word	0x20000194

08000c28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_COMP_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x3c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Init+0x3c>)
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	0049      	lsls	r1, r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f810 	bl	8000c6c <HAL_InitTick>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e001      	b.n	8000c5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe48 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40022000 	.word	0x40022000

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <HAL_InitTick+0x88>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d02b      	beq.n	8000cdc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_InitTick+0x8c>)
 8000c86:	681c      	ldr	r4, [r3, #0]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_InitTick+0x88>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	23fa      	movs	r3, #250	; 0xfa
 8000c90:	0098      	lsls	r0, r3, #2
 8000c92:	f7ff fa37 	bl	8000104 <__udivsi3>
 8000c96:	0003      	movs	r3, r0
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0020      	movs	r0, r4
 8000c9c:	f7ff fa32 	bl	8000104 <__udivsi3>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f919 	bl	8000eda <HAL_SYSTICK_Config>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d112      	bne.n	8000cd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d80a      	bhi.n	8000cc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 f8e8 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_InitTick+0x90>)
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e00d      	b.n	8000ce4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e008      	b.n	8000ce4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e003      	b.n	8000ce4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b005      	add	sp, #20
 8000cf0:	bd90      	pop	{r4, r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	18d2      	adds	r2, r2, r3
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_IncTick+0x20>)
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000190 	.word	0x20000190

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000190 	.word	0x20000190

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4a:	d809      	bhi.n	8000d60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	001a      	movs	r2, r3
 8000d52:	231f      	movs	r3, #31
 8000d54:	401a      	ands	r2, r3
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_EnableIRQ+0x30>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4091      	lsls	r1, r2
 8000d5c:	000a      	movs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d80:	d828      	bhi.n	8000dd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	33c0      	adds	r3, #192	; 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dd2:	e031      	b.n	8000e38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	230f      	movs	r3, #15
 8000dde:	400b      	ands	r3, r1
 8000de0:	3b08      	subs	r3, #8
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001c      	movs	r4, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	3306      	adds	r3, #6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	045b      	lsls	r3, r3, #17
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d301      	bcc.n	8000e60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e010      	b.n	8000e82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SysTick_Config+0x44>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff7c 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x44>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x44>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	1c02      	adds	r2, r0, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ff33 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ffaf 	bl	8000e48 <SysTick_Config>
 8000eea:	0003      	movs	r3, r0
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e077      	b.n	8000ff6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <HAL_DMA_Init+0x10c>)
 8000f0c:	4694      	mov	ip, r2
 8000f0e:	4463      	add	r3, ip
 8000f10:	2114      	movs	r1, #20
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff f8f6 	bl	8000104 <__udivsi3>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	009a      	lsls	r2, r3, #2
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2225      	movs	r2, #37	; 0x25
 8000f24:	2102      	movs	r1, #2
 8000f26:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4934      	ldr	r1, [pc, #208]	; (8001004 <HAL_DMA_Init+0x110>)
 8000f34:	400a      	ands	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6819      	ldr	r1, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f000 f9c7 	bl	8001304 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	01db      	lsls	r3, r3, #7
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d102      	bne.n	8000f88 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f90:	213f      	movs	r1, #63	; 0x3f
 8000f92:	400a      	ands	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f9e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d011      	beq.n	8000fcc <HAL_DMA_Init+0xd8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d80d      	bhi.n	8000fcc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 f9d2 	bl	800135c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	e008      	b.n	8000fde <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2225      	movs	r2, #37	; 0x25
 8000fe8:	2101      	movs	r1, #1
 8000fea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2224      	movs	r2, #36	; 0x24
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	bffdfff8 	.word	0xbffdfff8
 8001004:	ffff800f 	.word	0xffff800f

08001008 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e050      	b.n	80010bc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2225      	movs	r2, #37	; 0x25
 800101e:	5c9b      	ldrb	r3, [r3, r2]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d008      	beq.n	8001038 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2204      	movs	r2, #4
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2224      	movs	r2, #36	; 0x24
 8001030:	2100      	movs	r1, #0
 8001032:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e041      	b.n	80010bc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	210e      	movs	r1, #14
 8001044:	438a      	bics	r2, r1
 8001046:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	491c      	ldr	r1, [pc, #112]	; (80010c4 <HAL_DMA_Abort+0xbc>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2101      	movs	r1, #1
 8001064:	438a      	bics	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_DMA_Abort+0xc0>)
 800106a:	6859      	ldr	r1, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	221c      	movs	r2, #28
 8001072:	4013      	ands	r3, r2
 8001074:	2201      	movs	r2, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_DMA_Abort+0xc0>)
 800107a:	430a      	orrs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001086:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <HAL_DMA_Abort+0xbc>)
 800109c:	400a      	ands	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80010a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2225      	movs	r2, #37	; 0x25
 80010ae:	2101      	movs	r1, #1
 80010b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2224      	movs	r2, #36	; 0x24
 80010b6:	2100      	movs	r1, #0
 80010b8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	fffffeff 	.word	0xfffffeff
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d4:	210f      	movs	r1, #15
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2225      	movs	r2, #37	; 0x25
 80010e0:	5c9b      	ldrb	r3, [r3, r2]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d006      	beq.n	80010f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2204      	movs	r2, #4
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e049      	b.n	800118a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	210e      	movs	r1, #14
 8001102:	438a      	bics	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	438a      	bics	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	491d      	ldr	r1, [pc, #116]	; (8001198 <HAL_DMA_Abort_IT+0xcc>)
 8001122:	400a      	ands	r2, r1
 8001124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_DMA_Abort_IT+0xd0>)
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	221c      	movs	r2, #28
 8001130:	4013      	ands	r3, r2
 8001132:	2201      	movs	r2, #1
 8001134:	409a      	lsls	r2, r3
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_DMA_Abort_IT+0xd0>)
 8001138:	430a      	orrs	r2, r1
 800113a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00c      	beq.n	8001168 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001158:	490f      	ldr	r1, [pc, #60]	; (8001198 <HAL_DMA_Abort_IT+0xcc>)
 800115a:	400a      	ands	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2225      	movs	r2, #37	; 0x25
 800116c:	2101      	movs	r1, #1
 800116e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2224      	movs	r2, #36	; 0x24
 8001174:	2100      	movs	r1, #0
 8001176:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	0010      	movs	r0, r2
 8001188:	4798      	blx	r3
    }
  }
  return status;
 800118a:	230f      	movs	r3, #15
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b004      	add	sp, #16
 8001196:	bd80      	pop	{r7, pc}
 8001198:	fffffeff 	.word	0xfffffeff
 800119c:	40020000 	.word	0x40020000

080011a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80011a8:	4b55      	ldr	r3, [pc, #340]	; (8001300 <HAL_DMA_IRQHandler+0x160>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	221c      	movs	r2, #28
 80011bc:	4013      	ands	r3, r2
 80011be:	2204      	movs	r2, #4
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4013      	ands	r3, r2
 80011c8:	d027      	beq.n	800121a <HAL_DMA_IRQHandler+0x7a>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2204      	movs	r2, #4
 80011ce:	4013      	ands	r3, r2
 80011d0:	d023      	beq.n	800121a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2220      	movs	r2, #32
 80011da:	4013      	ands	r3, r2
 80011dc:	d107      	bne.n	80011ee <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2104      	movs	r1, #4
 80011ea:	438a      	bics	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80011ee:	4b44      	ldr	r3, [pc, #272]	; (8001300 <HAL_DMA_IRQHandler+0x160>)
 80011f0:	6859      	ldr	r1, [r3, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	221c      	movs	r2, #28
 80011f8:	4013      	ands	r3, r2
 80011fa:	2204      	movs	r2, #4
 80011fc:	409a      	lsls	r2, r3
 80011fe:	4b40      	ldr	r3, [pc, #256]	; (8001300 <HAL_DMA_IRQHandler+0x160>)
 8001200:	430a      	orrs	r2, r1
 8001202:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <HAL_DMA_IRQHandler+0x6e>
 800120c:	e073      	b.n	80012f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	0010      	movs	r0, r2
 8001216:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001218:	e06d      	b.n	80012f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	221c      	movs	r2, #28
 8001220:	4013      	ands	r3, r2
 8001222:	2202      	movs	r2, #2
 8001224:	409a      	lsls	r2, r3
 8001226:	0013      	movs	r3, r2
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	d02e      	beq.n	800128c <HAL_DMA_IRQHandler+0xec>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d02a      	beq.n	800128c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2220      	movs	r2, #32
 800123e:	4013      	ands	r3, r2
 8001240:	d10b      	bne.n	800125a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	210a      	movs	r1, #10
 800124e:	438a      	bics	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2225      	movs	r2, #37	; 0x25
 8001256:	2101      	movs	r1, #1
 8001258:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_DMA_IRQHandler+0x160>)
 800125c:	6859      	ldr	r1, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	221c      	movs	r2, #28
 8001264:	4013      	ands	r3, r2
 8001266:	2202      	movs	r2, #2
 8001268:	409a      	lsls	r2, r3
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_DMA_IRQHandler+0x160>)
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2224      	movs	r2, #36	; 0x24
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d03a      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	0010      	movs	r0, r2
 8001288:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800128a:	e034      	b.n	80012f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	221c      	movs	r2, #28
 8001292:	4013      	ands	r3, r2
 8001294:	2208      	movs	r2, #8
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	d02b      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x158>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2208      	movs	r2, #8
 80012a4:	4013      	ands	r3, r2
 80012a6:	d027      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	210e      	movs	r1, #14
 80012b4:	438a      	bics	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_DMA_IRQHandler+0x160>)
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	221c      	movs	r2, #28
 80012c2:	4013      	ands	r3, r2
 80012c4:	2201      	movs	r2, #1
 80012c6:	409a      	lsls	r2, r3
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_DMA_IRQHandler+0x160>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2225      	movs	r2, #37	; 0x25
 80012d8:	2101      	movs	r1, #1
 80012da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2224      	movs	r2, #36	; 0x24
 80012e0:	2100      	movs	r1, #0
 80012e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	0010      	movs	r0, r2
 80012f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46c0      	nop			; (mov r8, r8)
}
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40020000 	.word	0x40020000

08001304 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001314:	4694      	mov	ip, r2
 8001316:	4463      	add	r3, ip
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	001a      	movs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	001a      	movs	r2, r3
 8001326:	23ff      	movs	r3, #255	; 0xff
 8001328:	4013      	ands	r3, r2
 800132a:	3b08      	subs	r3, #8
 800132c:	2114      	movs	r1, #20
 800132e:	0018      	movs	r0, r3
 8001330:	f7fe fee8 	bl	8000104 <__udivsi3>
 8001334:	0003      	movs	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800133c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	221f      	movs	r2, #31
 8001342:	4013      	ands	r3, r2
 8001344:	2201      	movs	r2, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b004      	add	sp, #16
 8001352:	bd80      	pop	{r7, pc}
 8001354:	10008200 	.word	0x10008200
 8001358:	40020880 	.word	0x40020880

0800135c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	223f      	movs	r2, #63	; 0x3f
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001372:	4694      	mov	ip, r2
 8001374:	4463      	add	r3, ip
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	001a      	movs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001382:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3b01      	subs	r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b004      	add	sp, #16
 800139a:	bd80      	pop	{r7, pc}
 800139c:	1000823f 	.word	0x1000823f
 80013a0:	40020940 	.word	0x40020940

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b2:	e147      	b.n	8001644 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2101      	movs	r1, #1
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4091      	lsls	r1, r2
 80013be:	000a      	movs	r2, r1
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d100      	bne.n	80013cc <HAL_GPIO_Init+0x28>
 80013ca:	e138      	b.n	800163e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d005      	beq.n	80013e4 <HAL_GPIO_Init+0x40>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d130      	bne.n	8001446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	409a      	lsls	r2, r3
 80013f2:	0013      	movs	r3, r2
 80013f4:	43da      	mvns	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	0013      	movs	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141a:	2201      	movs	r2, #1
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	2201      	movs	r2, #1
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	4013      	ands	r3, r2
 800144e:	2b03      	cmp	r3, #3
 8001450:	d017      	beq.n	8001482 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	4013      	ands	r3, r2
 800148a:	2b02      	cmp	r3, #2
 800148c:	d123      	bne.n	80014d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	58d3      	ldr	r3, [r2, r3]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2207      	movs	r2, #7
 80014a0:	4013      	ands	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2107      	movs	r1, #7
 80014ba:	400b      	ands	r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	6939      	ldr	r1, [r7, #16]
 80014d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	401a      	ands	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	029b      	lsls	r3, r3, #10
 8001512:	4013      	ands	r3, r2
 8001514:	d100      	bne.n	8001518 <HAL_GPIO_Init+0x174>
 8001516:	e092      	b.n	800163e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001518:	4a50      	ldr	r2, [pc, #320]	; (800165c <HAL_GPIO_Init+0x2b8>)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3318      	adds	r3, #24
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	589b      	ldr	r3, [r3, r2]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	220f      	movs	r2, #15
 8001530:	409a      	lsls	r2, r3
 8001532:	0013      	movs	r3, r2
 8001534:	43da      	mvns	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	23a0      	movs	r3, #160	; 0xa0
 8001540:	05db      	lsls	r3, r3, #23
 8001542:	429a      	cmp	r2, r3
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x1ca>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a45      	ldr	r2, [pc, #276]	; (8001660 <HAL_GPIO_Init+0x2bc>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x1c6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a44      	ldr	r2, [pc, #272]	; (8001664 <HAL_GPIO_Init+0x2c0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x1c2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a43      	ldr	r2, [pc, #268]	; (8001668 <HAL_GPIO_Init+0x2c4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x1be>
 800155e:	2303      	movs	r3, #3
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x1cc>
 8001562:	2305      	movs	r3, #5
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x1cc>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x1cc>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x1cc>
 800156e:	2300      	movs	r3, #0
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	2103      	movs	r1, #3
 8001574:	400a      	ands	r2, r1
 8001576:	00d2      	lsls	r2, r2, #3
 8001578:	4093      	lsls	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001580:	4936      	ldr	r1, [pc, #216]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3318      	adds	r3, #24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	035b      	lsls	r3, r3, #13
 80015a6:	4013      	ands	r3, r2
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_GPIO_Init+0x2b8>)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_GPIO_Init+0x2b8>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43da      	mvns	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	039b      	lsls	r3, r3, #14
 80015d0:	4013      	ands	r3, r2
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_GPIO_Init+0x2b8>)
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <HAL_GPIO_Init+0x2b8>)
 80015e4:	2384      	movs	r3, #132	; 0x84
 80015e6:	58d3      	ldr	r3, [r2, r3]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43da      	mvns	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4013      	ands	r3, r2
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001608:	4914      	ldr	r1, [pc, #80]	; (800165c <HAL_GPIO_Init+0x2b8>)
 800160a:	2284      	movs	r2, #132	; 0x84
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	58d3      	ldr	r3, [r2, r3]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	025b      	lsls	r3, r3, #9
 800162a:	4013      	ands	r3, r2
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001636:	4909      	ldr	r1, [pc, #36]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	40da      	lsrs	r2, r3
 800164c:	1e13      	subs	r3, r2, #0
 800164e:	d000      	beq.n	8001652 <HAL_GPIO_Init+0x2ae>
 8001650:	e6b0      	b.n	80013b4 <HAL_GPIO_Init+0x10>
  }
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b006      	add	sp, #24
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021800 	.word	0x40021800
 8001660:	50000400 	.word	0x50000400
 8001664:	50000800 	.word	0x50000800
 8001668:	50000c00 	.word	0x50000c00

0800166c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	0049      	lsls	r1, r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40007000 	.word	0x40007000

08001688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d11f      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	0013      	movs	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4912      	ldr	r1, [pc, #72]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7fe fd22 	bl	8000104 <__udivsi3>
 80016c0:	0003      	movs	r3, r0
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c6:	e008      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e001      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e009      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	401a      	ands	r2, r3
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d0ed      	beq.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40007000 	.word	0x40007000
 80016fc:	fffff9ff 	.word	0xfffff9ff
 8001700:	20000000 	.word	0x20000000
 8001704:	000f4240 	.word	0x000f4240

08001708 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <LL_RCC_GetAPB1Prescaler+0x14>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	23e0      	movs	r3, #224	; 0xe0
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4013      	ands	r3, r2
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e2fe      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	d100      	bne.n	800173e <HAL_RCC_OscConfig+0x1e>
 800173c:	e07c      	b.n	8001838 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173e:	4bc3      	ldr	r3, [pc, #780]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2238      	movs	r2, #56	; 0x38
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001748:	4bc0      	ldr	r3, [pc, #768]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2203      	movs	r2, #3
 800174e:	4013      	ands	r3, r2
 8001750:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b10      	cmp	r3, #16
 8001756:	d102      	bne.n	800175e <HAL_RCC_OscConfig+0x3e>
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d002      	beq.n	8001764 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d10b      	bne.n	800177c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	4bb9      	ldr	r3, [pc, #740]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	029b      	lsls	r3, r3, #10
 800176c:	4013      	ands	r3, r2
 800176e:	d062      	beq.n	8001836 <HAL_RCC_OscConfig+0x116>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d15e      	bne.n	8001836 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e2d9      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x78>
 8001788:	4bb0      	ldr	r3, [pc, #704]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4baf      	ldr	r3, [pc, #700]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0249      	lsls	r1, r1, #9
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e020      	b.n	80017da <HAL_RCC_OscConfig+0xba>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	23a0      	movs	r3, #160	; 0xa0
 800179e:	02db      	lsls	r3, r3, #11
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10e      	bne.n	80017c2 <HAL_RCC_OscConfig+0xa2>
 80017a4:	4ba9      	ldr	r3, [pc, #676]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4ba8      	ldr	r3, [pc, #672]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	02c9      	lsls	r1, r1, #11
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	4ba6      	ldr	r3, [pc, #664]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4ba5      	ldr	r3, [pc, #660]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0249      	lsls	r1, r1, #9
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e00b      	b.n	80017da <HAL_RCC_OscConfig+0xba>
 80017c2:	4ba2      	ldr	r3, [pc, #648]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4ba1      	ldr	r3, [pc, #644]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017c8:	49a1      	ldr	r1, [pc, #644]	; (8001a50 <HAL_RCC_OscConfig+0x330>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	4b9f      	ldr	r3, [pc, #636]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b9e      	ldr	r3, [pc, #632]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80017d4:	499f      	ldr	r1, [pc, #636]	; (8001a54 <HAL_RCC_OscConfig+0x334>)
 80017d6:	400a      	ands	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d014      	beq.n	800180c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fa9f 	bl	8000d24 <HAL_GetTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fa9a 	bl	8000d24 <HAL_GetTick>
 80017f0:	0002      	movs	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e298      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	4b93      	ldr	r3, [pc, #588]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	029b      	lsls	r3, r3, #10
 8001806:	4013      	ands	r3, r2
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xcc>
 800180a:	e015      	b.n	8001838 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fa8a 	bl	8000d24 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001816:	f7ff fa85 	bl	8000d24 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e283      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001828:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	029b      	lsls	r3, r3, #10
 8001830:	4013      	ands	r3, r2
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0xf6>
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d100      	bne.n	8001844 <HAL_RCC_OscConfig+0x124>
 8001842:	e099      	b.n	8001978 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001844:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2238      	movs	r2, #56	; 0x38
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184e:	4b7f      	ldr	r3, [pc, #508]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2203      	movs	r2, #3
 8001854:	4013      	ands	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d102      	bne.n	8001864 <HAL_RCC_OscConfig+0x144>
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d002      	beq.n	800186a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d135      	bne.n	80018d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800186a:	4b78      	ldr	r3, [pc, #480]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4013      	ands	r3, r2
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x162>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e256      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4a74      	ldr	r2, [pc, #464]	; (8001a58 <HAL_RCC_OscConfig+0x338>)
 8001888:	4013      	ands	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	021a      	lsls	r2, r3, #8
 8001892:	4b6e      	ldr	r3, [pc, #440]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800189e:	4b6b      	ldr	r3, [pc, #428]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x33c>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018b2:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0adb      	lsrs	r3, r3, #11
 80018b8:	2207      	movs	r2, #7
 80018ba:	4013      	ands	r3, r2
 80018bc:	4a68      	ldr	r2, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x340>)
 80018be:	40da      	lsrs	r2, r3
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_OscConfig+0x344>)
 80018c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x348>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff f9cf 	bl	8000c6c <HAL_InitTick>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d051      	beq.n	8001976 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e22c      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d030      	beq.n	8001940 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018de:	4b5b      	ldr	r3, [pc, #364]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a5e      	ldr	r2, [pc, #376]	; (8001a5c <HAL_RCC_OscConfig+0x33c>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018f2:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0049      	lsls	r1, r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fa10 	bl	8000d24 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fa0b 	bl	8000d24 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e209      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4013      	ands	r3, r2
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a4a      	ldr	r2, [pc, #296]	; (8001a58 <HAL_RCC_OscConfig+0x338>)
 800192e:	4013      	ands	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	021a      	lsls	r2, r3, #8
 8001938:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001940:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001946:	4949      	ldr	r1, [pc, #292]	; (8001a6c <HAL_RCC_OscConfig+0x34c>)
 8001948:	400a      	ands	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f9ea 	bl	8000d24 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff f9e5 	bl	8000d24 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1e3      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4013      	ands	r3, r2
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x236>
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001976:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2208      	movs	r2, #8
 800197e:	4013      	ands	r3, r2
 8001980:	d047      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2238      	movs	r2, #56	; 0x38
 8001988:	4013      	ands	r3, r2
 800198a:	2b18      	cmp	r3, #24
 800198c:	d10a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	2202      	movs	r2, #2
 8001994:	4013      	ands	r3, r2
 8001996:	d03c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d138      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e1c5      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d019      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80019ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff f9b4 	bl	8000d24 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff f9af 	bl	8000d24 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1ad      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d0f1      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2a2>
 80019de:	e018      	b.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80019e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	438a      	bics	r2, r1
 80019ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f99a 	bl	8000d24 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff f995 	bl	8000d24 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e193      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d1f1      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2204      	movs	r2, #4
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d100      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2fe>
 8001a1c:	e0c6      	b.n	8001bac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	231f      	movs	r3, #31
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2238      	movs	r2, #56	; 0x38
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	d11e      	bne.n	8001a70 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_RCC_OscConfig+0x32c>)
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <HAL_RCC_OscConfig+0x31e>
 8001a3c:	e0b6      	b.n	8001bac <HAL_RCC_OscConfig+0x48c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d000      	beq.n	8001a48 <HAL_RCC_OscConfig+0x328>
 8001a46:	e0b1      	b.n	8001bac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e171      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	fffeffff 	.word	0xfffeffff
 8001a54:	fffbffff 	.word	0xfffbffff
 8001a58:	ffff80ff 	.word	0xffff80ff
 8001a5c:	ffffc7ff 	.word	0xffffc7ff
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a70:	4bb1      	ldr	r3, [pc, #708]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	055b      	lsls	r3, r3, #21
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x360>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x362>
 8001a80:	2300      	movs	r3, #0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d011      	beq.n	8001aaa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4bac      	ldr	r3, [pc, #688]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8a:	4bab      	ldr	r3, [pc, #684]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0549      	lsls	r1, r1, #21
 8001a90:	430a      	orrs	r2, r1
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a94:	4ba8      	ldr	r3, [pc, #672]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	055b      	lsls	r3, r3, #21
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001aa2:	231f      	movs	r3, #31
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aaa:	4ba4      	ldr	r3, [pc, #656]	; (8001d3c <HAL_RCC_OscConfig+0x61c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d11a      	bne.n	8001aec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab6:	4ba1      	ldr	r3, [pc, #644]	; (8001d3c <HAL_RCC_OscConfig+0x61c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4ba0      	ldr	r3, [pc, #640]	; (8001d3c <HAL_RCC_OscConfig+0x61c>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0049      	lsls	r1, r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f92e 	bl	8000d24 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff f929 	bl	8000d24 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e127      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	4b96      	ldr	r3, [pc, #600]	; (8001d3c <HAL_RCC_OscConfig+0x61c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3e2>
 8001af4:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001af6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af8:	4b8f      	ldr	r3, [pc, #572]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	430a      	orrs	r2, r1
 8001afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b00:	e01c      	b.n	8001b3c <HAL_RCC_OscConfig+0x41c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x404>
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b0e:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b10:	2104      	movs	r1, #4
 8001b12:	430a      	orrs	r2, r1
 8001b14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b16:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b1a:	4b87      	ldr	r3, [pc, #540]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0x41c>
 8001b24:	4b84      	ldr	r3, [pc, #528]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b28:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b34:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b36:	2104      	movs	r1, #4
 8001b38:	438a      	bics	r2, r1
 8001b3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d014      	beq.n	8001b6e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f8ee 	bl	8000d24 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4c:	e009      	b.n	8001b62 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff f8e9 	bl	8000d24 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	4a79      	ldr	r2, [pc, #484]	; (8001d40 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0e6      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b62:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x42e>
 8001b6c:	e013      	b.n	8001b96 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6e:	f7ff f8d9 	bl	8000d24 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b76:	e009      	b.n	8001b8c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7ff f8d4 	bl	8000d24 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x620>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0d1      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b96:	231f      	movs	r3, #31
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba4:	4b64      	ldr	r3, [pc, #400]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001ba6:	4967      	ldr	r1, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x624>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d100      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x496>
 8001bb4:	e0bb      	b.n	8001d2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb6:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2238      	movs	r2, #56	; 0x38
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d100      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4a4>
 8001bc2:	e07b      	b.n	8001cbc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d156      	bne.n	8001c7a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	495d      	ldr	r1, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x628>)
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f8a4 	bl	8000d24 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f89f 	bl	8000d24 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e09d      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	049b      	lsls	r3, r3, #18
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <HAL_RCC_OscConfig+0x62c>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1a      	ldr	r2, [r3, #32]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	4b42      	ldr	r3, [pc, #264]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0449      	lsls	r1, r1, #17
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	0549      	lsls	r1, r1, #21
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f868 	bl	8000d24 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff f863 	bl	8000d24 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e061      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	049b      	lsls	r3, r3, #18
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x53a>
 8001c78:	e059      	b.n	8001d2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001c80:	4931      	ldr	r1, [pc, #196]	; (8001d48 <HAL_RCC_OscConfig+0x628>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff f84d 	bl	8000d24 <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f848 	bl	8000d24 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e046      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	049b      	lsls	r3, r3, #18
 8001caa:	4013      	ands	r3, r2
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001cb4:	4926      	ldr	r1, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x630>)
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	e038      	b.n	8001d2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e033      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x618>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d126      	bne.n	8001d2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2270      	movs	r2, #112	; 0x70
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d11f      	bne.n	8001d2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	23fe      	movs	r3, #254	; 0xfe
 8001cee:	01db      	lsls	r3, r3, #7
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d116      	bne.n	8001d2a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	23f8      	movs	r3, #248	; 0xf8
 8001d00:	039b      	lsls	r3, r3, #14
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d10e      	bne.n	8001d2a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	23e0      	movs	r3, #224	; 0xe0
 8001d10:	051b      	lsls	r3, r3, #20
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	0f5b      	lsrs	r3, r3, #29
 8001d20:	075a      	lsls	r2, r3, #29
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b008      	add	sp, #32
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	00001388 	.word	0x00001388
 8001d44:	efffffff 	.word	0xefffffff
 8001d48:	feffffff 	.word	0xfeffffff
 8001d4c:	11c1808c 	.word	0x11c1808c
 8001d50:	eefefffc 	.word	0xeefefffc

08001d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0e9      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	4013      	ands	r3, r2
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d91e      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d88:	f7fe ffcc 	bl	8000d24 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d92:	f7fe ffc7 	bl	8000d24 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	; (8001f48 <HAL_RCC_ClockConfig+0x1f4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0ca      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2207      	movs	r2, #7
 8001dac:	4013      	ands	r3, r2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1ee      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d015      	beq.n	8001dea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d006      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dc8:	4b60      	ldr	r3, [pc, #384]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b5f      	ldr	r3, [pc, #380]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001dce:	21e0      	movs	r1, #224	; 0xe0
 8001dd0:	01c9      	lsls	r1, r1, #7
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4a5d      	ldr	r2, [pc, #372]	; (8001f50 <HAL_RCC_ClockConfig+0x1fc>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	0019      	movs	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d057      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	4013      	ands	r3, r2
 8001e06:	d12b      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e097      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	049b      	lsls	r3, r3, #18
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d11f      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e08b      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	d113      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e07f      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d108      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e074      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e52:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e06d      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e60:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2207      	movs	r2, #7
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e74:	f7fe ff56 	bl	8000d24 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7e:	f7fe ff51 	bl	8000d24 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <HAL_RCC_ClockConfig+0x1f4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2238      	movs	r2, #56	; 0x38
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1ec      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	4013      	ands	r3, r2
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d21e      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	4393      	bics	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe ff2e 	bl	8000d24 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ece:	f7fe ff29 	bl	8000d24 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_RCC_ClockConfig+0x1f4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e02c      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4013      	ands	r3, r2
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <HAL_RCC_ClockConfig+0x200>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f0e:	f000 f829 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8001f12:	0001      	movs	r1, r0
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x204>)
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	58d3      	ldr	r3, [r2, r3]
 8001f24:	221f      	movs	r2, #31
 8001f26:	4013      	ands	r3, r2
 8001f28:	000a      	movs	r2, r1
 8001f2a:	40da      	lsrs	r2, r3
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x208>)
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x20c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7fe fe99 	bl	8000c6c <HAL_InitTick>
 8001f3a:	0003      	movs	r3, r0
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b004      	add	sp, #16
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000
 8001f48:	00001388 	.word	0x00001388
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	fffff0ff 	.word	0xfffff0ff
 8001f54:	ffff8fff 	.word	0xffff8fff
 8001f58:	08004134 	.word	0x08004134
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2238      	movs	r2, #56	; 0x38
 8001f70:	4013      	ands	r3, r2
 8001f72:	d10f      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f74:	4b39      	ldr	r3, [pc, #228]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0adb      	lsrs	r3, r3, #11
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2201      	movs	r2, #1
 8001f80:	409a      	lsls	r2, r3
 8001f82:	0013      	movs	r3, r2
 8001f84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	4835      	ldr	r0, [pc, #212]	; (8002060 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f8a:	f7fe f8bb 	bl	8000104 <__udivsi3>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	e05d      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2238      	movs	r2, #56	; 0x38
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e054      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2238      	movs	r2, #56	; 0x38
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d138      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d10d      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	4824      	ldr	r0, [pc, #144]	; (8002064 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fd4:	f7fe f896 	bl	8000104 <__udivsi3>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	0019      	movs	r1, r3
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	227f      	movs	r2, #127	; 0x7f
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	434b      	muls	r3, r1
 8001fe8:	617b      	str	r3, [r7, #20]
        break;
 8001fea:	e00d      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	481c      	ldr	r0, [pc, #112]	; (8002060 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ff0:	f7fe f888 	bl	8000104 <__udivsi3>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	227f      	movs	r2, #127	; 0x7f
 8002000:	4013      	ands	r3, r2
 8002002:	434b      	muls	r3, r1
 8002004:	617b      	str	r3, [r7, #20]
        break;
 8002006:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0f5b      	lsrs	r3, r3, #29
 800200e:	2207      	movs	r2, #7
 8002010:	4013      	ands	r3, r2
 8002012:	3301      	adds	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	f7fe f873 	bl	8000104 <__udivsi3>
 800201e:	0003      	movs	r3, r0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e015      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2238      	movs	r2, #56	; 0x38
 800202a:	4013      	ands	r3, r2
 800202c:	2b20      	cmp	r3, #32
 800202e:	d103      	bne.n	8002038 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_RCC_GetSysClockFreq+0xf8>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2238      	movs	r2, #56	; 0x38
 800203e:	4013      	ands	r3, r2
 8002040:	2b18      	cmp	r3, #24
 8002042:	d103      	bne.n	800204c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002044:	23fa      	movs	r3, #250	; 0xfa
 8002046:	01db      	lsls	r3, r3, #7
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e001      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002050:	693b      	ldr	r3, [r7, #16]
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b006      	add	sp, #24
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <HAL_RCC_GetHCLKFreq+0x10>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b5b0      	push	{r4, r5, r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002080:	f7ff fff2 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002084:	0004      	movs	r4, r0
 8002086:	f7ff fb3f 	bl	8001708 <LL_RCC_GetAPB1Prescaler>
 800208a:	0003      	movs	r3, r0
 800208c:	0b1a      	lsrs	r2, r3, #12
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	58d3      	ldr	r3, [r2, r3]
 8002094:	221f      	movs	r2, #31
 8002096:	4013      	ands	r3, r2
 8002098:	40dc      	lsrs	r4, r3
 800209a:	0023      	movs	r3, r4
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdb0      	pop	{r4, r5, r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	08004174 	.word	0x08004174

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020b0:	2313      	movs	r3, #19
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b8:	2312      	movs	r3, #18
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	029b      	lsls	r3, r3, #10
 80020c8:	4013      	ands	r3, r2
 80020ca:	d100      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020cc:	e0a3      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2011      	movs	r0, #17
 80020d0:	183b      	adds	r3, r7, r0
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d6:	4bc3      	ldr	r3, [pc, #780]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	055b      	lsls	r3, r3, #21
 80020de:	4013      	ands	r3, r2
 80020e0:	d110      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4bc0      	ldr	r3, [pc, #768]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e6:	4bbf      	ldr	r3, [pc, #764]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0549      	lsls	r1, r1, #21
 80020ec:	430a      	orrs	r2, r1
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f0:	4bbc      	ldr	r3, [pc, #752]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	055b      	lsls	r3, r3, #21
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002104:	4bb8      	ldr	r3, [pc, #736]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4bb7      	ldr	r3, [pc, #732]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0049      	lsls	r1, r1, #1
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002112:	f7fe fe07 	bl	8000d24 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800211a:	e00b      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211c:	f7fe fe02 	bl	8000d24 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d904      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800212a:	2313      	movs	r3, #19
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2203      	movs	r2, #3
 8002130:	701a      	strb	r2, [r3, #0]
        break;
 8002132:	e005      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002134:	4bac      	ldr	r3, [pc, #688]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4013      	ands	r3, r2
 800213e:	d0ed      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002140:	2313      	movs	r3, #19
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d154      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800214a:	4ba6      	ldr	r3, [pc, #664]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800214c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800214e:	23c0      	movs	r3, #192	; 0xc0
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d019      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	429a      	cmp	r2, r3
 8002164:	d014      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002166:	4b9f      	ldr	r3, [pc, #636]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	4aa0      	ldr	r2, [pc, #640]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800216c:	4013      	ands	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002170:	4b9c      	ldr	r3, [pc, #624]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002174:	4b9b      	ldr	r3, [pc, #620]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	0249      	lsls	r1, r1, #9
 800217a:	430a      	orrs	r2, r1
 800217c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800217e:	4b99      	ldr	r3, [pc, #612]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002182:	4b98      	ldr	r3, [pc, #608]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002184:	499a      	ldr	r1, [pc, #616]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002186:	400a      	ands	r2, r1
 8002188:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800218a:	4b96      	ldr	r3, [pc, #600]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	d016      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fdc4 	bl	8000d24 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a0:	e00c      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe fdbf 	bl	8000d24 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a91      	ldr	r2, [pc, #580]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d904      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021b2:	2313      	movs	r3, #19
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2203      	movs	r2, #3
 80021b8:	701a      	strb	r2, [r3, #0]
            break;
 80021ba:	e004      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	4b89      	ldr	r3, [pc, #548]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d0ed      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021c6:	2313      	movs	r3, #19
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d0:	4b84      	ldr	r3, [pc, #528]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	4a85      	ldr	r2, [pc, #532]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021de:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e4:	e00c      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021e6:	2312      	movs	r3, #18
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2213      	movs	r2, #19
 80021ec:	18ba      	adds	r2, r7, r2
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e005      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f4:	2312      	movs	r3, #18
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2213      	movs	r2, #19
 80021fa:	18ba      	adds	r2, r7, r2
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002200:	2311      	movs	r3, #17
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b76      	ldr	r3, [pc, #472]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800220e:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002210:	4979      	ldr	r1, [pc, #484]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002212:	400a      	ands	r2, r1
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	4013      	ands	r3, r2
 800221e:	d009      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002220:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	2203      	movs	r2, #3
 8002226:	4393      	bics	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	430a      	orrs	r2, r1
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2202      	movs	r2, #2
 800223a:	4013      	ands	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800223e:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	220c      	movs	r2, #12
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	430a      	orrs	r2, r1
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2210      	movs	r2, #16
 8002258:	4013      	ands	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800225c:	4b61      	ldr	r3, [pc, #388]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	4a66      	ldr	r2, [pc, #408]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226c:	430a      	orrs	r2, r1
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	4a5f      	ldr	r2, [pc, #380]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002282:	4013      	ands	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228c:	430a      	orrs	r2, r1
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4013      	ands	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800229c:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69da      	ldr	r2, [r3, #28]
 80022aa:	4b4e      	ldr	r3, [pc, #312]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2220      	movs	r2, #32
 80022b6:	4013      	ands	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	4a52      	ldr	r2, [pc, #328]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	01db      	lsls	r3, r3, #7
 80022d6:	4013      	ands	r3, r2
 80022d8:	d015      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022da:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	0899      	lsrs	r1, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1a      	ldr	r2, [r3, #32]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	05db      	lsls	r3, r3, #23
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0249      	lsls	r1, r1, #9
 8002302:	430a      	orrs	r2, r1
 8002304:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	031b      	lsls	r3, r3, #12
 800230e:	4013      	ands	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	2240      	movs	r2, #64	; 0x40
 8002318:	4393      	bics	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002322:	430a      	orrs	r2, r1
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	039b      	lsls	r3, r3, #14
 800232e:	4013      	ands	r3, r2
 8002330:	d016      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	4a35      	ldr	r2, [pc, #212]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002338:	4013      	ands	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002340:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002342:	430a      	orrs	r2, r1
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	03db      	lsls	r3, r3, #15
 800234e:	429a      	cmp	r2, r3
 8002350:	d106      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	0449      	lsls	r1, r1, #17
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	03db      	lsls	r3, r3, #15
 8002368:	4013      	ands	r3, r2
 800236a:	d016      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002370:	4a27      	ldr	r2, [pc, #156]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237c:	430a      	orrs	r2, r1
 800237e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	045b      	lsls	r3, r3, #17
 8002388:	429a      	cmp	r2, r3
 800238a:	d106      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0449      	lsls	r1, r1, #17
 8002396:	430a      	orrs	r2, r1
 8002398:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	d016      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	01db      	lsls	r3, r3, #7
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023d4:	2312      	movs	r3, #18
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b006      	add	sp, #24
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	fffffcff 	.word	0xfffffcff
 80023f0:	fffeffff 	.word	0xfffeffff
 80023f4:	00001388 	.word	0x00001388
 80023f8:	efffffff 	.word	0xefffffff
 80023fc:	fffff3ff 	.word	0xfffff3ff
 8002400:	fff3ffff 	.word	0xfff3ffff
 8002404:	ffcfffff 	.word	0xffcfffff
 8002408:	ffffcfff 	.word	0xffffcfff
 800240c:	ffbfffff 	.word	0xffbfffff
 8002410:	feffffff 	.word	0xfeffffff
 8002414:	ffff3fff 	.word	0xffff3fff

08002418 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002420:	230f      	movs	r3, #15
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d100      	bne.n	8002430 <HAL_RTC_Init+0x18>
 800242e:	e08c      	b.n	800254a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2229      	movs	r2, #41	; 0x29
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2228      	movs	r2, #40	; 0x28
 8002440:	2100      	movs	r1, #0
 8002442:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2288      	movs	r2, #136	; 0x88
 8002448:	0212      	lsls	r2, r2, #8
 800244a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f7fe fa70 	bl	8000934 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2229      	movs	r2, #41	; 0x29
 8002458:	2102      	movs	r1, #2
 800245a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2210      	movs	r2, #16
 8002464:	4013      	ands	r3, r2
 8002466:	2b10      	cmp	r3, #16
 8002468:	d062      	beq.n	8002530 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	22ca      	movs	r2, #202	; 0xca
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2253      	movs	r2, #83	; 0x53
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800247a:	250f      	movs	r5, #15
 800247c:	197c      	adds	r4, r7, r5
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f892 	bl	80025aa <RTC_EnterInitMode>
 8002486:	0003      	movs	r3, r0
 8002488:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800248a:	0028      	movs	r0, r5
 800248c:	183b      	adds	r3, r7, r0
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d12c      	bne.n	80024ee <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	492e      	ldr	r1, [pc, #184]	; (8002558 <HAL_RTC_Init+0x140>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6999      	ldr	r1, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6912      	ldr	r2, [r2, #16]
 80024ca:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6919      	ldr	r1, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	041a      	lsls	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80024e0:	183c      	adds	r4, r7, r0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f8a3 	bl	8002630 <RTC_ExitInitMode>
 80024ea:	0003      	movs	r3, r0
 80024ec:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80024ee:	230f      	movs	r3, #15
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d116      	bne.n	8002526 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	00d2      	lsls	r2, r2, #3
 8002504:	08d2      	lsrs	r2, r2, #3
 8002506:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6999      	ldr	r1, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	22ff      	movs	r2, #255	; 0xff
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
 800252e:	e003      	b.n	8002538 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002530:	230f      	movs	r3, #15
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002538:	230f      	movs	r3, #15
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2229      	movs	r2, #41	; 0x29
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800254a:	230f      	movs	r3, #15
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b004      	add	sp, #16
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	fb8fffbf 	.word	0xfb8fffbf

0800255c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	21a0      	movs	r1, #160	; 0xa0
 8002570:	438a      	bics	r2, r1
 8002572:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002574:	f7fe fbd6 	bl	8000d24 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800257c:	e00a      	b.n	8002594 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800257e:	f7fe fbd1 	bl	8000d24 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad2      	subs	r2, r2, r3
 8002588:	23fa      	movs	r3, #250	; 0xfa
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d901      	bls.n	8002594 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e006      	b.n	80025a2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	4013      	ands	r3, r2
 800259e:	d0ee      	beq.n	800257e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b004      	add	sp, #16
 80025a8:	bd80      	pop	{r7, pc}

080025aa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80025b2:	230f      	movs	r3, #15
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	4013      	ands	r3, r2
 80025c4:	d12c      	bne.n	8002620 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	430a      	orrs	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80025d6:	f7fe fba5 	bl	8000d24 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80025de:	e014      	b.n	800260a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80025e0:	f7fe fba0 	bl	8000d24 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad2      	subs	r2, r2, r3
 80025ea:	200f      	movs	r0, #15
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	1839      	adds	r1, r7, r0
 80025f0:	7809      	ldrb	r1, [r1, #0]
 80025f2:	7019      	strb	r1, [r3, #0]
 80025f4:	23fa      	movs	r3, #250	; 0xfa
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d906      	bls.n	800260a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80025fc:	183b      	adds	r3, r7, r0
 80025fe:	2203      	movs	r2, #3
 8002600:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2229      	movs	r2, #41	; 0x29
 8002606:	2103      	movs	r1, #3
 8002608:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	4013      	ands	r3, r2
 8002614:	d104      	bne.n	8002620 <RTC_EnterInitMode+0x76>
 8002616:	230f      	movs	r3, #15
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d1df      	bne.n	80025e0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002620:	230f      	movs	r3, #15
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	781b      	ldrb	r3, [r3, #0]
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b004      	add	sp, #16
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	240f      	movs	r4, #15
 800263a:	193b      	adds	r3, r7, r4
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <RTC_ExitInitMode+0x84>)
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <RTC_ExitInitMode+0x84>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	438a      	bics	r2, r1
 800264a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <RTC_ExitInitMode+0x84>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2220      	movs	r2, #32
 8002652:	4013      	ands	r3, r2
 8002654:	d10d      	bne.n	8002672 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff ff7f 	bl	800255c <HAL_RTC_WaitForSynchro>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d021      	beq.n	80026a6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2229      	movs	r2, #41	; 0x29
 8002666:	2103      	movs	r1, #3
 8002668:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800266a:	193b      	adds	r3, r7, r4
 800266c:	2203      	movs	r2, #3
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e019      	b.n	80026a6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <RTC_ExitInitMode+0x84>)
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <RTC_ExitInitMode+0x84>)
 8002678:	2120      	movs	r1, #32
 800267a:	438a      	bics	r2, r1
 800267c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff ff6b 	bl	800255c <HAL_RTC_WaitForSynchro>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d007      	beq.n	800269a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2229      	movs	r2, #41	; 0x29
 800268e:	2103      	movs	r1, #3
 8002690:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002692:	230f      	movs	r3, #15
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	2203      	movs	r2, #3
 8002698:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <RTC_ExitInitMode+0x84>)
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <RTC_ExitInitMode+0x84>)
 80026a0:	2120      	movs	r1, #32
 80026a2:	430a      	orrs	r2, r1
 80026a4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80026a6:	230f      	movs	r3, #15
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b005      	add	sp, #20
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	40002800 	.word	0x40002800

080026b8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2228      	movs	r2, #40	; 0x28
 80026c8:	5c9b      	ldrb	r3, [r3, r2]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e082      	b.n	80027d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2228      	movs	r2, #40	; 0x28
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2229      	movs	r2, #41	; 0x29
 80026de:	2102      	movs	r1, #2
 80026e0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	22ca      	movs	r2, #202	; 0xca
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2253      	movs	r2, #83	; 0x53
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4938      	ldr	r1, [pc, #224]	; (80027e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 80026fe:	400a      	ands	r2, r1
 8002700:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2104      	movs	r1, #4
 800270e:	430a      	orrs	r2, r1
 8002710:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	4013      	ands	r3, r2
 800271a:	d121      	bne.n	8002760 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800271c:	f7fe fb02 	bl	8000d24 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002724:	e016      	b.n	8002754 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002726:	f7fe fafd 	bl	8000d24 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	23fa      	movs	r3, #250	; 0xfa
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d90d      	bls.n	8002754 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	22ff      	movs	r2, #255	; 0xff
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2229      	movs	r2, #41	; 0x29
 8002744:	2103      	movs	r1, #3
 8002746:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2228      	movs	r2, #40	; 0x28
 800274c:	2100      	movs	r1, #0
 800274e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e041      	b.n	80027d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2204      	movs	r2, #4
 800275c:	4013      	ands	r3, r2
 800275e:	d0e2      	beq.n	8002726 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2107      	movs	r1, #7
 8002774:	438a      	bics	r2, r1
 8002776:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6999      	ldr	r1, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	430a      	orrs	r2, r1
 8002786:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	58d3      	ldr	r3, [r2, r3]
 800278e:	4916      	ldr	r1, [pc, #88]	; (80027e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0312      	lsls	r2, r2, #12
 8002794:	4313      	orrs	r3, r2
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	01c9      	lsls	r1, r1, #7
 80027a8:	430a      	orrs	r2, r1
 80027aa:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	00c9      	lsls	r1, r1, #3
 80027ba:	430a      	orrs	r2, r1
 80027bc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2229      	movs	r2, #41	; 0x29
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2228      	movs	r2, #40	; 0x28
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b006      	add	sp, #24
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	fffffbff 	.word	0xfffffbff
 80027e4:	40002800 	.word	0x40002800
 80027e8:	40021800 	.word	0x40021800

080027ec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	d00b      	beq.n	8002818 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2104      	movs	r1, #4
 800280c:	430a      	orrs	r2, r1
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0018      	movs	r0, r3
 8002814:	f000 f808 	bl	8002828 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2229      	movs	r2, #41	; 0x29
 800281c:	2101      	movs	r1, #1
 800281e:	5499      	strb	r1, [r3, r2]
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e04a      	b.n	80028e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	223d      	movs	r2, #61	; 0x3d
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	223c      	movs	r2, #60	; 0x3c
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f7fe f8ad 	bl	80009c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223d      	movs	r2, #61	; 0x3d
 800286a:	2102      	movs	r1, #2
 800286c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	0019      	movs	r1, r3
 8002878:	0010      	movs	r0, r2
 800287a:	f000 f98f 	bl	8002b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2248      	movs	r2, #72	; 0x48
 8002882:	2101      	movs	r1, #1
 8002884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	223e      	movs	r2, #62	; 0x3e
 800288a:	2101      	movs	r1, #1
 800288c:	5499      	strb	r1, [r3, r2]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	223f      	movs	r2, #63	; 0x3f
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2240      	movs	r2, #64	; 0x40
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2241      	movs	r2, #65	; 0x41
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2242      	movs	r2, #66	; 0x42
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2243      	movs	r2, #67	; 0x43
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2244      	movs	r2, #68	; 0x44
 80028ba:	2101      	movs	r1, #1
 80028bc:	5499      	strb	r1, [r3, r2]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2245      	movs	r2, #69	; 0x45
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2246      	movs	r2, #70	; 0x46
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2247      	movs	r2, #71	; 0x47
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223d      	movs	r2, #61	; 0x3d
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d124      	bne.n	8002948 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	2b02      	cmp	r3, #2
 800290a:	d11d      	bne.n	8002948 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2203      	movs	r2, #3
 8002912:	4252      	negs	r2, r2
 8002914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2203      	movs	r2, #3
 8002924:	4013      	ands	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f91e 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 8002930:	e007      	b.n	8002942 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 f911 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f91d 	bl	8002b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	2b04      	cmp	r3, #4
 8002954:	d125      	bne.n	80029a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2204      	movs	r2, #4
 800295e:	4013      	ands	r3, r2
 8002960:	2b04      	cmp	r3, #4
 8002962:	d11e      	bne.n	80029a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2205      	movs	r2, #5
 800296a:	4252      	negs	r2, r2
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	23c0      	movs	r3, #192	; 0xc0
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f8f1 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 800298a:	e007      	b.n	800299c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f8e4 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f8f0 	bl	8002b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2208      	movs	r2, #8
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d124      	bne.n	80029fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2208      	movs	r2, #8
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d11d      	bne.n	80029fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2209      	movs	r2, #9
 80029c4:	4252      	negs	r2, r2
 80029c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2204      	movs	r2, #4
 80029cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2203      	movs	r2, #3
 80029d6:	4013      	ands	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 f8c5 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 80029e2:	e007      	b.n	80029f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f8b8 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f8c4 	bl	8002b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2210      	movs	r2, #16
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d125      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2210      	movs	r2, #16
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d11e      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2211      	movs	r2, #17
 8002a1c:	4252      	negs	r2, r2
 8002a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2208      	movs	r2, #8
 8002a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	23c0      	movs	r3, #192	; 0xc0
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 f898 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e007      	b.n	8002a4e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f88b 	bl	8002b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 f897 	bl	8002b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10f      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2202      	movs	r2, #2
 8002a76:	4252      	negs	r2, r2
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f865 	bl	8002b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b80      	cmp	r3, #128	; 0x80
 8002a9c:	d108      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2281      	movs	r2, #129	; 0x81
 8002aa4:	4252      	negs	r2, r2
 8002aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f8fe 	bl	8002cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	401a      	ands	r2, r3
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_TIM_IRQHandler+0x260>)
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f8ed 	bl	8002cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d10f      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d108      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2241      	movs	r2, #65	; 0x41
 8002b04:	4252      	negs	r2, r2
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f83e 	bl	8002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2220      	movs	r2, #32
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d10f      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d108      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	4252      	negs	r2, r2
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 f8af 	bl	8002c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	fffffeff 	.word	0xfffffeff

08002b4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a34      	ldr	r2, [pc, #208]	; (8002c80 <TIM_Base_SetConfig+0xe4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d008      	beq.n	8002bc6 <TIM_Base_SetConfig+0x2a>
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	05db      	lsls	r3, r3, #23
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0x2a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <TIM_Base_SetConfig+0xe8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2270      	movs	r2, #112	; 0x70
 8002bca:	4393      	bics	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <TIM_Base_SetConfig+0xe4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d018      	beq.n	8002c12 <TIM_Base_SetConfig+0x76>
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	05db      	lsls	r3, r3, #23
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d013      	beq.n	8002c12 <TIM_Base_SetConfig+0x76>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <TIM_Base_SetConfig+0xe8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00f      	beq.n	8002c12 <TIM_Base_SetConfig+0x76>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <TIM_Base_SetConfig+0xec>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00b      	beq.n	8002c12 <TIM_Base_SetConfig+0x76>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <TIM_Base_SetConfig+0xf0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <TIM_Base_SetConfig+0x76>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <TIM_Base_SetConfig+0xf4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_Base_SetConfig+0x76>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <TIM_Base_SetConfig+0xf8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d108      	bne.n	8002c24 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a20      	ldr	r2, [pc, #128]	; (8002c98 <TIM_Base_SetConfig+0xfc>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	4393      	bics	r3, r2
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <TIM_Base_SetConfig+0xe4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00b      	beq.n	8002c6a <TIM_Base_SetConfig+0xce>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <TIM_Base_SetConfig+0xf0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <TIM_Base_SetConfig+0xce>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <TIM_Base_SetConfig+0xf4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d003      	beq.n	8002c6a <TIM_Base_SetConfig+0xce>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <TIM_Base_SetConfig+0xf8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d103      	bne.n	8002c72 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	615a      	str	r2, [r3, #20]
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40002000 	.word	0x40002000
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014400 	.word	0x40014400
 8002c94:	40014800 	.word	0x40014800
 8002c98:	fffffcff 	.word	0xfffffcff

08002c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e046      	b.n	8002d6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2288      	movs	r2, #136	; 0x88
 8002ce2:	589b      	ldr	r3, [r3, r2]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2284      	movs	r2, #132	; 0x84
 8002cec:	2100      	movs	r1, #0
 8002cee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7fd fe8c 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2288      	movs	r2, #136	; 0x88
 8002cfc:	2124      	movs	r1, #36	; 0x24
 8002cfe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fb72 	bl	80033fc <UART_SetConfig>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e024      	b.n	8002d6c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 fe23 	bl	8003978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	490d      	ldr	r1, [pc, #52]	; (8002d74 <HAL_UART_Init+0xa8>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	212a      	movs	r1, #42	; 0x2a
 8002d4e:	438a      	bics	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 febb 	bl	8003ae0 <UART_CheckIdleState>
 8002d6a:	0003      	movs	r3, r0
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	ffffb7ff 	.word	0xffffb7ff

08002d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b0aa      	sub	sp, #168	; 0xa8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	22a4      	movs	r2, #164	; 0xa4
 8002d88:	18b9      	adds	r1, r7, r2
 8002d8a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	20a0      	movs	r0, #160	; 0xa0
 8002d94:	1839      	adds	r1, r7, r0
 8002d96:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	249c      	movs	r4, #156	; 0x9c
 8002da0:	1939      	adds	r1, r7, r4
 8002da2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002da4:	0011      	movs	r1, r2
 8002da6:	18bb      	adds	r3, r7, r2
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4aa2      	ldr	r2, [pc, #648]	; (8003034 <HAL_UART_IRQHandler+0x2bc>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	2298      	movs	r2, #152	; 0x98
 8002db0:	18bd      	adds	r5, r7, r2
 8002db2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002db4:	18bb      	adds	r3, r7, r2
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11a      	bne.n	8002df2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d015      	beq.n	8002df2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d105      	bne.n	8002ddc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	055b      	lsls	r3, r3, #21
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d00a      	beq.n	8002df2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d100      	bne.n	8002de6 <HAL_UART_IRQHandler+0x6e>
 8002de4:	e2dc      	b.n	80033a0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	0010      	movs	r0, r2
 8002dee:	4798      	blx	r3
      }
      return;
 8002df0:	e2d6      	b.n	80033a0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002df2:	2398      	movs	r3, #152	; 0x98
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d100      	bne.n	8002dfe <HAL_UART_IRQHandler+0x86>
 8002dfc:	e122      	b.n	8003044 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002dfe:	239c      	movs	r3, #156	; 0x9c
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a8c      	ldr	r2, [pc, #560]	; (8003038 <HAL_UART_IRQHandler+0x2c0>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e0a:	23a0      	movs	r3, #160	; 0xa0
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a8a      	ldr	r2, [pc, #552]	; (800303c <HAL_UART_IRQHandler+0x2c4>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	d100      	bne.n	8002e18 <HAL_UART_IRQHandler+0xa0>
 8002e16:	e115      	b.n	8003044 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e18:	23a4      	movs	r3, #164	; 0xa4
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4013      	ands	r3, r2
 8002e22:	d012      	beq.n	8002e4a <HAL_UART_IRQHandler+0xd2>
 8002e24:	23a0      	movs	r3, #160	; 0xa0
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2290      	movs	r2, #144	; 0x90
 8002e3e:	589b      	ldr	r3, [r3, r2]
 8002e40:	2201      	movs	r2, #1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2190      	movs	r1, #144	; 0x90
 8002e48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e4a:	23a4      	movs	r3, #164	; 0xa4
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d011      	beq.n	8002e7a <HAL_UART_IRQHandler+0x102>
 8002e56:	239c      	movs	r3, #156	; 0x9c
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2202      	movs	r2, #2
 8002e68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2290      	movs	r2, #144	; 0x90
 8002e6e:	589b      	ldr	r3, [r3, r2]
 8002e70:	2204      	movs	r2, #4
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2190      	movs	r1, #144	; 0x90
 8002e78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e7a:	23a4      	movs	r3, #164	; 0xa4
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2204      	movs	r2, #4
 8002e82:	4013      	ands	r3, r2
 8002e84:	d011      	beq.n	8002eaa <HAL_UART_IRQHandler+0x132>
 8002e86:	239c      	movs	r3, #156	; 0x9c
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2204      	movs	r2, #4
 8002e98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2290      	movs	r2, #144	; 0x90
 8002e9e:	589b      	ldr	r3, [r3, r2]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2190      	movs	r1, #144	; 0x90
 8002ea8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002eaa:	23a4      	movs	r3, #164	; 0xa4
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d017      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002eb6:	23a0      	movs	r3, #160	; 0xa0
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d105      	bne.n	8002ece <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002ec2:	239c      	movs	r3, #156	; 0x9c
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_UART_IRQHandler+0x2c0>)
 8002eca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2290      	movs	r2, #144	; 0x90
 8002eda:	589b      	ldr	r3, [r3, r2]
 8002edc:	2208      	movs	r2, #8
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2190      	movs	r1, #144	; 0x90
 8002ee4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ee6:	23a4      	movs	r3, #164	; 0xa4
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_UART_IRQHandler+0x1a4>
 8002ef4:	23a0      	movs	r3, #160	; 0xa0
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	04db      	lsls	r3, r3, #19
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00c      	beq.n	8002f1c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2290      	movs	r2, #144	; 0x90
 8002f10:	589b      	ldr	r3, [r3, r2]
 8002f12:	2220      	movs	r2, #32
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2190      	movs	r1, #144	; 0x90
 8002f1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2290      	movs	r2, #144	; 0x90
 8002f20:	589b      	ldr	r3, [r3, r2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d100      	bne.n	8002f28 <HAL_UART_IRQHandler+0x1b0>
 8002f26:	e23d      	b.n	80033a4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f28:	23a4      	movs	r3, #164	; 0xa4
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	4013      	ands	r3, r2
 8002f32:	d015      	beq.n	8002f60 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f34:	23a0      	movs	r3, #160	; 0xa0
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d106      	bne.n	8002f4e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f40:	239c      	movs	r3, #156	; 0x9c
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	055b      	lsls	r3, r3, #21
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d008      	beq.n	8002f60 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	0010      	movs	r0, r2
 8002f5e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2290      	movs	r2, #144	; 0x90
 8002f64:	589b      	ldr	r3, [r3, r2]
 8002f66:	2194      	movs	r1, #148	; 0x94
 8002f68:	187a      	adds	r2, r7, r1
 8002f6a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d004      	beq.n	8002f84 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2228      	movs	r2, #40	; 0x28
 8002f80:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f82:	d04c      	beq.n	800301e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 fec0 	bl	8003d0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d13c      	bne.n	8003014 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa2:	2090      	movs	r0, #144	; 0x90
 8002fa4:	183a      	adds	r2, r7, r0
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fae:	f383 8810 	msr	PRIMASK, r3
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	438a      	bics	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	183b      	adds	r3, r7, r0
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	589b      	ldr	r3, [r3, r2]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	589b      	ldr	r3, [r3, r2]
 8002fe2:	4a17      	ldr	r2, [pc, #92]	; (8003040 <HAL_UART_IRQHandler+0x2c8>)
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	589b      	ldr	r3, [r3, r2]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7fe f86d 	bl	80010cc <HAL_DMA_Abort_IT>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d01c      	beq.n	8003030 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	589b      	ldr	r3, [r3, r2]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	5852      	ldr	r2, [r2, r1]
 8003004:	0010      	movs	r0, r2
 8003006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e012      	b.n	8003030 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f9e1 	bl	80033d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003012:	e00d      	b.n	8003030 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f9dc 	bl	80033d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	e008      	b.n	8003030 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f9d7 	bl	80033d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2290      	movs	r2, #144	; 0x90
 800302a:	2100      	movs	r1, #0
 800302c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800302e:	e1b9      	b.n	80033a4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003030:	46c0      	nop			; (mov r8, r8)
    return;
 8003032:	e1b7      	b.n	80033a4 <HAL_UART_IRQHandler+0x62c>
 8003034:	0000080f 	.word	0x0000080f
 8003038:	10000001 	.word	0x10000001
 800303c:	04000120 	.word	0x04000120
 8003040:	08003dd9 	.word	0x08003dd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d000      	beq.n	800304e <HAL_UART_IRQHandler+0x2d6>
 800304c:	e13e      	b.n	80032cc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800304e:	23a4      	movs	r3, #164	; 0xa4
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	4013      	ands	r3, r2
 8003058:	d100      	bne.n	800305c <HAL_UART_IRQHandler+0x2e4>
 800305a:	e137      	b.n	80032cc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800305c:	23a0      	movs	r3, #160	; 0xa0
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2210      	movs	r2, #16
 8003064:	4013      	ands	r3, r2
 8003066:	d100      	bne.n	800306a <HAL_UART_IRQHandler+0x2f2>
 8003068:	e130      	b.n	80032cc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2210      	movs	r2, #16
 8003070:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	4013      	ands	r3, r2
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d000      	beq.n	8003082 <HAL_UART_IRQHandler+0x30a>
 8003080:	e0a4      	b.n	80031cc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	589b      	ldr	r3, [r3, r2]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	217e      	movs	r1, #126	; 0x7e
 800308e:	187b      	adds	r3, r7, r1
 8003090:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003092:	187b      	adds	r3, r7, r1
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d100      	bne.n	800309c <HAL_UART_IRQHandler+0x324>
 800309a:	e185      	b.n	80033a8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	225c      	movs	r2, #92	; 0x5c
 80030a0:	5a9b      	ldrh	r3, [r3, r2]
 80030a2:	187a      	adds	r2, r7, r1
 80030a4:	8812      	ldrh	r2, [r2, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d300      	bcc.n	80030ac <HAL_UART_IRQHandler+0x334>
 80030aa:	e17d      	b.n	80033a8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	187a      	adds	r2, r7, r1
 80030b0:	215e      	movs	r1, #94	; 0x5e
 80030b2:	8812      	ldrh	r2, [r2, #0]
 80030b4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	589b      	ldr	r3, [r3, r2]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2220      	movs	r2, #32
 80030c2:	4013      	ands	r3, r2
 80030c4:	d170      	bne.n	80031a8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d0:	2301      	movs	r3, #1
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	f383 8810 	msr	PRIMASK, r3
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	49b4      	ldr	r1, [pc, #720]	; (80033b8 <HAL_UART_IRQHandler+0x640>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	f383 8810 	msr	PRIMASK, r3
}
 80030f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f8:	f3ef 8310 	mrs	r3, PRIMASK
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003100:	677b      	str	r3, [r7, #116]	; 0x74
 8003102:	2301      	movs	r3, #1
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	438a      	bics	r2, r1
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003120:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003124:	f383 8810 	msr	PRIMASK, r3
}
 8003128:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312a:	f3ef 8310 	mrs	r3, PRIMASK
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003130:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003132:	673b      	str	r3, [r7, #112]	; 0x70
 8003134:	2301      	movs	r3, #1
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313a:	f383 8810 	msr	PRIMASK, r3
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	438a      	bics	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003156:	f383 8810 	msr	PRIMASK, r3
}
 800315a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	228c      	movs	r2, #140	; 0x8c
 8003160:	2120      	movs	r1, #32
 8003162:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800316a:	f3ef 8310 	mrs	r3, PRIMASK
 800316e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003170:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003174:	2301      	movs	r3, #1
 8003176:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2110      	movs	r1, #16
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003196:	f383 8810 	msr	PRIMASK, r3
}
 800319a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	589b      	ldr	r3, [r3, r2]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fd ff30 	bl	8001008 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	225c      	movs	r2, #92	; 0x5c
 80031b2:	5a9a      	ldrh	r2, [r3, r2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	215e      	movs	r1, #94	; 0x5e
 80031b8:	5a5b      	ldrh	r3, [r3, r1]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0011      	movs	r1, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f90d 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031ca:	e0ed      	b.n	80033a8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	225c      	movs	r2, #92	; 0x5c
 80031d0:	5a99      	ldrh	r1, [r3, r2]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	225e      	movs	r2, #94	; 0x5e
 80031d6:	5a9b      	ldrh	r3, [r3, r2]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	208e      	movs	r0, #142	; 0x8e
 80031dc:	183b      	adds	r3, r7, r0
 80031de:	1a8a      	subs	r2, r1, r2
 80031e0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	225e      	movs	r2, #94	; 0x5e
 80031e6:	5a9b      	ldrh	r3, [r3, r2]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d100      	bne.n	80031f0 <HAL_UART_IRQHandler+0x478>
 80031ee:	e0dd      	b.n	80033ac <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80031f0:	183b      	adds	r3, r7, r0
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d100      	bne.n	80031fa <HAL_UART_IRQHandler+0x482>
 80031f8:	e0d8      	b.n	80033ac <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fa:	f3ef 8310 	mrs	r3, PRIMASK
 80031fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003200:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003202:	2488      	movs	r4, #136	; 0x88
 8003204:	193a      	adds	r2, r7, r4
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	2301      	movs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4967      	ldr	r1, [pc, #412]	; (80033bc <HAL_UART_IRQHandler+0x644>)
 8003220:	400a      	ands	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	193b      	adds	r3, r7, r4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f383 8810 	msr	PRIMASK, r3
}
 8003230:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003232:	f3ef 8310 	mrs	r3, PRIMASK
 8003236:	61bb      	str	r3, [r7, #24]
  return(result);
 8003238:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800323a:	2484      	movs	r4, #132	; 0x84
 800323c:	193a      	adds	r2, r7, r4
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	2301      	movs	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f383 8810 	msr	PRIMASK, r3
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	495a      	ldr	r1, [pc, #360]	; (80033c0 <HAL_UART_IRQHandler+0x648>)
 8003258:	400a      	ands	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	193b      	adds	r3, r7, r4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	228c      	movs	r2, #140	; 0x8c
 800326e:	2120      	movs	r1, #32
 8003270:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327e:	f3ef 8310 	mrs	r3, PRIMASK
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003286:	2480      	movs	r4, #128	; 0x80
 8003288:	193a      	adds	r2, r7, r4
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	2301      	movs	r3, #1
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2110      	movs	r1, #16
 80032a4:	438a      	bics	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	f383 8810 	msr	PRIMASK, r3
}
 80032b4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032bc:	183b      	adds	r3, r7, r0
 80032be:	881a      	ldrh	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0011      	movs	r1, r2
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 f88d 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032ca:	e06f      	b.n	80033ac <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032cc:	23a4      	movs	r3, #164	; 0xa4
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	035b      	lsls	r3, r3, #13
 80032d6:	4013      	ands	r3, r2
 80032d8:	d010      	beq.n	80032fc <HAL_UART_IRQHandler+0x584>
 80032da:	239c      	movs	r3, #156	; 0x9c
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	03db      	lsls	r3, r3, #15
 80032e4:	4013      	ands	r3, r2
 80032e6:	d009      	beq.n	80032fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	0352      	lsls	r2, r2, #13
 80032f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 fdb2 	bl	8003e5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032fa:	e05a      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80032fc:	23a4      	movs	r3, #164	; 0xa4
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	4013      	ands	r3, r2
 8003306:	d016      	beq.n	8003336 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003308:	23a0      	movs	r3, #160	; 0xa0
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	4013      	ands	r3, r2
 8003312:	d106      	bne.n	8003322 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003314:	239c      	movs	r3, #156	; 0x9c
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	4013      	ands	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003326:	2b00      	cmp	r3, #0
 8003328:	d042      	beq.n	80033b0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	0010      	movs	r0, r2
 8003332:	4798      	blx	r3
    }
    return;
 8003334:	e03c      	b.n	80033b0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003336:	23a4      	movs	r3, #164	; 0xa4
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2240      	movs	r2, #64	; 0x40
 800333e:	4013      	ands	r3, r2
 8003340:	d00a      	beq.n	8003358 <HAL_UART_IRQHandler+0x5e0>
 8003342:	23a0      	movs	r3, #160	; 0xa0
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	4013      	ands	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f000 fd58 	bl	8003e06 <UART_EndTransmit_IT>
    return;
 8003356:	e02c      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003358:	23a4      	movs	r3, #164	; 0xa4
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	4013      	ands	r3, r2
 8003364:	d00b      	beq.n	800337e <HAL_UART_IRQHandler+0x606>
 8003366:	23a0      	movs	r3, #160	; 0xa0
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	05db      	lsls	r3, r3, #23
 8003370:	4013      	ands	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 fd81 	bl	8003e7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800337c:	e019      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800337e:	23a4      	movs	r3, #164	; 0xa4
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	045b      	lsls	r3, r3, #17
 8003388:	4013      	ands	r3, r2
 800338a:	d012      	beq.n	80033b2 <HAL_UART_IRQHandler+0x63a>
 800338c:	23a0      	movs	r3, #160	; 0xa0
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	da0d      	bge.n	80033b2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 fd68 	bl	8003e6e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800339e:	e008      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
      return;
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	e006      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
    return;
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	e004      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
      return;
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	e002      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
      return;
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	e000      	b.n	80033b2 <HAL_UART_IRQHandler+0x63a>
    return;
 80033b0:	46c0      	nop			; (mov r8, r8)
  }
}
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b02a      	add	sp, #168	; 0xa8
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}
 80033b8:	fffffeff 	.word	0xfffffeff
 80033bc:	fffffedf 	.word	0xfffffedf
 80033c0:	effffffe 	.word	0xeffffffe

080033c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	000a      	movs	r2, r1
 80033ee:	1cbb      	adds	r3, r7, #2
 80033f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b002      	add	sp, #8
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033fc:	b5b0      	push	{r4, r5, r7, lr}
 80033fe:	b090      	sub	sp, #64	; 0x40
 8003400:	af00      	add	r7, sp, #0
 8003402:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003404:	231a      	movs	r3, #26
 8003406:	2220      	movs	r2, #32
 8003408:	189b      	adds	r3, r3, r2
 800340a:	19db      	adds	r3, r3, r7
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	431a      	orrs	r2, r3
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	431a      	orrs	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	4313      	orrs	r3, r2
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4aaf      	ldr	r2, [pc, #700]	; (80036ec <UART_SetConfig+0x2f0>)
 8003430:	4013      	ands	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343a:	430b      	orrs	r3, r1
 800343c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4aaa      	ldr	r2, [pc, #680]	; (80036f0 <UART_SetConfig+0x2f4>)
 8003446:	4013      	ands	r3, r2
 8003448:	0018      	movs	r0, r3
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	68d9      	ldr	r1, [r3, #12]
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	0003      	movs	r3, r0
 8003454:	430b      	orrs	r3, r1
 8003456:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4aa4      	ldr	r2, [pc, #656]	; (80036f4 <UART_SetConfig+0x2f8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800346e:	4313      	orrs	r3, r2
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a9f      	ldr	r2, [pc, #636]	; (80036f8 <UART_SetConfig+0x2fc>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003484:	430b      	orrs	r3, r1
 8003486:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	220f      	movs	r2, #15
 8003490:	4393      	bics	r3, r2
 8003492:	0018      	movs	r0, r3
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	0003      	movs	r3, r0
 800349e:	430b      	orrs	r3, r1
 80034a0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a95      	ldr	r2, [pc, #596]	; (80036fc <UART_SetConfig+0x300>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d131      	bne.n	8003510 <UART_SetConfig+0x114>
 80034ac:	4b94      	ldr	r3, [pc, #592]	; (8003700 <UART_SetConfig+0x304>)
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	2203      	movs	r2, #3
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d01d      	beq.n	80034f4 <UART_SetConfig+0xf8>
 80034b8:	d823      	bhi.n	8003502 <UART_SetConfig+0x106>
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d00c      	beq.n	80034d8 <UART_SetConfig+0xdc>
 80034be:	d820      	bhi.n	8003502 <UART_SetConfig+0x106>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <UART_SetConfig+0xce>
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d00e      	beq.n	80034e6 <UART_SetConfig+0xea>
 80034c8:	e01b      	b.n	8003502 <UART_SetConfig+0x106>
 80034ca:	231b      	movs	r3, #27
 80034cc:	2220      	movs	r2, #32
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	19db      	adds	r3, r3, r7
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e0b4      	b.n	8003642 <UART_SetConfig+0x246>
 80034d8:	231b      	movs	r3, #27
 80034da:	2220      	movs	r2, #32
 80034dc:	189b      	adds	r3, r3, r2
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e0ad      	b.n	8003642 <UART_SetConfig+0x246>
 80034e6:	231b      	movs	r3, #27
 80034e8:	2220      	movs	r2, #32
 80034ea:	189b      	adds	r3, r3, r2
 80034ec:	19db      	adds	r3, r3, r7
 80034ee:	2204      	movs	r2, #4
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e0a6      	b.n	8003642 <UART_SetConfig+0x246>
 80034f4:	231b      	movs	r3, #27
 80034f6:	2220      	movs	r2, #32
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	19db      	adds	r3, r3, r7
 80034fc:	2208      	movs	r2, #8
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e09f      	b.n	8003642 <UART_SetConfig+0x246>
 8003502:	231b      	movs	r3, #27
 8003504:	2220      	movs	r2, #32
 8003506:	189b      	adds	r3, r3, r2
 8003508:	19db      	adds	r3, r3, r7
 800350a:	2210      	movs	r2, #16
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e098      	b.n	8003642 <UART_SetConfig+0x246>
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a7b      	ldr	r2, [pc, #492]	; (8003704 <UART_SetConfig+0x308>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d131      	bne.n	800357e <UART_SetConfig+0x182>
 800351a:	4b79      	ldr	r3, [pc, #484]	; (8003700 <UART_SetConfig+0x304>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	220c      	movs	r2, #12
 8003520:	4013      	ands	r3, r2
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d01d      	beq.n	8003562 <UART_SetConfig+0x166>
 8003526:	d823      	bhi.n	8003570 <UART_SetConfig+0x174>
 8003528:	2b08      	cmp	r3, #8
 800352a:	d00c      	beq.n	8003546 <UART_SetConfig+0x14a>
 800352c:	d820      	bhi.n	8003570 <UART_SetConfig+0x174>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <UART_SetConfig+0x13c>
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00e      	beq.n	8003554 <UART_SetConfig+0x158>
 8003536:	e01b      	b.n	8003570 <UART_SetConfig+0x174>
 8003538:	231b      	movs	r3, #27
 800353a:	2220      	movs	r2, #32
 800353c:	189b      	adds	r3, r3, r2
 800353e:	19db      	adds	r3, r3, r7
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e07d      	b.n	8003642 <UART_SetConfig+0x246>
 8003546:	231b      	movs	r3, #27
 8003548:	2220      	movs	r2, #32
 800354a:	189b      	adds	r3, r3, r2
 800354c:	19db      	adds	r3, r3, r7
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e076      	b.n	8003642 <UART_SetConfig+0x246>
 8003554:	231b      	movs	r3, #27
 8003556:	2220      	movs	r2, #32
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2204      	movs	r2, #4
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e06f      	b.n	8003642 <UART_SetConfig+0x246>
 8003562:	231b      	movs	r3, #27
 8003564:	2220      	movs	r2, #32
 8003566:	189b      	adds	r3, r3, r2
 8003568:	19db      	adds	r3, r3, r7
 800356a:	2208      	movs	r2, #8
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e068      	b.n	8003642 <UART_SetConfig+0x246>
 8003570:	231b      	movs	r3, #27
 8003572:	2220      	movs	r2, #32
 8003574:	189b      	adds	r3, r3, r2
 8003576:	19db      	adds	r3, r3, r7
 8003578:	2210      	movs	r2, #16
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e061      	b.n	8003642 <UART_SetConfig+0x246>
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a61      	ldr	r2, [pc, #388]	; (8003708 <UART_SetConfig+0x30c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d106      	bne.n	8003596 <UART_SetConfig+0x19a>
 8003588:	231b      	movs	r3, #27
 800358a:	2220      	movs	r2, #32
 800358c:	189b      	adds	r3, r3, r2
 800358e:	19db      	adds	r3, r3, r7
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e055      	b.n	8003642 <UART_SetConfig+0x246>
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5c      	ldr	r2, [pc, #368]	; (800370c <UART_SetConfig+0x310>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d106      	bne.n	80035ae <UART_SetConfig+0x1b2>
 80035a0:	231b      	movs	r3, #27
 80035a2:	2220      	movs	r2, #32
 80035a4:	189b      	adds	r3, r3, r2
 80035a6:	19db      	adds	r3, r3, r7
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e049      	b.n	8003642 <UART_SetConfig+0x246>
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a50      	ldr	r2, [pc, #320]	; (80036f4 <UART_SetConfig+0x2f8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d13e      	bne.n	8003636 <UART_SetConfig+0x23a>
 80035b8:	4b51      	ldr	r3, [pc, #324]	; (8003700 <UART_SetConfig+0x304>)
 80035ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035bc:	23c0      	movs	r3, #192	; 0xc0
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	4013      	ands	r3, r2
 80035c2:	22c0      	movs	r2, #192	; 0xc0
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d027      	beq.n	800361a <UART_SetConfig+0x21e>
 80035ca:	22c0      	movs	r2, #192	; 0xc0
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d82a      	bhi.n	8003628 <UART_SetConfig+0x22c>
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d011      	beq.n	80035fe <UART_SetConfig+0x202>
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	4293      	cmp	r3, r2
 80035e0:	d822      	bhi.n	8003628 <UART_SetConfig+0x22c>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <UART_SetConfig+0x1f4>
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	00d2      	lsls	r2, r2, #3
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00e      	beq.n	800360c <UART_SetConfig+0x210>
 80035ee:	e01b      	b.n	8003628 <UART_SetConfig+0x22c>
 80035f0:	231b      	movs	r3, #27
 80035f2:	2220      	movs	r2, #32
 80035f4:	189b      	adds	r3, r3, r2
 80035f6:	19db      	adds	r3, r3, r7
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e021      	b.n	8003642 <UART_SetConfig+0x246>
 80035fe:	231b      	movs	r3, #27
 8003600:	2220      	movs	r2, #32
 8003602:	189b      	adds	r3, r3, r2
 8003604:	19db      	adds	r3, r3, r7
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e01a      	b.n	8003642 <UART_SetConfig+0x246>
 800360c:	231b      	movs	r3, #27
 800360e:	2220      	movs	r2, #32
 8003610:	189b      	adds	r3, r3, r2
 8003612:	19db      	adds	r3, r3, r7
 8003614:	2204      	movs	r2, #4
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e013      	b.n	8003642 <UART_SetConfig+0x246>
 800361a:	231b      	movs	r3, #27
 800361c:	2220      	movs	r2, #32
 800361e:	189b      	adds	r3, r3, r2
 8003620:	19db      	adds	r3, r3, r7
 8003622:	2208      	movs	r2, #8
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e00c      	b.n	8003642 <UART_SetConfig+0x246>
 8003628:	231b      	movs	r3, #27
 800362a:	2220      	movs	r2, #32
 800362c:	189b      	adds	r3, r3, r2
 800362e:	19db      	adds	r3, r3, r7
 8003630:	2210      	movs	r2, #16
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e005      	b.n	8003642 <UART_SetConfig+0x246>
 8003636:	231b      	movs	r3, #27
 8003638:	2220      	movs	r2, #32
 800363a:	189b      	adds	r3, r3, r2
 800363c:	19db      	adds	r3, r3, r7
 800363e:	2210      	movs	r2, #16
 8003640:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <UART_SetConfig+0x2f8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d000      	beq.n	800364e <UART_SetConfig+0x252>
 800364c:	e0a9      	b.n	80037a2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800364e:	231b      	movs	r3, #27
 8003650:	2220      	movs	r2, #32
 8003652:	189b      	adds	r3, r3, r2
 8003654:	19db      	adds	r3, r3, r7
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d015      	beq.n	8003688 <UART_SetConfig+0x28c>
 800365c:	dc18      	bgt.n	8003690 <UART_SetConfig+0x294>
 800365e:	2b04      	cmp	r3, #4
 8003660:	d00d      	beq.n	800367e <UART_SetConfig+0x282>
 8003662:	dc15      	bgt.n	8003690 <UART_SetConfig+0x294>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <UART_SetConfig+0x272>
 8003668:	2b02      	cmp	r3, #2
 800366a:	d005      	beq.n	8003678 <UART_SetConfig+0x27c>
 800366c:	e010      	b.n	8003690 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366e:	f7fe fd05 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8003672:	0003      	movs	r3, r0
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003676:	e014      	b.n	80036a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <UART_SetConfig+0x314>)
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800367c:	e011      	b.n	80036a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367e:	f7fe fc71 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8003682:	0003      	movs	r3, r0
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003686:	e00c      	b.n	80036a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800368e:	e008      	b.n	80036a2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003694:	231a      	movs	r3, #26
 8003696:	2220      	movs	r2, #32
 8003698:	189b      	adds	r3, r3, r2
 800369a:	19db      	adds	r3, r3, r7
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
        break;
 80036a0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d100      	bne.n	80036aa <UART_SetConfig+0x2ae>
 80036a8:	e14b      	b.n	8003942 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <UART_SetConfig+0x318>)
 80036b0:	0052      	lsls	r2, r2, #1
 80036b2:	5ad3      	ldrh	r3, [r2, r3]
 80036b4:	0019      	movs	r1, r3
 80036b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036b8:	f7fc fd24 	bl	8000104 <__udivsi3>
 80036bc:	0003      	movs	r3, r0
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	0013      	movs	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d305      	bcc.n	80036dc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d8:	429a      	cmp	r2, r3
 80036da:	d91d      	bls.n	8003718 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80036dc:	231a      	movs	r3, #26
 80036de:	2220      	movs	r2, #32
 80036e0:	189b      	adds	r3, r3, r2
 80036e2:	19db      	adds	r3, r3, r7
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e12b      	b.n	8003942 <UART_SetConfig+0x546>
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	cfff69f3 	.word	0xcfff69f3
 80036f0:	ffffcfff 	.word	0xffffcfff
 80036f4:	40008000 	.word	0x40008000
 80036f8:	11fff4ff 	.word	0x11fff4ff
 80036fc:	40013800 	.word	0x40013800
 8003700:	40021000 	.word	0x40021000
 8003704:	40004400 	.word	0x40004400
 8003708:	40004800 	.word	0x40004800
 800370c:	40004c00 	.word	0x40004c00
 8003710:	00f42400 	.word	0x00f42400
 8003714:	08004194 	.word	0x08004194
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003724:	4b92      	ldr	r3, [pc, #584]	; (8003970 <UART_SetConfig+0x574>)
 8003726:	0052      	lsls	r2, r2, #1
 8003728:	5ad3      	ldrh	r3, [r2, r3]
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	69b8      	ldr	r0, [r7, #24]
 8003736:	69f9      	ldr	r1, [r7, #28]
 8003738:	f7fc fe5a 	bl	80003f0 <__aeabi_uldivmod>
 800373c:	0002      	movs	r2, r0
 800373e:	000b      	movs	r3, r1
 8003740:	0e11      	lsrs	r1, r2, #24
 8003742:	021d      	lsls	r5, r3, #8
 8003744:	430d      	orrs	r5, r1
 8003746:	0214      	lsls	r4, r2, #8
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68b8      	ldr	r0, [r7, #8]
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	1900      	adds	r0, r0, r4
 800375a:	4169      	adcs	r1, r5
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f7fc fe41 	bl	80003f0 <__aeabi_uldivmod>
 800376e:	0002      	movs	r2, r0
 8003770:	000b      	movs	r3, r1
 8003772:	0013      	movs	r3, r2
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003778:	23c0      	movs	r3, #192	; 0xc0
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	429a      	cmp	r2, r3
 800377e:	d309      	bcc.n	8003794 <UART_SetConfig+0x398>
 8003780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	035b      	lsls	r3, r3, #13
 8003786:	429a      	cmp	r2, r3
 8003788:	d204      	bcs.n	8003794 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	e0d6      	b.n	8003942 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003794:	231a      	movs	r3, #26
 8003796:	2220      	movs	r2, #32
 8003798:	189b      	adds	r3, r3, r2
 800379a:	19db      	adds	r3, r3, r7
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e0cf      	b.n	8003942 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d000      	beq.n	80037b0 <UART_SetConfig+0x3b4>
 80037ae:	e070      	b.n	8003892 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80037b0:	231b      	movs	r3, #27
 80037b2:	2220      	movs	r2, #32
 80037b4:	189b      	adds	r3, r3, r2
 80037b6:	19db      	adds	r3, r3, r7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d015      	beq.n	80037ea <UART_SetConfig+0x3ee>
 80037be:	dc18      	bgt.n	80037f2 <UART_SetConfig+0x3f6>
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d00d      	beq.n	80037e0 <UART_SetConfig+0x3e4>
 80037c4:	dc15      	bgt.n	80037f2 <UART_SetConfig+0x3f6>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <UART_SetConfig+0x3d4>
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d005      	beq.n	80037da <UART_SetConfig+0x3de>
 80037ce:	e010      	b.n	80037f2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7fe fc54 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80037d4:	0003      	movs	r3, r0
 80037d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037d8:	e014      	b.n	8003804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037da:	4b66      	ldr	r3, [pc, #408]	; (8003974 <UART_SetConfig+0x578>)
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037de:	e011      	b.n	8003804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e0:	f7fe fbc0 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 80037e4:	0003      	movs	r3, r0
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037e8:	e00c      	b.n	8003804 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037f0:	e008      	b.n	8003804 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037f6:	231a      	movs	r3, #26
 80037f8:	2220      	movs	r2, #32
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	19db      	adds	r3, r3, r7
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
        break;
 8003802:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	2b00      	cmp	r3, #0
 8003808:	d100      	bne.n	800380c <UART_SetConfig+0x410>
 800380a:	e09a      	b.n	8003942 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003810:	4b57      	ldr	r3, [pc, #348]	; (8003970 <UART_SetConfig+0x574>)
 8003812:	0052      	lsls	r2, r2, #1
 8003814:	5ad3      	ldrh	r3, [r2, r3]
 8003816:	0019      	movs	r1, r3
 8003818:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800381a:	f7fc fc73 	bl	8000104 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	005a      	lsls	r2, r3, #1
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	18d2      	adds	r2, r2, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7fc fc67 	bl	8000104 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d921      	bls.n	8003884 <UART_SetConfig+0x488>
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	025b      	lsls	r3, r3, #9
 8003846:	429a      	cmp	r2, r3
 8003848:	d21c      	bcs.n	8003884 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	b29a      	uxth	r2, r3
 800384e:	200e      	movs	r0, #14
 8003850:	2420      	movs	r4, #32
 8003852:	1903      	adds	r3, r0, r4
 8003854:	19db      	adds	r3, r3, r7
 8003856:	210f      	movs	r1, #15
 8003858:	438a      	bics	r2, r1
 800385a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	b29b      	uxth	r3, r3
 8003862:	2207      	movs	r2, #7
 8003864:	4013      	ands	r3, r2
 8003866:	b299      	uxth	r1, r3
 8003868:	1903      	adds	r3, r0, r4
 800386a:	19db      	adds	r3, r3, r7
 800386c:	1902      	adds	r2, r0, r4
 800386e:	19d2      	adds	r2, r2, r7
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	1902      	adds	r2, r0, r4
 800387c:	19d2      	adds	r2, r2, r7
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	e05e      	b.n	8003942 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003884:	231a      	movs	r3, #26
 8003886:	2220      	movs	r2, #32
 8003888:	189b      	adds	r3, r3, r2
 800388a:	19db      	adds	r3, r3, r7
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e057      	b.n	8003942 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003892:	231b      	movs	r3, #27
 8003894:	2220      	movs	r2, #32
 8003896:	189b      	adds	r3, r3, r2
 8003898:	19db      	adds	r3, r3, r7
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d015      	beq.n	80038cc <UART_SetConfig+0x4d0>
 80038a0:	dc18      	bgt.n	80038d4 <UART_SetConfig+0x4d8>
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d00d      	beq.n	80038c2 <UART_SetConfig+0x4c6>
 80038a6:	dc15      	bgt.n	80038d4 <UART_SetConfig+0x4d8>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <UART_SetConfig+0x4b6>
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d005      	beq.n	80038bc <UART_SetConfig+0x4c0>
 80038b0:	e010      	b.n	80038d4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b2:	f7fe fbe3 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80038b6:	0003      	movs	r3, r0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ba:	e014      	b.n	80038e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <UART_SetConfig+0x578>)
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038c0:	e011      	b.n	80038e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7fe fb4f 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 80038c6:	0003      	movs	r3, r0
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ca:	e00c      	b.n	80038e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038d2:	e008      	b.n	80038e6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038d8:	231a      	movs	r3, #26
 80038da:	2220      	movs	r2, #32
 80038dc:	189b      	adds	r3, r3, r2
 80038de:	19db      	adds	r3, r3, r7
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
        break;
 80038e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02a      	beq.n	8003942 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <UART_SetConfig+0x574>)
 80038f2:	0052      	lsls	r2, r2, #1
 80038f4:	5ad3      	ldrh	r3, [r2, r3]
 80038f6:	0019      	movs	r1, r3
 80038f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038fa:	f7fc fc03 	bl	8000104 <__udivsi3>
 80038fe:	0003      	movs	r3, r0
 8003900:	001a      	movs	r2, r3
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	18d2      	adds	r2, r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0019      	movs	r1, r3
 8003910:	0010      	movs	r0, r2
 8003912:	f7fc fbf7 	bl	8000104 <__udivsi3>
 8003916:	0003      	movs	r3, r0
 8003918:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d90a      	bls.n	8003936 <UART_SetConfig+0x53a>
 8003920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	025b      	lsls	r3, r3, #9
 8003926:	429a      	cmp	r2, r3
 8003928:	d205      	bcs.n	8003936 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	b29a      	uxth	r2, r3
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60da      	str	r2, [r3, #12]
 8003934:	e005      	b.n	8003942 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003936:	231a      	movs	r3, #26
 8003938:	2220      	movs	r2, #32
 800393a:	189b      	adds	r3, r3, r2
 800393c:	19db      	adds	r3, r3, r7
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	226a      	movs	r2, #106	; 0x6a
 8003946:	2101      	movs	r1, #1
 8003948:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	2268      	movs	r2, #104	; 0x68
 800394e:	2101      	movs	r1, #1
 8003950:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	2200      	movs	r2, #0
 8003956:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	2200      	movs	r2, #0
 800395c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800395e:	231a      	movs	r3, #26
 8003960:	2220      	movs	r2, #32
 8003962:	189b      	adds	r3, r3, r2
 8003964:	19db      	adds	r3, r3, r7
 8003966:	781b      	ldrb	r3, [r3, #0]
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b010      	add	sp, #64	; 0x40
 800396e:	bdb0      	pop	{r4, r5, r7, pc}
 8003970:	08004194 	.word	0x08004194
 8003974:	00f42400 	.word	0x00f42400

08003978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	2201      	movs	r2, #1
 8003986:	4013      	ands	r3, r2
 8003988:	d00b      	beq.n	80039a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <UART_AdvFeatureConfig+0x144>)
 8003992:	4013      	ands	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	2202      	movs	r2, #2
 80039a8:	4013      	ands	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a43      	ldr	r2, [pc, #268]	; (8003ac0 <UART_AdvFeatureConfig+0x148>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	0019      	movs	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	2204      	movs	r2, #4
 80039ca:	4013      	ands	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <UART_AdvFeatureConfig+0x14c>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	2208      	movs	r2, #8
 80039ec:	4013      	ands	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a34      	ldr	r2, [pc, #208]	; (8003ac8 <UART_AdvFeatureConfig+0x150>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a2c      	ldr	r2, [pc, #176]	; (8003acc <UART_AdvFeatureConfig+0x154>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	2220      	movs	r2, #32
 8003a30:	4013      	ands	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <UART_AdvFeatureConfig+0x158>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	0019      	movs	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	2240      	movs	r2, #64	; 0x40
 8003a52:	4013      	ands	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <UART_AdvFeatureConfig+0x15c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	035b      	lsls	r3, r3, #13
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d10b      	bne.n	8003a92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <UART_AdvFeatureConfig+0x160>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <UART_AdvFeatureConfig+0x164>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	fffdffff 	.word	0xfffdffff
 8003ac0:	fffeffff 	.word	0xfffeffff
 8003ac4:	fffbffff 	.word	0xfffbffff
 8003ac8:	ffff7fff 	.word	0xffff7fff
 8003acc:	ffffefff 	.word	0xffffefff
 8003ad0:	ffffdfff 	.word	0xffffdfff
 8003ad4:	ffefffff 	.word	0xffefffff
 8003ad8:	ff9fffff 	.word	0xff9fffff
 8003adc:	fff7ffff 	.word	0xfff7ffff

08003ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2290      	movs	r2, #144	; 0x90
 8003aec:	2100      	movs	r1, #0
 8003aee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003af0:	f7fd f918 	bl	8000d24 <HAL_GetTick>
 8003af4:	0003      	movs	r3, r0
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2208      	movs	r2, #8
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d10c      	bne.n	8003b20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	0391      	lsls	r1, r2, #14
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <UART_CheckIdleState+0x98>)
 8003b10:	9200      	str	r2, [sp, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f000 f832 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d001      	beq.n	8003b20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e026      	b.n	8003b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2204      	movs	r2, #4
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d10c      	bne.n	8003b48 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	03d1      	lsls	r1, r2, #15
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <UART_CheckIdleState+0x98>)
 8003b38:	9200      	str	r2, [sp, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f000 f81e 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d001      	beq.n	8003b48 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e012      	b.n	8003b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2288      	movs	r2, #136	; 0x88
 8003b4c:	2120      	movs	r1, #32
 8003b4e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	228c      	movs	r2, #140	; 0x8c
 8003b54:	2120      	movs	r1, #32
 8003b56:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2284      	movs	r2, #132	; 0x84
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b004      	add	sp, #16
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	01ffffff 	.word	0x01ffffff

08003b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b094      	sub	sp, #80	; 0x50
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	e0a7      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b90:	3301      	adds	r3, #1
 8003b92:	d100      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b94:	e0a3      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b96:	f7fd f8c5 	bl	8000d24 <HAL_GetTick>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d13f      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bac:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	494e      	ldr	r1, [pc, #312]	; (8003d08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003bce:	400a      	ands	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40
 8003be8:	2301      	movs	r3, #1
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2101      	movs	r1, #1
 8003c00:	438a      	bics	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2288      	movs	r2, #136	; 0x88
 8003c14:	2120      	movs	r1, #32
 8003c16:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	228c      	movs	r2, #140	; 0x8c
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2284      	movs	r2, #132	; 0x84
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e069      	b.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2204      	movs	r2, #4
 8003c34:	4013      	ands	r3, r2
 8003c36:	d052      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	401a      	ands	r2, r3
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d148      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c56:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5a:	613b      	str	r3, [r7, #16]
  return(result);
 8003c5c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4924      	ldr	r1, [pc, #144]	; (8003d08 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f383 8810 	msr	PRIMASK, r3
}
 8003c86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c88:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c8e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c92:	2301      	movs	r3, #1
 8003c94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f383 8810 	msr	PRIMASK, r3
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	438a      	bics	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	f383 8810 	msr	PRIMASK, r3
}
 8003cb8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2288      	movs	r2, #136	; 0x88
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	228c      	movs	r2, #140	; 0x8c
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2290      	movs	r2, #144	; 0x90
 8003cce:	2120      	movs	r1, #32
 8003cd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2284      	movs	r2, #132	; 0x84
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e010      	b.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	425a      	negs	r2, r3
 8003cee:	4153      	adcs	r3, r2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	1dfb      	adds	r3, r7, #7
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d100      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x182>
 8003cfc:	e747      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b014      	add	sp, #80	; 0x50
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	fffffe5f 	.word	0xfffffe5f

08003d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d14:	f3ef 8310 	mrs	r3, PRIMASK
 8003d18:	617b      	str	r3, [r7, #20]
  return(result);
 8003d1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4926      	ldr	r1, [pc, #152]	; (8003dd0 <UART_EndRxTransfer+0xc4>)
 8003d36:	400a      	ands	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d50:	2301      	movs	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	491b      	ldr	r1, [pc, #108]	; (8003dd4 <UART_EndRxTransfer+0xc8>)
 8003d68:	400a      	ands	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d118      	bne.n	8003db2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2110      	movs	r1, #16
 8003da2:	438a      	bics	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	228c      	movs	r2, #140	; 0x8c
 8003db6:	2120      	movs	r1, #32
 8003db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b00e      	add	sp, #56	; 0x38
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	fffffedf 	.word	0xfffffedf
 8003dd4:	effffffe 	.word	0xeffffffe

08003dd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	225e      	movs	r2, #94	; 0x5e
 8003dea:	2100      	movs	r1, #0
 8003dec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2256      	movs	r2, #86	; 0x56
 8003df2:	2100      	movs	r1, #0
 8003df4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff faeb 	bl	80033d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e14:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	2301      	movs	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f383 8810 	msr	PRIMASK, r3
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2140      	movs	r1, #64	; 0x40
 8003e30:	438a      	bics	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f383 8810 	msr	PRIMASK, r3
}
 8003e3e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2288      	movs	r2, #136	; 0x88
 8003e44:	2120      	movs	r1, #32
 8003e46:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff fab7 	bl	80033c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b006      	add	sp, #24
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b002      	add	sp, #8
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2284      	movs	r2, #132	; 0x84
 8003e9c:	5c9b      	ldrb	r3, [r3, r2]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e027      	b.n	8003ef6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2284      	movs	r2, #132	; 0x84
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2288      	movs	r2, #136	; 0x88
 8003eb2:	2124      	movs	r1, #36	; 0x24
 8003eb4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	438a      	bics	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2288      	movs	r2, #136	; 0x88
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2284      	movs	r2, #132	; 0x84
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	dfffffff 	.word	0xdfffffff

08003f04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2284      	movs	r2, #132	; 0x84
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e02e      	b.n	8003f7a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2284      	movs	r2, #132	; 0x84
 8003f20:	2101      	movs	r1, #1
 8003f22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2288      	movs	r2, #136	; 0x88
 8003f28:	2124      	movs	r1, #36	; 0x24
 8003f2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	08d9      	lsrs	r1, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f000 f854 	bl	8004008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2288      	movs	r2, #136	; 0x88
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2284      	movs	r2, #132	; 0x84
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2284      	movs	r2, #132	; 0x84
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e02f      	b.n	8003ffc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2284      	movs	r2, #132	; 0x84
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2288      	movs	r2, #136	; 0x88
 8003fa8:	2124      	movs	r1, #36	; 0x24
 8003faa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 f813 	bl	8004008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2288      	movs	r2, #136	; 0x88
 8003fee:	2120      	movs	r1, #32
 8003ff0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2284      	movs	r2, #132	; 0x84
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b004      	add	sp, #16
 8004002:	bd80      	pop	{r7, pc}
 8004004:	f1ffffff 	.word	0xf1ffffff

08004008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	226a      	movs	r2, #106	; 0x6a
 800401c:	2101      	movs	r1, #1
 800401e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2268      	movs	r2, #104	; 0x68
 8004024:	2101      	movs	r1, #1
 8004026:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004028:	e043      	b.n	80040b2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800402a:	260f      	movs	r6, #15
 800402c:	19bb      	adds	r3, r7, r6
 800402e:	2208      	movs	r2, #8
 8004030:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004032:	200e      	movs	r0, #14
 8004034:	183b      	adds	r3, r7, r0
 8004036:	2208      	movs	r2, #8
 8004038:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	0e5b      	lsrs	r3, r3, #25
 8004042:	b2da      	uxtb	r2, r3
 8004044:	240d      	movs	r4, #13
 8004046:	193b      	adds	r3, r7, r4
 8004048:	2107      	movs	r1, #7
 800404a:	400a      	ands	r2, r1
 800404c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	0f5b      	lsrs	r3, r3, #29
 8004056:	b2da      	uxtb	r2, r3
 8004058:	250c      	movs	r5, #12
 800405a:	197b      	adds	r3, r7, r5
 800405c:	2107      	movs	r1, #7
 800405e:	400a      	ands	r2, r1
 8004060:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004062:	183b      	adds	r3, r7, r0
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	197a      	adds	r2, r7, r5
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	4914      	ldr	r1, [pc, #80]	; (80040bc <UARTEx_SetNbDataToProcess+0xb4>)
 800406c:	5c8a      	ldrb	r2, [r1, r2]
 800406e:	435a      	muls	r2, r3
 8004070:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004072:	197b      	adds	r3, r7, r5
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004078:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800407a:	0019      	movs	r1, r3
 800407c:	f7fc f8cc 	bl	8000218 <__divsi3>
 8004080:	0003      	movs	r3, r0
 8004082:	b299      	uxth	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	226a      	movs	r2, #106	; 0x6a
 8004088:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800408a:	19bb      	adds	r3, r7, r6
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	193a      	adds	r2, r7, r4
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	490a      	ldr	r1, [pc, #40]	; (80040bc <UARTEx_SetNbDataToProcess+0xb4>)
 8004094:	5c8a      	ldrb	r2, [r1, r2]
 8004096:	435a      	muls	r2, r3
 8004098:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800409a:	193b      	adds	r3, r7, r4
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <UARTEx_SetNbDataToProcess+0xb8>)
 80040a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040a2:	0019      	movs	r1, r3
 80040a4:	f7fc f8b8 	bl	8000218 <__divsi3>
 80040a8:	0003      	movs	r3, r0
 80040aa:	b299      	uxth	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2268      	movs	r2, #104	; 0x68
 80040b0:	5299      	strh	r1, [r3, r2]
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b005      	add	sp, #20
 80040b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	080041ac 	.word	0x080041ac
 80040c0:	080041b4 	.word	0x080041b4

080040c4 <__libc_init_array>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	2600      	movs	r6, #0
 80040c8:	4d0c      	ldr	r5, [pc, #48]	; (80040fc <__libc_init_array+0x38>)
 80040ca:	4c0d      	ldr	r4, [pc, #52]	; (8004100 <__libc_init_array+0x3c>)
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	42a6      	cmp	r6, r4
 80040d2:	d109      	bne.n	80040e8 <__libc_init_array+0x24>
 80040d4:	2600      	movs	r6, #0
 80040d6:	f000 f821 	bl	800411c <_init>
 80040da:	4d0a      	ldr	r5, [pc, #40]	; (8004104 <__libc_init_array+0x40>)
 80040dc:	4c0a      	ldr	r4, [pc, #40]	; (8004108 <__libc_init_array+0x44>)
 80040de:	1b64      	subs	r4, r4, r5
 80040e0:	10a4      	asrs	r4, r4, #2
 80040e2:	42a6      	cmp	r6, r4
 80040e4:	d105      	bne.n	80040f2 <__libc_init_array+0x2e>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	00b3      	lsls	r3, r6, #2
 80040ea:	58eb      	ldr	r3, [r5, r3]
 80040ec:	4798      	blx	r3
 80040ee:	3601      	adds	r6, #1
 80040f0:	e7ee      	b.n	80040d0 <__libc_init_array+0xc>
 80040f2:	00b3      	lsls	r3, r6, #2
 80040f4:	58eb      	ldr	r3, [r5, r3]
 80040f6:	4798      	blx	r3
 80040f8:	3601      	adds	r6, #1
 80040fa:	e7f2      	b.n	80040e2 <__libc_init_array+0x1e>
 80040fc:	080041c4 	.word	0x080041c4
 8004100:	080041c4 	.word	0x080041c4
 8004104:	080041c4 	.word	0x080041c4
 8004108:	080041c8 	.word	0x080041c8

0800410c <memset>:
 800410c:	0003      	movs	r3, r0
 800410e:	1882      	adds	r2, r0, r2
 8004110:	4293      	cmp	r3, r2
 8004112:	d100      	bne.n	8004116 <memset+0xa>
 8004114:	4770      	bx	lr
 8004116:	7019      	strb	r1, [r3, #0]
 8004118:	3301      	adds	r3, #1
 800411a:	e7f9      	b.n	8004110 <memset+0x4>

0800411c <_init>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr

08004128 <_fini>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr
